// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/answermultichoices"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerMultiChoicesCreate is the builder for creating a AnswerMultiChoices entity.
type AnswerMultiChoicesCreate struct {
	config
	mutation *AnswerMultiChoicesMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (amcc *AnswerMultiChoicesCreate) SetName(s string) *AnswerMultiChoicesCreate {
	amcc.mutation.SetName(s)
	return amcc
}

// SetIsCorrect sets the "is_correct" field.
func (amcc *AnswerMultiChoicesCreate) SetIsCorrect(b bool) *AnswerMultiChoicesCreate {
	amcc.mutation.SetIsCorrect(b)
	return amcc
}

// Mutation returns the AnswerMultiChoicesMutation object of the builder.
func (amcc *AnswerMultiChoicesCreate) Mutation() *AnswerMultiChoicesMutation {
	return amcc.mutation
}

// Save creates the AnswerMultiChoices in the database.
func (amcc *AnswerMultiChoicesCreate) Save(ctx context.Context) (*AnswerMultiChoices, error) {
	return withHooks(ctx, amcc.sqlSave, amcc.mutation, amcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (amcc *AnswerMultiChoicesCreate) SaveX(ctx context.Context) *AnswerMultiChoices {
	v, err := amcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amcc *AnswerMultiChoicesCreate) Exec(ctx context.Context) error {
	_, err := amcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcc *AnswerMultiChoicesCreate) ExecX(ctx context.Context) {
	if err := amcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amcc *AnswerMultiChoicesCreate) check() error {
	if _, ok := amcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AnswerMultiChoices.name"`)}
	}
	if v, ok := amcc.mutation.Name(); ok {
		if err := answermultichoices.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnswerMultiChoices.name": %w`, err)}
		}
	}
	if _, ok := amcc.mutation.IsCorrect(); !ok {
		return &ValidationError{Name: "is_correct", err: errors.New(`ent: missing required field "AnswerMultiChoices.is_correct"`)}
	}
	return nil
}

func (amcc *AnswerMultiChoicesCreate) sqlSave(ctx context.Context) (*AnswerMultiChoices, error) {
	if err := amcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := amcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, amcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	amcc.mutation.id = &_node.ID
	amcc.mutation.done = true
	return _node, nil
}

func (amcc *AnswerMultiChoicesCreate) createSpec() (*AnswerMultiChoices, *sqlgraph.CreateSpec) {
	var (
		_node = &AnswerMultiChoices{config: amcc.config}
		_spec = sqlgraph.NewCreateSpec(answermultichoices.Table, sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt))
	)
	if value, ok := amcc.mutation.Name(); ok {
		_spec.SetField(answermultichoices.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := amcc.mutation.IsCorrect(); ok {
		_spec.SetField(answermultichoices.FieldIsCorrect, field.TypeBool, value)
		_node.IsCorrect = value
	}
	return _node, _spec
}

// AnswerMultiChoicesCreateBulk is the builder for creating many AnswerMultiChoices entities in bulk.
type AnswerMultiChoicesCreateBulk struct {
	config
	err      error
	builders []*AnswerMultiChoicesCreate
}

// Save creates the AnswerMultiChoices entities in the database.
func (amccb *AnswerMultiChoicesCreateBulk) Save(ctx context.Context) ([]*AnswerMultiChoices, error) {
	if amccb.err != nil {
		return nil, amccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(amccb.builders))
	nodes := make([]*AnswerMultiChoices, len(amccb.builders))
	mutators := make([]Mutator, len(amccb.builders))
	for i := range amccb.builders {
		func(i int, root context.Context) {
			builder := amccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnswerMultiChoicesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, amccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, amccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, amccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (amccb *AnswerMultiChoicesCreateBulk) SaveX(ctx context.Context) []*AnswerMultiChoices {
	v, err := amccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (amccb *AnswerMultiChoicesCreateBulk) Exec(ctx context.Context) error {
	_, err := amccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amccb *AnswerMultiChoicesCreateBulk) ExecX(ctx context.Context) {
	if err := amccb.Exec(ctx); err != nil {
		panic(err)
	}
}
