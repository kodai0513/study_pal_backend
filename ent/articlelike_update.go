// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/article"
	"study-pal-backend/ent/articlelike"
	"study-pal-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ArticleLikeUpdate is the builder for updating ArticleLike entities.
type ArticleLikeUpdate struct {
	config
	hooks    []Hook
	mutation *ArticleLikeMutation
}

// Where appends a list predicates to the ArticleLikeUpdate builder.
func (alu *ArticleLikeUpdate) Where(ps ...predicate.ArticleLike) *ArticleLikeUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetCreatedAt sets the "created_at" field.
func (alu *ArticleLikeUpdate) SetCreatedAt(t time.Time) *ArticleLikeUpdate {
	alu.mutation.SetCreatedAt(t)
	return alu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alu *ArticleLikeUpdate) SetNillableCreatedAt(t *time.Time) *ArticleLikeUpdate {
	if t != nil {
		alu.SetCreatedAt(*t)
	}
	return alu
}

// SetUpdatedAt sets the "updated_at" field.
func (alu *ArticleLikeUpdate) SetUpdatedAt(t time.Time) *ArticleLikeUpdate {
	alu.mutation.SetUpdatedAt(t)
	return alu
}

// SetArticleID sets the "article_id" field.
func (alu *ArticleLikeUpdate) SetArticleID(u uuid.UUID) *ArticleLikeUpdate {
	alu.mutation.SetArticleID(u)
	return alu
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (alu *ArticleLikeUpdate) SetNillableArticleID(u *uuid.UUID) *ArticleLikeUpdate {
	if u != nil {
		alu.SetArticleID(*u)
	}
	return alu
}

// SetUserID sets the "user_id" field.
func (alu *ArticleLikeUpdate) SetUserID(u uuid.UUID) *ArticleLikeUpdate {
	alu.mutation.SetUserID(u)
	return alu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (alu *ArticleLikeUpdate) SetNillableUserID(u *uuid.UUID) *ArticleLikeUpdate {
	if u != nil {
		alu.SetUserID(*u)
	}
	return alu
}

// SetArticle sets the "article" edge to the Article entity.
func (alu *ArticleLikeUpdate) SetArticle(a *Article) *ArticleLikeUpdate {
	return alu.SetArticleID(a.ID)
}

// Mutation returns the ArticleLikeMutation object of the builder.
func (alu *ArticleLikeUpdate) Mutation() *ArticleLikeMutation {
	return alu.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (alu *ArticleLikeUpdate) ClearArticle() *ArticleLikeUpdate {
	alu.mutation.ClearArticle()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *ArticleLikeUpdate) Save(ctx context.Context) (int, error) {
	alu.defaults()
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *ArticleLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *ArticleLikeUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *ArticleLikeUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alu *ArticleLikeUpdate) defaults() {
	if _, ok := alu.mutation.UpdatedAt(); !ok {
		v := articlelike.UpdateDefaultUpdatedAt()
		alu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *ArticleLikeUpdate) check() error {
	if alu.mutation.ArticleCleared() && len(alu.mutation.ArticleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ArticleLike.article"`)
	}
	return nil
}

func (alu *ArticleLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelike.Table, articlelike.Columns, sqlgraph.NewFieldSpec(articlelike.FieldID, field.TypeUUID))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.CreatedAt(); ok {
		_spec.SetField(articlelike.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelike.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := alu.mutation.UserID(); ok {
		_spec.SetField(articlelike.FieldUserID, field.TypeUUID, value)
	}
	if alu.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelike.ArticleTable,
			Columns: []string{articlelike.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelike.ArticleTable,
			Columns: []string{articlelike.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// ArticleLikeUpdateOne is the builder for updating a single ArticleLike entity.
type ArticleLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArticleLikeMutation
}

// SetCreatedAt sets the "created_at" field.
func (aluo *ArticleLikeUpdateOne) SetCreatedAt(t time.Time) *ArticleLikeUpdateOne {
	aluo.mutation.SetCreatedAt(t)
	return aluo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aluo *ArticleLikeUpdateOne) SetNillableCreatedAt(t *time.Time) *ArticleLikeUpdateOne {
	if t != nil {
		aluo.SetCreatedAt(*t)
	}
	return aluo
}

// SetUpdatedAt sets the "updated_at" field.
func (aluo *ArticleLikeUpdateOne) SetUpdatedAt(t time.Time) *ArticleLikeUpdateOne {
	aluo.mutation.SetUpdatedAt(t)
	return aluo
}

// SetArticleID sets the "article_id" field.
func (aluo *ArticleLikeUpdateOne) SetArticleID(u uuid.UUID) *ArticleLikeUpdateOne {
	aluo.mutation.SetArticleID(u)
	return aluo
}

// SetNillableArticleID sets the "article_id" field if the given value is not nil.
func (aluo *ArticleLikeUpdateOne) SetNillableArticleID(u *uuid.UUID) *ArticleLikeUpdateOne {
	if u != nil {
		aluo.SetArticleID(*u)
	}
	return aluo
}

// SetUserID sets the "user_id" field.
func (aluo *ArticleLikeUpdateOne) SetUserID(u uuid.UUID) *ArticleLikeUpdateOne {
	aluo.mutation.SetUserID(u)
	return aluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (aluo *ArticleLikeUpdateOne) SetNillableUserID(u *uuid.UUID) *ArticleLikeUpdateOne {
	if u != nil {
		aluo.SetUserID(*u)
	}
	return aluo
}

// SetArticle sets the "article" edge to the Article entity.
func (aluo *ArticleLikeUpdateOne) SetArticle(a *Article) *ArticleLikeUpdateOne {
	return aluo.SetArticleID(a.ID)
}

// Mutation returns the ArticleLikeMutation object of the builder.
func (aluo *ArticleLikeUpdateOne) Mutation() *ArticleLikeMutation {
	return aluo.mutation
}

// ClearArticle clears the "article" edge to the Article entity.
func (aluo *ArticleLikeUpdateOne) ClearArticle() *ArticleLikeUpdateOne {
	aluo.mutation.ClearArticle()
	return aluo
}

// Where appends a list predicates to the ArticleLikeUpdate builder.
func (aluo *ArticleLikeUpdateOne) Where(ps ...predicate.ArticleLike) *ArticleLikeUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *ArticleLikeUpdateOne) Select(field string, fields ...string) *ArticleLikeUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated ArticleLike entity.
func (aluo *ArticleLikeUpdateOne) Save(ctx context.Context) (*ArticleLike, error) {
	aluo.defaults()
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *ArticleLikeUpdateOne) SaveX(ctx context.Context) *ArticleLike {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *ArticleLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *ArticleLikeUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aluo *ArticleLikeUpdateOne) defaults() {
	if _, ok := aluo.mutation.UpdatedAt(); !ok {
		v := articlelike.UpdateDefaultUpdatedAt()
		aluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *ArticleLikeUpdateOne) check() error {
	if aluo.mutation.ArticleCleared() && len(aluo.mutation.ArticleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ArticleLike.article"`)
	}
	return nil
}

func (aluo *ArticleLikeUpdateOne) sqlSave(ctx context.Context) (_node *ArticleLike, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(articlelike.Table, articlelike.Columns, sqlgraph.NewFieldSpec(articlelike.FieldID, field.TypeUUID))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ArticleLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, articlelike.FieldID)
		for _, f := range fields {
			if !articlelike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != articlelike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.CreatedAt(); ok {
		_spec.SetField(articlelike.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelike.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aluo.mutation.UserID(); ok {
		_spec.SetField(articlelike.FieldUserID, field.TypeUUID, value)
	}
	if aluo.mutation.ArticleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelike.ArticleTable,
			Columns: []string{articlelike.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelike.ArticleTable,
			Columns: []string{articlelike.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ArticleLike{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{articlelike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
