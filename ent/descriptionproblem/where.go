// Code generated by ent, DO NOT EDIT.

package descriptionproblem

import (
	"study-pal-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldUpdatedAt, v))
}

// CorrectStatement applies equality check predicate on the "correct_statement" field. It's identical to CorrectStatementEQ.
func CorrectStatement(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldCorrectStatement, v))
}

// Statement applies equality check predicate on the "statement" field. It's identical to StatementEQ.
func Statement(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldStatement, v))
}

// WorkbookID applies equality check predicate on the "workbook_id" field. It's identical to WorkbookIDEQ.
func WorkbookID(v uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldWorkbookID, v))
}

// WorkbookCategoryID applies equality check predicate on the "workbook_category_id" field. It's identical to WorkbookCategoryIDEQ.
func WorkbookCategoryID(v uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldWorkbookCategoryID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLTE(FieldUpdatedAt, v))
}

// CorrectStatementEQ applies the EQ predicate on the "correct_statement" field.
func CorrectStatementEQ(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldCorrectStatement, v))
}

// CorrectStatementNEQ applies the NEQ predicate on the "correct_statement" field.
func CorrectStatementNEQ(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNEQ(FieldCorrectStatement, v))
}

// CorrectStatementIn applies the In predicate on the "correct_statement" field.
func CorrectStatementIn(vs ...string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIn(FieldCorrectStatement, vs...))
}

// CorrectStatementNotIn applies the NotIn predicate on the "correct_statement" field.
func CorrectStatementNotIn(vs ...string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotIn(FieldCorrectStatement, vs...))
}

// CorrectStatementGT applies the GT predicate on the "correct_statement" field.
func CorrectStatementGT(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGT(FieldCorrectStatement, v))
}

// CorrectStatementGTE applies the GTE predicate on the "correct_statement" field.
func CorrectStatementGTE(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGTE(FieldCorrectStatement, v))
}

// CorrectStatementLT applies the LT predicate on the "correct_statement" field.
func CorrectStatementLT(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLT(FieldCorrectStatement, v))
}

// CorrectStatementLTE applies the LTE predicate on the "correct_statement" field.
func CorrectStatementLTE(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLTE(FieldCorrectStatement, v))
}

// CorrectStatementContains applies the Contains predicate on the "correct_statement" field.
func CorrectStatementContains(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldContains(FieldCorrectStatement, v))
}

// CorrectStatementHasPrefix applies the HasPrefix predicate on the "correct_statement" field.
func CorrectStatementHasPrefix(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldHasPrefix(FieldCorrectStatement, v))
}

// CorrectStatementHasSuffix applies the HasSuffix predicate on the "correct_statement" field.
func CorrectStatementHasSuffix(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldHasSuffix(FieldCorrectStatement, v))
}

// CorrectStatementEqualFold applies the EqualFold predicate on the "correct_statement" field.
func CorrectStatementEqualFold(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEqualFold(FieldCorrectStatement, v))
}

// CorrectStatementContainsFold applies the ContainsFold predicate on the "correct_statement" field.
func CorrectStatementContainsFold(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldContainsFold(FieldCorrectStatement, v))
}

// StatementEQ applies the EQ predicate on the "statement" field.
func StatementEQ(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldStatement, v))
}

// StatementNEQ applies the NEQ predicate on the "statement" field.
func StatementNEQ(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNEQ(FieldStatement, v))
}

// StatementIn applies the In predicate on the "statement" field.
func StatementIn(vs ...string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIn(FieldStatement, vs...))
}

// StatementNotIn applies the NotIn predicate on the "statement" field.
func StatementNotIn(vs ...string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotIn(FieldStatement, vs...))
}

// StatementGT applies the GT predicate on the "statement" field.
func StatementGT(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGT(FieldStatement, v))
}

// StatementGTE applies the GTE predicate on the "statement" field.
func StatementGTE(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldGTE(FieldStatement, v))
}

// StatementLT applies the LT predicate on the "statement" field.
func StatementLT(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLT(FieldStatement, v))
}

// StatementLTE applies the LTE predicate on the "statement" field.
func StatementLTE(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldLTE(FieldStatement, v))
}

// StatementContains applies the Contains predicate on the "statement" field.
func StatementContains(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldContains(FieldStatement, v))
}

// StatementHasPrefix applies the HasPrefix predicate on the "statement" field.
func StatementHasPrefix(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldHasPrefix(FieldStatement, v))
}

// StatementHasSuffix applies the HasSuffix predicate on the "statement" field.
func StatementHasSuffix(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldHasSuffix(FieldStatement, v))
}

// StatementEqualFold applies the EqualFold predicate on the "statement" field.
func StatementEqualFold(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEqualFold(FieldStatement, v))
}

// StatementContainsFold applies the ContainsFold predicate on the "statement" field.
func StatementContainsFold(v string) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldContainsFold(FieldStatement, v))
}

// WorkbookIDEQ applies the EQ predicate on the "workbook_id" field.
func WorkbookIDEQ(v uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldWorkbookID, v))
}

// WorkbookIDNEQ applies the NEQ predicate on the "workbook_id" field.
func WorkbookIDNEQ(v uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNEQ(FieldWorkbookID, v))
}

// WorkbookIDIn applies the In predicate on the "workbook_id" field.
func WorkbookIDIn(vs ...uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIn(FieldWorkbookID, vs...))
}

// WorkbookIDNotIn applies the NotIn predicate on the "workbook_id" field.
func WorkbookIDNotIn(vs ...uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotIn(FieldWorkbookID, vs...))
}

// WorkbookCategoryIDEQ applies the EQ predicate on the "workbook_category_id" field.
func WorkbookCategoryIDEQ(v uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldEQ(FieldWorkbookCategoryID, v))
}

// WorkbookCategoryIDNEQ applies the NEQ predicate on the "workbook_category_id" field.
func WorkbookCategoryIDNEQ(v uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNEQ(FieldWorkbookCategoryID, v))
}

// WorkbookCategoryIDIn applies the In predicate on the "workbook_category_id" field.
func WorkbookCategoryIDIn(vs ...uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIn(FieldWorkbookCategoryID, vs...))
}

// WorkbookCategoryIDNotIn applies the NotIn predicate on the "workbook_category_id" field.
func WorkbookCategoryIDNotIn(vs ...uuid.UUID) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotIn(FieldWorkbookCategoryID, vs...))
}

// WorkbookCategoryIDIsNil applies the IsNil predicate on the "workbook_category_id" field.
func WorkbookCategoryIDIsNil() predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldIsNull(FieldWorkbookCategoryID))
}

// WorkbookCategoryIDNotNil applies the NotNil predicate on the "workbook_category_id" field.
func WorkbookCategoryIDNotNil() predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.FieldNotNull(FieldWorkbookCategoryID))
}

// HasWorkbook applies the HasEdge predicate on the "workbook" edge.
func HasWorkbook() predicate.DescriptionProblem {
	return predicate.DescriptionProblem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkbookTable, WorkbookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkbookWith applies the HasEdge predicate on the "workbook" edge with a given conditions (other predicates).
func HasWorkbookWith(preds ...predicate.Workbook) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(func(s *sql.Selector) {
		step := newWorkbookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkbookCategory applies the HasEdge predicate on the "workbook_category" edge.
func HasWorkbookCategory() predicate.DescriptionProblem {
	return predicate.DescriptionProblem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkbookCategoryTable, WorkbookCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkbookCategoryWith applies the HasEdge predicate on the "workbook_category" edge with a given conditions (other predicates).
func HasWorkbookCategoryWith(preds ...predicate.WorkbookCategory) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(func(s *sql.Selector) {
		step := newWorkbookCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DescriptionProblem) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DescriptionProblem) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DescriptionProblem) predicate.DescriptionProblem {
	return predicate.DescriptionProblem(sql.NotPredicates(p))
}
