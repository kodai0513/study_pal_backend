// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookmember"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCreate is the builder for creating a Workbook entity.
type WorkbookCreate struct {
	config
	mutation *WorkbookMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wc *WorkbookCreate) SetCreatedAt(t time.Time) *WorkbookCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WorkbookCreate) SetNillableCreatedAt(t *time.Time) *WorkbookCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WorkbookCreate) SetUpdatedAt(t time.Time) *WorkbookCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WorkbookCreate) SetNillableUpdatedAt(t *time.Time) *WorkbookCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetCreatedID sets the "created_id" field.
func (wc *WorkbookCreate) SetCreatedID(u uuid.UUID) *WorkbookCreate {
	wc.mutation.SetCreatedID(u)
	return wc
}

// SetDescription sets the "description" field.
func (wc *WorkbookCreate) SetDescription(s string) *WorkbookCreate {
	wc.mutation.SetDescription(s)
	return wc
}

// SetIsPublic sets the "is_public" field.
func (wc *WorkbookCreate) SetIsPublic(b bool) *WorkbookCreate {
	wc.mutation.SetIsPublic(b)
	return wc
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (wc *WorkbookCreate) SetNillableIsPublic(b *bool) *WorkbookCreate {
	if b != nil {
		wc.SetIsPublic(*b)
	}
	return wc
}

// SetTitle sets the "title" field.
func (wc *WorkbookCreate) SetTitle(s string) *WorkbookCreate {
	wc.mutation.SetTitle(s)
	return wc
}

// SetID sets the "id" field.
func (wc *WorkbookCreate) SetID(u uuid.UUID) *WorkbookCreate {
	wc.mutation.SetID(u)
	return wc
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (wc *WorkbookCreate) AddProblemIDs(ids ...uuid.UUID) *WorkbookCreate {
	wc.mutation.AddProblemIDs(ids...)
	return wc
}

// AddProblems adds the "problems" edges to the Problem entity.
func (wc *WorkbookCreate) AddProblems(p ...*Problem) *WorkbookCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wc.AddProblemIDs(ids...)
}

// AddWorkbookCategoryIDs adds the "workbook_categories" edge to the WorkbookCategory entity by IDs.
func (wc *WorkbookCreate) AddWorkbookCategoryIDs(ids ...uuid.UUID) *WorkbookCreate {
	wc.mutation.AddWorkbookCategoryIDs(ids...)
	return wc
}

// AddWorkbookCategories adds the "workbook_categories" edges to the WorkbookCategory entity.
func (wc *WorkbookCreate) AddWorkbookCategories(w ...*WorkbookCategory) *WorkbookCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkbookCategoryIDs(ids...)
}

// AddWorkbookMemberIDs adds the "workbook_members" edge to the WorkbookMember entity by IDs.
func (wc *WorkbookCreate) AddWorkbookMemberIDs(ids ...uuid.UUID) *WorkbookCreate {
	wc.mutation.AddWorkbookMemberIDs(ids...)
	return wc
}

// AddWorkbookMembers adds the "workbook_members" edges to the WorkbookMember entity.
func (wc *WorkbookCreate) AddWorkbookMembers(w ...*WorkbookMember) *WorkbookCreate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkbookMemberIDs(ids...)
}

// Mutation returns the WorkbookMutation object of the builder.
func (wc *WorkbookCreate) Mutation() *WorkbookMutation {
	return wc.mutation
}

// Save creates the Workbook in the database.
func (wc *WorkbookCreate) Save(ctx context.Context) (*Workbook, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkbookCreate) SaveX(ctx context.Context) *Workbook {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorkbookCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorkbookCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorkbookCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := workbook.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := workbook.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.IsPublic(); !ok {
		v := workbook.DefaultIsPublic
		wc.mutation.SetIsPublic(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkbookCreate) check() error {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Workbook.created_at"`)}
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Workbook.updated_at"`)}
	}
	if _, ok := wc.mutation.CreatedID(); !ok {
		return &ValidationError{Name: "created_id", err: errors.New(`ent: missing required field "Workbook.created_id"`)}
	}
	if _, ok := wc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Workbook.description"`)}
	}
	if v, ok := wc.mutation.Description(); ok {
		if err := workbook.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Workbook.description": %w`, err)}
		}
	}
	if _, ok := wc.mutation.IsPublic(); !ok {
		return &ValidationError{Name: "is_public", err: errors.New(`ent: missing required field "Workbook.is_public"`)}
	}
	if _, ok := wc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Workbook.title"`)}
	}
	if v, ok := wc.mutation.Title(); ok {
		if err := workbook.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Workbook.title": %w`, err)}
		}
	}
	return nil
}

func (wc *WorkbookCreate) sqlSave(ctx context.Context) (*Workbook, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorkbookCreate) createSpec() (*Workbook, *sqlgraph.CreateSpec) {
	var (
		_node = &Workbook{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(workbook.Table, sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID))
	)
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(workbook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(workbook.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.CreatedID(); ok {
		_spec.SetField(workbook.FieldCreatedID, field.TypeUUID, value)
		_node.CreatedID = value
	}
	if value, ok := wc.mutation.Description(); ok {
		_spec.SetField(workbook.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := wc.mutation.IsPublic(); ok {
		_spec.SetField(workbook.FieldIsPublic, field.TypeBool, value)
		_node.IsPublic = value
	}
	if value, ok := wc.mutation.Title(); ok {
		_spec.SetField(workbook.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := wc.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.ProblemsTable,
			Columns: []string{workbook.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkbookCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookCategoriesTable,
			Columns: []string{workbook.WorkbookCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkbookMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookMembersTable,
			Columns: []string{workbook.WorkbookMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkbookCreateBulk is the builder for creating many Workbook entities in bulk.
type WorkbookCreateBulk struct {
	config
	err      error
	builders []*WorkbookCreate
}

// Save creates the Workbook entities in the database.
func (wcb *WorkbookCreateBulk) Save(ctx context.Context) ([]*Workbook, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workbook, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkbookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkbookCreateBulk) SaveX(ctx context.Context) []*Workbook {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorkbookCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorkbookCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}
