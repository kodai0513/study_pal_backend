// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArticlesColumns holds the columns for the "articles" table.
	ArticlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "page_id", Type: field.TypeInt, Unique: true, Nullable: true},
		{Name: "description", Type: field.TypeString, Size: 400},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// ArticlesTable holds the schema information for the "articles" table.
	ArticlesTable = &schema.Table{
		Name:       "articles",
		Columns:    ArticlesColumns,
		PrimaryKey: []*schema.Column{ArticlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "articles_users_articles",
				Columns:    []*schema.Column{ArticlesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DescriptionProblemsColumns holds the columns for the "description_problems" table.
	DescriptionProblemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "correct_statement", Type: field.TypeString, Size: 255},
		{Name: "statement", Type: field.TypeString, Size: 1000},
		{Name: "workbook_id", Type: field.TypeUUID},
		{Name: "workbook_category_id", Type: field.TypeUUID, Nullable: true},
		{Name: "workbook_category_detail_id", Type: field.TypeUUID, Nullable: true},
	}
	// DescriptionProblemsTable holds the schema information for the "description_problems" table.
	DescriptionProblemsTable = &schema.Table{
		Name:       "description_problems",
		Columns:    DescriptionProblemsColumns,
		PrimaryKey: []*schema.Column{DescriptionProblemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "description_problems_workbooks_description_problems",
				Columns:    []*schema.Column{DescriptionProblemsColumns[5]},
				RefColumns: []*schema.Column{WorkbooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "description_problems_workbook_categories_description_problems",
				Columns:    []*schema.Column{DescriptionProblemsColumns[6]},
				RefColumns: []*schema.Column{WorkbookCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "description_problems_workbook_category_details_description_problems",
				Columns:    []*schema.Column{DescriptionProblemsColumns[7]},
				RefColumns: []*schema.Column{WorkbookCategoryDetailsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 255},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// SelectionProblemsColumns holds the columns for the "selection_problems" table.
	SelectionProblemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "statement", Type: field.TypeString, Size: 255},
		{Name: "workbook_id", Type: field.TypeUUID},
		{Name: "workbook_category_id", Type: field.TypeUUID, Nullable: true},
		{Name: "workbook_category_detail_id", Type: field.TypeUUID, Nullable: true},
	}
	// SelectionProblemsTable holds the schema information for the "selection_problems" table.
	SelectionProblemsTable = &schema.Table{
		Name:       "selection_problems",
		Columns:    SelectionProblemsColumns,
		PrimaryKey: []*schema.Column{SelectionProblemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "selection_problems_workbooks_selection_problems",
				Columns:    []*schema.Column{SelectionProblemsColumns[4]},
				RefColumns: []*schema.Column{WorkbooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "selection_problems_workbook_categories_selection_problems",
				Columns:    []*schema.Column{SelectionProblemsColumns[5]},
				RefColumns: []*schema.Column{WorkbookCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "selection_problems_workbook_category_details_selection_problems",
				Columns:    []*schema.Column{SelectionProblemsColumns[6]},
				RefColumns: []*schema.Column{WorkbookCategoryDetailsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// SelectionProblemAnswersColumns holds the columns for the "selection_problem_answers" table.
	SelectionProblemAnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_correct", Type: field.TypeBool},
		{Name: "statement", Type: field.TypeString, Size: 255},
		{Name: "selection_problem_id", Type: field.TypeUUID},
	}
	// SelectionProblemAnswersTable holds the schema information for the "selection_problem_answers" table.
	SelectionProblemAnswersTable = &schema.Table{
		Name:       "selection_problem_answers",
		Columns:    SelectionProblemAnswersColumns,
		PrimaryKey: []*schema.Column{SelectionProblemAnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "selection_problem_answers_selection_problems_selection_problem_answers",
				Columns:    []*schema.Column{SelectionProblemAnswersColumns[5]},
				RefColumns: []*schema.Column{SelectionProblemsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// TrueOrFalseProblemsColumns holds the columns for the "true_or_false_problems" table.
	TrueOrFalseProblemsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_correct", Type: field.TypeBool},
		{Name: "statement", Type: field.TypeString, Size: 255},
		{Name: "workbook_id", Type: field.TypeUUID},
		{Name: "workbook_category_id", Type: field.TypeUUID, Nullable: true},
		{Name: "workbook_category_detail_id", Type: field.TypeUUID, Nullable: true},
	}
	// TrueOrFalseProblemsTable holds the schema information for the "true_or_false_problems" table.
	TrueOrFalseProblemsTable = &schema.Table{
		Name:       "true_or_false_problems",
		Columns:    TrueOrFalseProblemsColumns,
		PrimaryKey: []*schema.Column{TrueOrFalseProblemsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "true_or_false_problems_workbooks_true_or_false_problems",
				Columns:    []*schema.Column{TrueOrFalseProblemsColumns[5]},
				RefColumns: []*schema.Column{WorkbooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "true_or_false_problems_workbook_categories_true_or_false_problems",
				Columns:    []*schema.Column{TrueOrFalseProblemsColumns[6]},
				RefColumns: []*schema.Column{WorkbookCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "true_or_false_problems_workbook_category_details_true_or_false_problems",
				Columns:    []*schema.Column{TrueOrFalseProblemsColumns[7]},
				RefColumns: []*schema.Column{WorkbookCategoryDetailsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "name", Type: field.TypeString, Unique: true, Size: 255},
		{Name: "nick_name", Type: field.TypeString, Size: 255},
		{Name: "password", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// WorkbooksColumns holds the columns for the "workbooks" table.
	WorkbooksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "description", Type: field.TypeString, Size: 400},
		{Name: "is_public", Type: field.TypeBool, Default: false},
		{Name: "title", Type: field.TypeString, Size: 255},
		{Name: "user_id", Type: field.TypeUUID},
	}
	// WorkbooksTable holds the schema information for the "workbooks" table.
	WorkbooksTable = &schema.Table{
		Name:       "workbooks",
		Columns:    WorkbooksColumns,
		PrimaryKey: []*schema.Column{WorkbooksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workbooks_users_workbooks",
				Columns:    []*schema.Column{WorkbooksColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WorkbookCategoriesColumns holds the columns for the "workbook_categories" table.
	WorkbookCategoriesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "workbook_id", Type: field.TypeUUID},
	}
	// WorkbookCategoriesTable holds the schema information for the "workbook_categories" table.
	WorkbookCategoriesTable = &schema.Table{
		Name:       "workbook_categories",
		Columns:    WorkbookCategoriesColumns,
		PrimaryKey: []*schema.Column{WorkbookCategoriesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workbook_categories_workbooks_workbook_categories",
				Columns:    []*schema.Column{WorkbookCategoriesColumns[4]},
				RefColumns: []*schema.Column{WorkbooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WorkbookCategoryDetailsColumns holds the columns for the "workbook_category_details" table.
	WorkbookCategoryDetailsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 255},
		{Name: "workbook_category_id", Type: field.TypeUUID, Unique: true},
		{Name: "workbook_category_workbook_category_details", Type: field.TypeUUID, Nullable: true},
	}
	// WorkbookCategoryDetailsTable holds the schema information for the "workbook_category_details" table.
	WorkbookCategoryDetailsTable = &schema.Table{
		Name:       "workbook_category_details",
		Columns:    WorkbookCategoryDetailsColumns,
		PrimaryKey: []*schema.Column{WorkbookCategoryDetailsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workbook_category_details_workbook_categories_workbook_category_details",
				Columns:    []*schema.Column{WorkbookCategoryDetailsColumns[5]},
				RefColumns: []*schema.Column{WorkbookCategoriesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// WorkbookMembersColumns holds the columns for the "workbook_members" table.
	WorkbookMembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "role_id", Type: field.TypeUUID},
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "workbook_id", Type: field.TypeUUID},
	}
	// WorkbookMembersTable holds the schema information for the "workbook_members" table.
	WorkbookMembersTable = &schema.Table{
		Name:       "workbook_members",
		Columns:    WorkbookMembersColumns,
		PrimaryKey: []*schema.Column{WorkbookMembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "workbook_members_roles_workbook_members",
				Columns:    []*schema.Column{WorkbookMembersColumns[3]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Restrict,
			},
			{
				Symbol:     "workbook_members_users_workbook_members",
				Columns:    []*schema.Column{WorkbookMembersColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "workbook_members_workbooks_workbook_members",
				Columns:    []*schema.Column{WorkbookMembersColumns[5]},
				RefColumns: []*schema.Column{WorkbooksColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// PermissionRolesColumns holds the columns for the "permission_roles" table.
	PermissionRolesColumns = []*schema.Column{
		{Name: "permission_id", Type: field.TypeUUID},
		{Name: "role_id", Type: field.TypeUUID},
	}
	// PermissionRolesTable holds the schema information for the "permission_roles" table.
	PermissionRolesTable = &schema.Table{
		Name:       "permission_roles",
		Columns:    PermissionRolesColumns,
		PrimaryKey: []*schema.Column{PermissionRolesColumns[0], PermissionRolesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "permission_roles_permission_id",
				Columns:    []*schema.Column{PermissionRolesColumns[0]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "permission_roles_role_id",
				Columns:    []*schema.Column{PermissionRolesColumns[1]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArticlesTable,
		DescriptionProblemsTable,
		PermissionsTable,
		RolesTable,
		SelectionProblemsTable,
		SelectionProblemAnswersTable,
		TrueOrFalseProblemsTable,
		UsersTable,
		WorkbooksTable,
		WorkbookCategoriesTable,
		WorkbookCategoryDetailsTable,
		WorkbookMembersTable,
		PermissionRolesTable,
	}
)

func init() {
	ArticlesTable.ForeignKeys[0].RefTable = UsersTable
	DescriptionProblemsTable.ForeignKeys[0].RefTable = WorkbooksTable
	DescriptionProblemsTable.ForeignKeys[1].RefTable = WorkbookCategoriesTable
	DescriptionProblemsTable.ForeignKeys[2].RefTable = WorkbookCategoryDetailsTable
	SelectionProblemsTable.ForeignKeys[0].RefTable = WorkbooksTable
	SelectionProblemsTable.ForeignKeys[1].RefTable = WorkbookCategoriesTable
	SelectionProblemsTable.ForeignKeys[2].RefTable = WorkbookCategoryDetailsTable
	SelectionProblemAnswersTable.ForeignKeys[0].RefTable = SelectionProblemsTable
	TrueOrFalseProblemsTable.ForeignKeys[0].RefTable = WorkbooksTable
	TrueOrFalseProblemsTable.ForeignKeys[1].RefTable = WorkbookCategoriesTable
	TrueOrFalseProblemsTable.ForeignKeys[2].RefTable = WorkbookCategoryDetailsTable
	WorkbooksTable.ForeignKeys[0].RefTable = UsersTable
	WorkbookCategoriesTable.ForeignKeys[0].RefTable = WorkbooksTable
	WorkbookCategoryDetailsTable.ForeignKeys[0].RefTable = WorkbookCategoriesTable
	WorkbookMembersTable.ForeignKeys[0].RefTable = RolesTable
	WorkbookMembersTable.ForeignKeys[1].RefTable = UsersTable
	WorkbookMembersTable.ForeignKeys[2].RefTable = WorkbooksTable
	PermissionRolesTable.ForeignKeys[0].RefTable = PermissionsTable
	PermissionRolesTable.ForeignKeys[1].RefTable = RolesTable
	PermissionRolesTable.Annotation = &entsql.Annotation{}
}
