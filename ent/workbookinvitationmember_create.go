// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookinvitationmember"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookInvitationMemberCreate is the builder for creating a WorkbookInvitationMember entity.
type WorkbookInvitationMemberCreate struct {
	config
	mutation *WorkbookInvitationMemberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wimc *WorkbookInvitationMemberCreate) SetCreatedAt(t time.Time) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetCreatedAt(t)
	return wimc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wimc *WorkbookInvitationMemberCreate) SetNillableCreatedAt(t *time.Time) *WorkbookInvitationMemberCreate {
	if t != nil {
		wimc.SetCreatedAt(*t)
	}
	return wimc
}

// SetUpdatedAt sets the "updated_at" field.
func (wimc *WorkbookInvitationMemberCreate) SetUpdatedAt(t time.Time) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetUpdatedAt(t)
	return wimc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wimc *WorkbookInvitationMemberCreate) SetNillableUpdatedAt(t *time.Time) *WorkbookInvitationMemberCreate {
	if t != nil {
		wimc.SetUpdatedAt(*t)
	}
	return wimc
}

// SetEffectiveAt sets the "effective_at" field.
func (wimc *WorkbookInvitationMemberCreate) SetEffectiveAt(t time.Time) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetEffectiveAt(t)
	return wimc
}

// SetIsInvited sets the "is_invited" field.
func (wimc *WorkbookInvitationMemberCreate) SetIsInvited(b bool) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetIsInvited(b)
	return wimc
}

// SetRoleID sets the "role_id" field.
func (wimc *WorkbookInvitationMemberCreate) SetRoleID(u uuid.UUID) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetRoleID(u)
	return wimc
}

// SetUserID sets the "user_id" field.
func (wimc *WorkbookInvitationMemberCreate) SetUserID(u uuid.UUID) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetUserID(u)
	return wimc
}

// SetWorkbookID sets the "workbook_id" field.
func (wimc *WorkbookInvitationMemberCreate) SetWorkbookID(u uuid.UUID) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetWorkbookID(u)
	return wimc
}

// SetID sets the "id" field.
func (wimc *WorkbookInvitationMemberCreate) SetID(u uuid.UUID) *WorkbookInvitationMemberCreate {
	wimc.mutation.SetID(u)
	return wimc
}

// SetRole sets the "role" edge to the Role entity.
func (wimc *WorkbookInvitationMemberCreate) SetRole(r *Role) *WorkbookInvitationMemberCreate {
	return wimc.SetRoleID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (wimc *WorkbookInvitationMemberCreate) SetUser(u *User) *WorkbookInvitationMemberCreate {
	return wimc.SetUserID(u.ID)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wimc *WorkbookInvitationMemberCreate) SetWorkbook(w *Workbook) *WorkbookInvitationMemberCreate {
	return wimc.SetWorkbookID(w.ID)
}

// Mutation returns the WorkbookInvitationMemberMutation object of the builder.
func (wimc *WorkbookInvitationMemberCreate) Mutation() *WorkbookInvitationMemberMutation {
	return wimc.mutation
}

// Save creates the WorkbookInvitationMember in the database.
func (wimc *WorkbookInvitationMemberCreate) Save(ctx context.Context) (*WorkbookInvitationMember, error) {
	wimc.defaults()
	return withHooks(ctx, wimc.sqlSave, wimc.mutation, wimc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wimc *WorkbookInvitationMemberCreate) SaveX(ctx context.Context) *WorkbookInvitationMember {
	v, err := wimc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wimc *WorkbookInvitationMemberCreate) Exec(ctx context.Context) error {
	_, err := wimc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wimc *WorkbookInvitationMemberCreate) ExecX(ctx context.Context) {
	if err := wimc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wimc *WorkbookInvitationMemberCreate) defaults() {
	if _, ok := wimc.mutation.CreatedAt(); !ok {
		v := workbookinvitationmember.DefaultCreatedAt()
		wimc.mutation.SetCreatedAt(v)
	}
	if _, ok := wimc.mutation.UpdatedAt(); !ok {
		v := workbookinvitationmember.DefaultUpdatedAt()
		wimc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wimc *WorkbookInvitationMemberCreate) check() error {
	if _, ok := wimc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkbookInvitationMember.created_at"`)}
	}
	if _, ok := wimc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkbookInvitationMember.updated_at"`)}
	}
	if _, ok := wimc.mutation.EffectiveAt(); !ok {
		return &ValidationError{Name: "effective_at", err: errors.New(`ent: missing required field "WorkbookInvitationMember.effective_at"`)}
	}
	if _, ok := wimc.mutation.IsInvited(); !ok {
		return &ValidationError{Name: "is_invited", err: errors.New(`ent: missing required field "WorkbookInvitationMember.is_invited"`)}
	}
	if _, ok := wimc.mutation.RoleID(); !ok {
		return &ValidationError{Name: "role_id", err: errors.New(`ent: missing required field "WorkbookInvitationMember.role_id"`)}
	}
	if _, ok := wimc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "WorkbookInvitationMember.user_id"`)}
	}
	if _, ok := wimc.mutation.WorkbookID(); !ok {
		return &ValidationError{Name: "workbook_id", err: errors.New(`ent: missing required field "WorkbookInvitationMember.workbook_id"`)}
	}
	if len(wimc.mutation.RoleIDs()) == 0 {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required edge "WorkbookInvitationMember.role"`)}
	}
	if len(wimc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "WorkbookInvitationMember.user"`)}
	}
	if len(wimc.mutation.WorkbookIDs()) == 0 {
		return &ValidationError{Name: "workbook", err: errors.New(`ent: missing required edge "WorkbookInvitationMember.workbook"`)}
	}
	return nil
}

func (wimc *WorkbookInvitationMemberCreate) sqlSave(ctx context.Context) (*WorkbookInvitationMember, error) {
	if err := wimc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wimc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wimc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wimc.mutation.id = &_node.ID
	wimc.mutation.done = true
	return _node, nil
}

func (wimc *WorkbookInvitationMemberCreate) createSpec() (*WorkbookInvitationMember, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkbookInvitationMember{config: wimc.config}
		_spec = sqlgraph.NewCreateSpec(workbookinvitationmember.Table, sqlgraph.NewFieldSpec(workbookinvitationmember.FieldID, field.TypeUUID))
	)
	if id, ok := wimc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wimc.mutation.CreatedAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wimc.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wimc.mutation.EffectiveAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldEffectiveAt, field.TypeTime, value)
		_node.EffectiveAt = value
	}
	if value, ok := wimc.mutation.IsInvited(); ok {
		_spec.SetField(workbookinvitationmember.FieldIsInvited, field.TypeBool, value)
		_node.IsInvited = value
	}
	if nodes := wimc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.RoleTable,
			Columns: []string{workbookinvitationmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.RoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wimc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.UserTable,
			Columns: []string{workbookinvitationmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wimc.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.WorkbookTable,
			Columns: []string{workbookinvitationmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkbookInvitationMemberCreateBulk is the builder for creating many WorkbookInvitationMember entities in bulk.
type WorkbookInvitationMemberCreateBulk struct {
	config
	err      error
	builders []*WorkbookInvitationMemberCreate
}

// Save creates the WorkbookInvitationMember entities in the database.
func (wimcb *WorkbookInvitationMemberCreateBulk) Save(ctx context.Context) ([]*WorkbookInvitationMember, error) {
	if wimcb.err != nil {
		return nil, wimcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wimcb.builders))
	nodes := make([]*WorkbookInvitationMember, len(wimcb.builders))
	mutators := make([]Mutator, len(wimcb.builders))
	for i := range wimcb.builders {
		func(i int, root context.Context) {
			builder := wimcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkbookInvitationMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wimcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wimcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wimcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wimcb *WorkbookInvitationMemberCreateBulk) SaveX(ctx context.Context) []*WorkbookInvitationMember {
	v, err := wimcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wimcb *WorkbookInvitationMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := wimcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wimcb *WorkbookInvitationMemberCreateBulk) ExecX(ctx context.Context) {
	if err := wimcb.Exec(ctx); err != nil {
		panic(err)
	}
}
