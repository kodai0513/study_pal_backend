// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookinvitationmember"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookInvitationMemberUpdate is the builder for updating WorkbookInvitationMember entities.
type WorkbookInvitationMemberUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookInvitationMemberMutation
}

// Where appends a list predicates to the WorkbookInvitationMemberUpdate builder.
func (wimu *WorkbookInvitationMemberUpdate) Where(ps ...predicate.WorkbookInvitationMember) *WorkbookInvitationMemberUpdate {
	wimu.mutation.Where(ps...)
	return wimu
}

// SetCreatedAt sets the "created_at" field.
func (wimu *WorkbookInvitationMemberUpdate) SetCreatedAt(t time.Time) *WorkbookInvitationMemberUpdate {
	wimu.mutation.SetCreatedAt(t)
	return wimu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wimu *WorkbookInvitationMemberUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookInvitationMemberUpdate {
	if t != nil {
		wimu.SetCreatedAt(*t)
	}
	return wimu
}

// SetUpdatedAt sets the "updated_at" field.
func (wimu *WorkbookInvitationMemberUpdate) SetUpdatedAt(t time.Time) *WorkbookInvitationMemberUpdate {
	wimu.mutation.SetUpdatedAt(t)
	return wimu
}

// SetEffectiveAt sets the "effective_at" field.
func (wimu *WorkbookInvitationMemberUpdate) SetEffectiveAt(t time.Time) *WorkbookInvitationMemberUpdate {
	wimu.mutation.SetEffectiveAt(t)
	return wimu
}

// SetNillableEffectiveAt sets the "effective_at" field if the given value is not nil.
func (wimu *WorkbookInvitationMemberUpdate) SetNillableEffectiveAt(t *time.Time) *WorkbookInvitationMemberUpdate {
	if t != nil {
		wimu.SetEffectiveAt(*t)
	}
	return wimu
}

// SetIsInvited sets the "is_invited" field.
func (wimu *WorkbookInvitationMemberUpdate) SetIsInvited(b bool) *WorkbookInvitationMemberUpdate {
	wimu.mutation.SetIsInvited(b)
	return wimu
}

// SetNillableIsInvited sets the "is_invited" field if the given value is not nil.
func (wimu *WorkbookInvitationMemberUpdate) SetNillableIsInvited(b *bool) *WorkbookInvitationMemberUpdate {
	if b != nil {
		wimu.SetIsInvited(*b)
	}
	return wimu
}

// SetRoleID sets the "role_id" field.
func (wimu *WorkbookInvitationMemberUpdate) SetRoleID(u uuid.UUID) *WorkbookInvitationMemberUpdate {
	wimu.mutation.SetRoleID(u)
	return wimu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (wimu *WorkbookInvitationMemberUpdate) SetNillableRoleID(u *uuid.UUID) *WorkbookInvitationMemberUpdate {
	if u != nil {
		wimu.SetRoleID(*u)
	}
	return wimu
}

// SetUserID sets the "user_id" field.
func (wimu *WorkbookInvitationMemberUpdate) SetUserID(u uuid.UUID) *WorkbookInvitationMemberUpdate {
	wimu.mutation.SetUserID(u)
	return wimu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wimu *WorkbookInvitationMemberUpdate) SetNillableUserID(u *uuid.UUID) *WorkbookInvitationMemberUpdate {
	if u != nil {
		wimu.SetUserID(*u)
	}
	return wimu
}

// SetWorkbookID sets the "workbook_id" field.
func (wimu *WorkbookInvitationMemberUpdate) SetWorkbookID(u uuid.UUID) *WorkbookInvitationMemberUpdate {
	wimu.mutation.SetWorkbookID(u)
	return wimu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wimu *WorkbookInvitationMemberUpdate) SetNillableWorkbookID(u *uuid.UUID) *WorkbookInvitationMemberUpdate {
	if u != nil {
		wimu.SetWorkbookID(*u)
	}
	return wimu
}

// SetRole sets the "role" edge to the Role entity.
func (wimu *WorkbookInvitationMemberUpdate) SetRole(r *Role) *WorkbookInvitationMemberUpdate {
	return wimu.SetRoleID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (wimu *WorkbookInvitationMemberUpdate) SetUser(u *User) *WorkbookInvitationMemberUpdate {
	return wimu.SetUserID(u.ID)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wimu *WorkbookInvitationMemberUpdate) SetWorkbook(w *Workbook) *WorkbookInvitationMemberUpdate {
	return wimu.SetWorkbookID(w.ID)
}

// Mutation returns the WorkbookInvitationMemberMutation object of the builder.
func (wimu *WorkbookInvitationMemberUpdate) Mutation() *WorkbookInvitationMemberMutation {
	return wimu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (wimu *WorkbookInvitationMemberUpdate) ClearRole() *WorkbookInvitationMemberUpdate {
	wimu.mutation.ClearRole()
	return wimu
}

// ClearUser clears the "user" edge to the User entity.
func (wimu *WorkbookInvitationMemberUpdate) ClearUser() *WorkbookInvitationMemberUpdate {
	wimu.mutation.ClearUser()
	return wimu
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wimu *WorkbookInvitationMemberUpdate) ClearWorkbook() *WorkbookInvitationMemberUpdate {
	wimu.mutation.ClearWorkbook()
	return wimu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wimu *WorkbookInvitationMemberUpdate) Save(ctx context.Context) (int, error) {
	wimu.defaults()
	return withHooks(ctx, wimu.sqlSave, wimu.mutation, wimu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wimu *WorkbookInvitationMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := wimu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wimu *WorkbookInvitationMemberUpdate) Exec(ctx context.Context) error {
	_, err := wimu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wimu *WorkbookInvitationMemberUpdate) ExecX(ctx context.Context) {
	if err := wimu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wimu *WorkbookInvitationMemberUpdate) defaults() {
	if _, ok := wimu.mutation.UpdatedAt(); !ok {
		v := workbookinvitationmember.UpdateDefaultUpdatedAt()
		wimu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wimu *WorkbookInvitationMemberUpdate) check() error {
	if wimu.mutation.RoleCleared() && len(wimu.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookInvitationMember.role"`)
	}
	if wimu.mutation.UserCleared() && len(wimu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookInvitationMember.user"`)
	}
	if wimu.mutation.WorkbookCleared() && len(wimu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookInvitationMember.workbook"`)
	}
	return nil
}

func (wimu *WorkbookInvitationMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wimu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookinvitationmember.Table, workbookinvitationmember.Columns, sqlgraph.NewFieldSpec(workbookinvitationmember.FieldID, field.TypeUUID))
	if ps := wimu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wimu.mutation.CreatedAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wimu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wimu.mutation.EffectiveAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldEffectiveAt, field.TypeTime, value)
	}
	if value, ok := wimu.mutation.IsInvited(); ok {
		_spec.SetField(workbookinvitationmember.FieldIsInvited, field.TypeBool, value)
	}
	if wimu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.RoleTable,
			Columns: []string{workbookinvitationmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wimu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.RoleTable,
			Columns: []string{workbookinvitationmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wimu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.UserTable,
			Columns: []string{workbookinvitationmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wimu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.UserTable,
			Columns: []string{workbookinvitationmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wimu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.WorkbookTable,
			Columns: []string{workbookinvitationmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wimu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.WorkbookTable,
			Columns: []string{workbookinvitationmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wimu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookinvitationmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wimu.mutation.done = true
	return n, nil
}

// WorkbookInvitationMemberUpdateOne is the builder for updating a single WorkbookInvitationMember entity.
type WorkbookInvitationMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookInvitationMemberMutation
}

// SetCreatedAt sets the "created_at" field.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetCreatedAt(t time.Time) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.SetCreatedAt(t)
	return wimuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookInvitationMemberUpdateOne {
	if t != nil {
		wimuo.SetCreatedAt(*t)
	}
	return wimuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetUpdatedAt(t time.Time) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.SetUpdatedAt(t)
	return wimuo
}

// SetEffectiveAt sets the "effective_at" field.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetEffectiveAt(t time.Time) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.SetEffectiveAt(t)
	return wimuo
}

// SetNillableEffectiveAt sets the "effective_at" field if the given value is not nil.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetNillableEffectiveAt(t *time.Time) *WorkbookInvitationMemberUpdateOne {
	if t != nil {
		wimuo.SetEffectiveAt(*t)
	}
	return wimuo
}

// SetIsInvited sets the "is_invited" field.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetIsInvited(b bool) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.SetIsInvited(b)
	return wimuo
}

// SetNillableIsInvited sets the "is_invited" field if the given value is not nil.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetNillableIsInvited(b *bool) *WorkbookInvitationMemberUpdateOne {
	if b != nil {
		wimuo.SetIsInvited(*b)
	}
	return wimuo
}

// SetRoleID sets the "role_id" field.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetRoleID(u uuid.UUID) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.SetRoleID(u)
	return wimuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetNillableRoleID(u *uuid.UUID) *WorkbookInvitationMemberUpdateOne {
	if u != nil {
		wimuo.SetRoleID(*u)
	}
	return wimuo
}

// SetUserID sets the "user_id" field.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetUserID(u uuid.UUID) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.SetUserID(u)
	return wimuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetNillableUserID(u *uuid.UUID) *WorkbookInvitationMemberUpdateOne {
	if u != nil {
		wimuo.SetUserID(*u)
	}
	return wimuo
}

// SetWorkbookID sets the "workbook_id" field.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetWorkbookID(u uuid.UUID) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.SetWorkbookID(u)
	return wimuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *WorkbookInvitationMemberUpdateOne {
	if u != nil {
		wimuo.SetWorkbookID(*u)
	}
	return wimuo
}

// SetRole sets the "role" edge to the Role entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetRole(r *Role) *WorkbookInvitationMemberUpdateOne {
	return wimuo.SetRoleID(r.ID)
}

// SetUser sets the "user" edge to the User entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetUser(u *User) *WorkbookInvitationMemberUpdateOne {
	return wimuo.SetUserID(u.ID)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) SetWorkbook(w *Workbook) *WorkbookInvitationMemberUpdateOne {
	return wimuo.SetWorkbookID(w.ID)
}

// Mutation returns the WorkbookInvitationMemberMutation object of the builder.
func (wimuo *WorkbookInvitationMemberUpdateOne) Mutation() *WorkbookInvitationMemberMutation {
	return wimuo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) ClearRole() *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.ClearRole()
	return wimuo
}

// ClearUser clears the "user" edge to the User entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) ClearUser() *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.ClearUser()
	return wimuo
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) ClearWorkbook() *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.ClearWorkbook()
	return wimuo
}

// Where appends a list predicates to the WorkbookInvitationMemberUpdate builder.
func (wimuo *WorkbookInvitationMemberUpdateOne) Where(ps ...predicate.WorkbookInvitationMember) *WorkbookInvitationMemberUpdateOne {
	wimuo.mutation.Where(ps...)
	return wimuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wimuo *WorkbookInvitationMemberUpdateOne) Select(field string, fields ...string) *WorkbookInvitationMemberUpdateOne {
	wimuo.fields = append([]string{field}, fields...)
	return wimuo
}

// Save executes the query and returns the updated WorkbookInvitationMember entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) Save(ctx context.Context) (*WorkbookInvitationMember, error) {
	wimuo.defaults()
	return withHooks(ctx, wimuo.sqlSave, wimuo.mutation, wimuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wimuo *WorkbookInvitationMemberUpdateOne) SaveX(ctx context.Context) *WorkbookInvitationMember {
	node, err := wimuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wimuo *WorkbookInvitationMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := wimuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wimuo *WorkbookInvitationMemberUpdateOne) ExecX(ctx context.Context) {
	if err := wimuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wimuo *WorkbookInvitationMemberUpdateOne) defaults() {
	if _, ok := wimuo.mutation.UpdatedAt(); !ok {
		v := workbookinvitationmember.UpdateDefaultUpdatedAt()
		wimuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wimuo *WorkbookInvitationMemberUpdateOne) check() error {
	if wimuo.mutation.RoleCleared() && len(wimuo.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookInvitationMember.role"`)
	}
	if wimuo.mutation.UserCleared() && len(wimuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookInvitationMember.user"`)
	}
	if wimuo.mutation.WorkbookCleared() && len(wimuo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookInvitationMember.workbook"`)
	}
	return nil
}

func (wimuo *WorkbookInvitationMemberUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookInvitationMember, err error) {
	if err := wimuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookinvitationmember.Table, workbookinvitationmember.Columns, sqlgraph.NewFieldSpec(workbookinvitationmember.FieldID, field.TypeUUID))
	id, ok := wimuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookInvitationMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wimuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookinvitationmember.FieldID)
		for _, f := range fields {
			if !workbookinvitationmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookinvitationmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wimuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wimuo.mutation.CreatedAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wimuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wimuo.mutation.EffectiveAt(); ok {
		_spec.SetField(workbookinvitationmember.FieldEffectiveAt, field.TypeTime, value)
	}
	if value, ok := wimuo.mutation.IsInvited(); ok {
		_spec.SetField(workbookinvitationmember.FieldIsInvited, field.TypeBool, value)
	}
	if wimuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.RoleTable,
			Columns: []string{workbookinvitationmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wimuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.RoleTable,
			Columns: []string{workbookinvitationmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wimuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.UserTable,
			Columns: []string{workbookinvitationmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wimuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.UserTable,
			Columns: []string{workbookinvitationmember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wimuo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.WorkbookTable,
			Columns: []string{workbookinvitationmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wimuo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookinvitationmember.WorkbookTable,
			Columns: []string{workbookinvitationmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkbookInvitationMember{config: wimuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wimuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookinvitationmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wimuo.mutation.done = true
	return _node, nil
}
