// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/article"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/permission"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategorydetail"
	"study-pal-backend/ent/workbookmember"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeArticle                = "Article"
	TypeDescriptionProblem     = "DescriptionProblem"
	TypePermission             = "Permission"
	TypeRole                   = "Role"
	TypeSelectionProblem       = "SelectionProblem"
	TypeSelectionProblemAnswer = "SelectionProblemAnswer"
	TypeTrueOrFalseProblem     = "TrueOrFalseProblem"
	TypeUser                   = "User"
	TypeWorkbook               = "Workbook"
	TypeWorkbookCategory       = "WorkbookCategory"
	TypeWorkbookCategoryDetail = "WorkbookCategoryDetail"
	TypeWorkbookMember         = "WorkbookMember"
)

// ArticleMutation represents an operation that mutates the Article nodes in the graph.
type ArticleMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	page_id       *int
	addpage_id    *int
	description   *string
	clearedFields map[string]struct{}
	post          *uuid.UUID
	clearedpost   bool
	done          bool
	oldValue      func(context.Context) (*Article, error)
	predicates    []predicate.Article
}

var _ ent.Mutation = (*ArticleMutation)(nil)

// articleOption allows management of the mutation configuration using functional options.
type articleOption func(*ArticleMutation)

// newArticleMutation creates new mutation for the Article entity.
func newArticleMutation(c config, op Op, opts ...articleOption) *ArticleMutation {
	m := &ArticleMutation{
		config:        c,
		op:            op,
		typ:           TypeArticle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withArticleID sets the ID field of the mutation.
func withArticleID(id uuid.UUID) articleOption {
	return func(m *ArticleMutation) {
		var (
			err   error
			once  sync.Once
			value *Article
		)
		m.oldValue = func(ctx context.Context) (*Article, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Article.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withArticle sets the old Article of the mutation.
func withArticle(node *Article) articleOption {
	return func(m *ArticleMutation) {
		m.oldValue = func(context.Context) (*Article, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ArticleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ArticleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Article entities.
func (m *ArticleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ArticleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ArticleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Article.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ArticleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ArticleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ArticleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ArticleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ArticleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ArticleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetPageID sets the "page_id" field.
func (m *ArticleMutation) SetPageID(i int) {
	m.page_id = &i
	m.addpage_id = nil
}

// PageID returns the value of the "page_id" field in the mutation.
func (m *ArticleMutation) PageID() (r int, exists bool) {
	v := m.page_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPageID returns the old "page_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldPageID(ctx context.Context) (v *int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageID: %w", err)
	}
	return oldValue.PageID, nil
}

// AddPageID adds i to the "page_id" field.
func (m *ArticleMutation) AddPageID(i int) {
	if m.addpage_id != nil {
		*m.addpage_id += i
	} else {
		m.addpage_id = &i
	}
}

// AddedPageID returns the value that was added to the "page_id" field in this mutation.
func (m *ArticleMutation) AddedPageID() (r int, exists bool) {
	v := m.addpage_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearPageID clears the value of the "page_id" field.
func (m *ArticleMutation) ClearPageID() {
	m.page_id = nil
	m.addpage_id = nil
	m.clearedFields[article.FieldPageID] = struct{}{}
}

// PageIDCleared returns if the "page_id" field was cleared in this mutation.
func (m *ArticleMutation) PageIDCleared() bool {
	_, ok := m.clearedFields[article.FieldPageID]
	return ok
}

// ResetPageID resets all changes to the "page_id" field.
func (m *ArticleMutation) ResetPageID() {
	m.page_id = nil
	m.addpage_id = nil
	delete(m.clearedFields, article.FieldPageID)
}

// SetDescription sets the "description" field.
func (m *ArticleMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *ArticleMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *ArticleMutation) ResetDescription() {
	m.description = nil
}

// SetUserID sets the "user_id" field.
func (m *ArticleMutation) SetUserID(u uuid.UUID) {
	m.post = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ArticleMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.post
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Article entity.
// If the Article object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ArticleMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ArticleMutation) ResetUserID() {
	m.post = nil
}

// SetPostID sets the "post" edge to the User entity by id.
func (m *ArticleMutation) SetPostID(id uuid.UUID) {
	m.post = &id
}

// ClearPost clears the "post" edge to the User entity.
func (m *ArticleMutation) ClearPost() {
	m.clearedpost = true
	m.clearedFields[article.FieldUserID] = struct{}{}
}

// PostCleared reports if the "post" edge to the User entity was cleared.
func (m *ArticleMutation) PostCleared() bool {
	return m.clearedpost
}

// PostID returns the "post" edge ID in the mutation.
func (m *ArticleMutation) PostID() (id uuid.UUID, exists bool) {
	if m.post != nil {
		return *m.post, true
	}
	return
}

// PostIDs returns the "post" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PostID instead. It exists only for internal usage by the builders.
func (m *ArticleMutation) PostIDs() (ids []uuid.UUID) {
	if id := m.post; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPost resets all changes to the "post" edge.
func (m *ArticleMutation) ResetPost() {
	m.post = nil
	m.clearedpost = false
}

// Where appends a list predicates to the ArticleMutation builder.
func (m *ArticleMutation) Where(ps ...predicate.Article) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ArticleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ArticleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Article, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ArticleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ArticleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Article).
func (m *ArticleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ArticleMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, article.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, article.FieldUpdatedAt)
	}
	if m.page_id != nil {
		fields = append(fields, article.FieldPageID)
	}
	if m.description != nil {
		fields = append(fields, article.FieldDescription)
	}
	if m.post != nil {
		fields = append(fields, article.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ArticleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case article.FieldCreatedAt:
		return m.CreatedAt()
	case article.FieldUpdatedAt:
		return m.UpdatedAt()
	case article.FieldPageID:
		return m.PageID()
	case article.FieldDescription:
		return m.Description()
	case article.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ArticleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case article.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case article.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case article.FieldPageID:
		return m.OldPageID(ctx)
	case article.FieldDescription:
		return m.OldDescription(ctx)
	case article.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown Article field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case article.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case article.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case article.FieldPageID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageID(v)
		return nil
	case article.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case article.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ArticleMutation) AddedFields() []string {
	var fields []string
	if m.addpage_id != nil {
		fields = append(fields, article.FieldPageID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ArticleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case article.FieldPageID:
		return m.AddedPageID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ArticleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case article.FieldPageID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPageID(v)
		return nil
	}
	return fmt.Errorf("unknown Article numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ArticleMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(article.FieldPageID) {
		fields = append(fields, article.FieldPageID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ArticleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ArticleMutation) ClearField(name string) error {
	switch name {
	case article.FieldPageID:
		m.ClearPageID()
		return nil
	}
	return fmt.Errorf("unknown Article nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ArticleMutation) ResetField(name string) error {
	switch name {
	case article.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case article.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case article.FieldPageID:
		m.ResetPageID()
		return nil
	case article.FieldDescription:
		m.ResetDescription()
		return nil
	case article.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown Article field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ArticleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.post != nil {
		edges = append(edges, article.EdgePost)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ArticleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case article.EdgePost:
		if id := m.post; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ArticleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ArticleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ArticleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpost {
		edges = append(edges, article.EdgePost)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ArticleMutation) EdgeCleared(name string) bool {
	switch name {
	case article.EdgePost:
		return m.clearedpost
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ArticleMutation) ClearEdge(name string) error {
	switch name {
	case article.EdgePost:
		m.ClearPost()
		return nil
	}
	return fmt.Errorf("unknown Article unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ArticleMutation) ResetEdge(name string) error {
	switch name {
	case article.EdgePost:
		m.ResetPost()
		return nil
	}
	return fmt.Errorf("unknown Article edge %s", name)
}

// DescriptionProblemMutation represents an operation that mutates the DescriptionProblem nodes in the graph.
type DescriptionProblemMutation struct {
	config
	op                              Op
	typ                             string
	id                              *uuid.UUID
	created_at                      *time.Time
	updated_at                      *time.Time
	correct_statement               *string
	statement                       *string
	clearedFields                   map[string]struct{}
	workbook                        *uuid.UUID
	clearedworkbook                 bool
	workbook_category               *uuid.UUID
	clearedworkbook_category        bool
	workbook_category_detail        *uuid.UUID
	clearedworkbook_category_detail bool
	done                            bool
	oldValue                        func(context.Context) (*DescriptionProblem, error)
	predicates                      []predicate.DescriptionProblem
}

var _ ent.Mutation = (*DescriptionProblemMutation)(nil)

// descriptionproblemOption allows management of the mutation configuration using functional options.
type descriptionproblemOption func(*DescriptionProblemMutation)

// newDescriptionProblemMutation creates new mutation for the DescriptionProblem entity.
func newDescriptionProblemMutation(c config, op Op, opts ...descriptionproblemOption) *DescriptionProblemMutation {
	m := &DescriptionProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeDescriptionProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDescriptionProblemID sets the ID field of the mutation.
func withDescriptionProblemID(id uuid.UUID) descriptionproblemOption {
	return func(m *DescriptionProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *DescriptionProblem
		)
		m.oldValue = func(ctx context.Context) (*DescriptionProblem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DescriptionProblem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDescriptionProblem sets the old DescriptionProblem of the mutation.
func withDescriptionProblem(node *DescriptionProblem) descriptionproblemOption {
	return func(m *DescriptionProblemMutation) {
		m.oldValue = func(context.Context) (*DescriptionProblem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DescriptionProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DescriptionProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DescriptionProblem entities.
func (m *DescriptionProblemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DescriptionProblemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DescriptionProblemMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DescriptionProblem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *DescriptionProblemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DescriptionProblemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the DescriptionProblem entity.
// If the DescriptionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionProblemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DescriptionProblemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *DescriptionProblemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *DescriptionProblemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the DescriptionProblem entity.
// If the DescriptionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionProblemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *DescriptionProblemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCorrectStatement sets the "correct_statement" field.
func (m *DescriptionProblemMutation) SetCorrectStatement(s string) {
	m.correct_statement = &s
}

// CorrectStatement returns the value of the "correct_statement" field in the mutation.
func (m *DescriptionProblemMutation) CorrectStatement() (r string, exists bool) {
	v := m.correct_statement
	if v == nil {
		return
	}
	return *v, true
}

// OldCorrectStatement returns the old "correct_statement" field's value of the DescriptionProblem entity.
// If the DescriptionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionProblemMutation) OldCorrectStatement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCorrectStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCorrectStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCorrectStatement: %w", err)
	}
	return oldValue.CorrectStatement, nil
}

// ResetCorrectStatement resets all changes to the "correct_statement" field.
func (m *DescriptionProblemMutation) ResetCorrectStatement() {
	m.correct_statement = nil
}

// SetStatement sets the "statement" field.
func (m *DescriptionProblemMutation) SetStatement(s string) {
	m.statement = &s
}

// Statement returns the value of the "statement" field in the mutation.
func (m *DescriptionProblemMutation) Statement() (r string, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatement returns the old "statement" field's value of the DescriptionProblem entity.
// If the DescriptionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionProblemMutation) OldStatement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatement: %w", err)
	}
	return oldValue.Statement, nil
}

// ResetStatement resets all changes to the "statement" field.
func (m *DescriptionProblemMutation) ResetStatement() {
	m.statement = nil
}

// SetWorkbookID sets the "workbook_id" field.
func (m *DescriptionProblemMutation) SetWorkbookID(u uuid.UUID) {
	m.workbook = &u
}

// WorkbookID returns the value of the "workbook_id" field in the mutation.
func (m *DescriptionProblemMutation) WorkbookID() (r uuid.UUID, exists bool) {
	v := m.workbook
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookID returns the old "workbook_id" field's value of the DescriptionProblem entity.
// If the DescriptionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionProblemMutation) OldWorkbookID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookID: %w", err)
	}
	return oldValue.WorkbookID, nil
}

// ResetWorkbookID resets all changes to the "workbook_id" field.
func (m *DescriptionProblemMutation) ResetWorkbookID() {
	m.workbook = nil
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (m *DescriptionProblemMutation) SetWorkbookCategoryID(u uuid.UUID) {
	m.workbook_category = &u
}

// WorkbookCategoryID returns the value of the "workbook_category_id" field in the mutation.
func (m *DescriptionProblemMutation) WorkbookCategoryID() (r uuid.UUID, exists bool) {
	v := m.workbook_category
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookCategoryID returns the old "workbook_category_id" field's value of the DescriptionProblem entity.
// If the DescriptionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionProblemMutation) OldWorkbookCategoryID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookCategoryID: %w", err)
	}
	return oldValue.WorkbookCategoryID, nil
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (m *DescriptionProblemMutation) ClearWorkbookCategoryID() {
	m.workbook_category = nil
	m.clearedFields[descriptionproblem.FieldWorkbookCategoryID] = struct{}{}
}

// WorkbookCategoryIDCleared returns if the "workbook_category_id" field was cleared in this mutation.
func (m *DescriptionProblemMutation) WorkbookCategoryIDCleared() bool {
	_, ok := m.clearedFields[descriptionproblem.FieldWorkbookCategoryID]
	return ok
}

// ResetWorkbookCategoryID resets all changes to the "workbook_category_id" field.
func (m *DescriptionProblemMutation) ResetWorkbookCategoryID() {
	m.workbook_category = nil
	delete(m.clearedFields, descriptionproblem.FieldWorkbookCategoryID)
}

// SetWorkbookCategoryDetailID sets the "workbook_category_detail_id" field.
func (m *DescriptionProblemMutation) SetWorkbookCategoryDetailID(u uuid.UUID) {
	m.workbook_category_detail = &u
}

// WorkbookCategoryDetailID returns the value of the "workbook_category_detail_id" field in the mutation.
func (m *DescriptionProblemMutation) WorkbookCategoryDetailID() (r uuid.UUID, exists bool) {
	v := m.workbook_category_detail
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookCategoryDetailID returns the old "workbook_category_detail_id" field's value of the DescriptionProblem entity.
// If the DescriptionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DescriptionProblemMutation) OldWorkbookCategoryDetailID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookCategoryDetailID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookCategoryDetailID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookCategoryDetailID: %w", err)
	}
	return oldValue.WorkbookCategoryDetailID, nil
}

// ClearWorkbookCategoryDetailID clears the value of the "workbook_category_detail_id" field.
func (m *DescriptionProblemMutation) ClearWorkbookCategoryDetailID() {
	m.workbook_category_detail = nil
	m.clearedFields[descriptionproblem.FieldWorkbookCategoryDetailID] = struct{}{}
}

// WorkbookCategoryDetailIDCleared returns if the "workbook_category_detail_id" field was cleared in this mutation.
func (m *DescriptionProblemMutation) WorkbookCategoryDetailIDCleared() bool {
	_, ok := m.clearedFields[descriptionproblem.FieldWorkbookCategoryDetailID]
	return ok
}

// ResetWorkbookCategoryDetailID resets all changes to the "workbook_category_detail_id" field.
func (m *DescriptionProblemMutation) ResetWorkbookCategoryDetailID() {
	m.workbook_category_detail = nil
	delete(m.clearedFields, descriptionproblem.FieldWorkbookCategoryDetailID)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (m *DescriptionProblemMutation) ClearWorkbook() {
	m.clearedworkbook = true
	m.clearedFields[descriptionproblem.FieldWorkbookID] = struct{}{}
}

// WorkbookCleared reports if the "workbook" edge to the Workbook entity was cleared.
func (m *DescriptionProblemMutation) WorkbookCleared() bool {
	return m.clearedworkbook
}

// WorkbookIDs returns the "workbook" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookID instead. It exists only for internal usage by the builders.
func (m *DescriptionProblemMutation) WorkbookIDs() (ids []uuid.UUID) {
	if id := m.workbook; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbook resets all changes to the "workbook" edge.
func (m *DescriptionProblemMutation) ResetWorkbook() {
	m.workbook = nil
	m.clearedworkbook = false
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (m *DescriptionProblemMutation) ClearWorkbookCategory() {
	m.clearedworkbook_category = true
	m.clearedFields[descriptionproblem.FieldWorkbookCategoryID] = struct{}{}
}

// WorkbookCategoryCleared reports if the "workbook_category" edge to the WorkbookCategory entity was cleared.
func (m *DescriptionProblemMutation) WorkbookCategoryCleared() bool {
	return m.WorkbookCategoryIDCleared() || m.clearedworkbook_category
}

// WorkbookCategoryIDs returns the "workbook_category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookCategoryID instead. It exists only for internal usage by the builders.
func (m *DescriptionProblemMutation) WorkbookCategoryIDs() (ids []uuid.UUID) {
	if id := m.workbook_category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbookCategory resets all changes to the "workbook_category" edge.
func (m *DescriptionProblemMutation) ResetWorkbookCategory() {
	m.workbook_category = nil
	m.clearedworkbook_category = false
}

// ClearWorkbookCategoryDetail clears the "workbook_category_detail" edge to the WorkbookCategoryDetail entity.
func (m *DescriptionProblemMutation) ClearWorkbookCategoryDetail() {
	m.clearedworkbook_category_detail = true
	m.clearedFields[descriptionproblem.FieldWorkbookCategoryDetailID] = struct{}{}
}

// WorkbookCategoryDetailCleared reports if the "workbook_category_detail" edge to the WorkbookCategoryDetail entity was cleared.
func (m *DescriptionProblemMutation) WorkbookCategoryDetailCleared() bool {
	return m.WorkbookCategoryDetailIDCleared() || m.clearedworkbook_category_detail
}

// WorkbookCategoryDetailIDs returns the "workbook_category_detail" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookCategoryDetailID instead. It exists only for internal usage by the builders.
func (m *DescriptionProblemMutation) WorkbookCategoryDetailIDs() (ids []uuid.UUID) {
	if id := m.workbook_category_detail; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbookCategoryDetail resets all changes to the "workbook_category_detail" edge.
func (m *DescriptionProblemMutation) ResetWorkbookCategoryDetail() {
	m.workbook_category_detail = nil
	m.clearedworkbook_category_detail = false
}

// Where appends a list predicates to the DescriptionProblemMutation builder.
func (m *DescriptionProblemMutation) Where(ps ...predicate.DescriptionProblem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DescriptionProblemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DescriptionProblemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DescriptionProblem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DescriptionProblemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DescriptionProblemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DescriptionProblem).
func (m *DescriptionProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DescriptionProblemMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, descriptionproblem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, descriptionproblem.FieldUpdatedAt)
	}
	if m.correct_statement != nil {
		fields = append(fields, descriptionproblem.FieldCorrectStatement)
	}
	if m.statement != nil {
		fields = append(fields, descriptionproblem.FieldStatement)
	}
	if m.workbook != nil {
		fields = append(fields, descriptionproblem.FieldWorkbookID)
	}
	if m.workbook_category != nil {
		fields = append(fields, descriptionproblem.FieldWorkbookCategoryID)
	}
	if m.workbook_category_detail != nil {
		fields = append(fields, descriptionproblem.FieldWorkbookCategoryDetailID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DescriptionProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case descriptionproblem.FieldCreatedAt:
		return m.CreatedAt()
	case descriptionproblem.FieldUpdatedAt:
		return m.UpdatedAt()
	case descriptionproblem.FieldCorrectStatement:
		return m.CorrectStatement()
	case descriptionproblem.FieldStatement:
		return m.Statement()
	case descriptionproblem.FieldWorkbookID:
		return m.WorkbookID()
	case descriptionproblem.FieldWorkbookCategoryID:
		return m.WorkbookCategoryID()
	case descriptionproblem.FieldWorkbookCategoryDetailID:
		return m.WorkbookCategoryDetailID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DescriptionProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case descriptionproblem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case descriptionproblem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case descriptionproblem.FieldCorrectStatement:
		return m.OldCorrectStatement(ctx)
	case descriptionproblem.FieldStatement:
		return m.OldStatement(ctx)
	case descriptionproblem.FieldWorkbookID:
		return m.OldWorkbookID(ctx)
	case descriptionproblem.FieldWorkbookCategoryID:
		return m.OldWorkbookCategoryID(ctx)
	case descriptionproblem.FieldWorkbookCategoryDetailID:
		return m.OldWorkbookCategoryDetailID(ctx)
	}
	return nil, fmt.Errorf("unknown DescriptionProblem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DescriptionProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case descriptionproblem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case descriptionproblem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case descriptionproblem.FieldCorrectStatement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCorrectStatement(v)
		return nil
	case descriptionproblem.FieldStatement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatement(v)
		return nil
	case descriptionproblem.FieldWorkbookID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookID(v)
		return nil
	case descriptionproblem.FieldWorkbookCategoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookCategoryID(v)
		return nil
	case descriptionproblem.FieldWorkbookCategoryDetailID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookCategoryDetailID(v)
		return nil
	}
	return fmt.Errorf("unknown DescriptionProblem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DescriptionProblemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DescriptionProblemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DescriptionProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DescriptionProblem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DescriptionProblemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(descriptionproblem.FieldWorkbookCategoryID) {
		fields = append(fields, descriptionproblem.FieldWorkbookCategoryID)
	}
	if m.FieldCleared(descriptionproblem.FieldWorkbookCategoryDetailID) {
		fields = append(fields, descriptionproblem.FieldWorkbookCategoryDetailID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DescriptionProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DescriptionProblemMutation) ClearField(name string) error {
	switch name {
	case descriptionproblem.FieldWorkbookCategoryID:
		m.ClearWorkbookCategoryID()
		return nil
	case descriptionproblem.FieldWorkbookCategoryDetailID:
		m.ClearWorkbookCategoryDetailID()
		return nil
	}
	return fmt.Errorf("unknown DescriptionProblem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DescriptionProblemMutation) ResetField(name string) error {
	switch name {
	case descriptionproblem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case descriptionproblem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case descriptionproblem.FieldCorrectStatement:
		m.ResetCorrectStatement()
		return nil
	case descriptionproblem.FieldStatement:
		m.ResetStatement()
		return nil
	case descriptionproblem.FieldWorkbookID:
		m.ResetWorkbookID()
		return nil
	case descriptionproblem.FieldWorkbookCategoryID:
		m.ResetWorkbookCategoryID()
		return nil
	case descriptionproblem.FieldWorkbookCategoryDetailID:
		m.ResetWorkbookCategoryDetailID()
		return nil
	}
	return fmt.Errorf("unknown DescriptionProblem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DescriptionProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.workbook != nil {
		edges = append(edges, descriptionproblem.EdgeWorkbook)
	}
	if m.workbook_category != nil {
		edges = append(edges, descriptionproblem.EdgeWorkbookCategory)
	}
	if m.workbook_category_detail != nil {
		edges = append(edges, descriptionproblem.EdgeWorkbookCategoryDetail)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DescriptionProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case descriptionproblem.EdgeWorkbook:
		if id := m.workbook; id != nil {
			return []ent.Value{*id}
		}
	case descriptionproblem.EdgeWorkbookCategory:
		if id := m.workbook_category; id != nil {
			return []ent.Value{*id}
		}
	case descriptionproblem.EdgeWorkbookCategoryDetail:
		if id := m.workbook_category_detail; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DescriptionProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DescriptionProblemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DescriptionProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedworkbook {
		edges = append(edges, descriptionproblem.EdgeWorkbook)
	}
	if m.clearedworkbook_category {
		edges = append(edges, descriptionproblem.EdgeWorkbookCategory)
	}
	if m.clearedworkbook_category_detail {
		edges = append(edges, descriptionproblem.EdgeWorkbookCategoryDetail)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DescriptionProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case descriptionproblem.EdgeWorkbook:
		return m.clearedworkbook
	case descriptionproblem.EdgeWorkbookCategory:
		return m.clearedworkbook_category
	case descriptionproblem.EdgeWorkbookCategoryDetail:
		return m.clearedworkbook_category_detail
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DescriptionProblemMutation) ClearEdge(name string) error {
	switch name {
	case descriptionproblem.EdgeWorkbook:
		m.ClearWorkbook()
		return nil
	case descriptionproblem.EdgeWorkbookCategory:
		m.ClearWorkbookCategory()
		return nil
	case descriptionproblem.EdgeWorkbookCategoryDetail:
		m.ClearWorkbookCategoryDetail()
		return nil
	}
	return fmt.Errorf("unknown DescriptionProblem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DescriptionProblemMutation) ResetEdge(name string) error {
	switch name {
	case descriptionproblem.EdgeWorkbook:
		m.ResetWorkbook()
		return nil
	case descriptionproblem.EdgeWorkbookCategory:
		m.ResetWorkbookCategory()
		return nil
	case descriptionproblem.EdgeWorkbookCategoryDetail:
		m.ResetWorkbookCategoryDetail()
		return nil
	}
	return fmt.Errorf("unknown DescriptionProblem edge %s", name)
}

// PermissionMutation represents an operation that mutates the Permission nodes in the graph.
type PermissionMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	clearedFields map[string]struct{}
	roles         map[uuid.UUID]struct{}
	removedroles  map[uuid.UUID]struct{}
	clearedroles  bool
	done          bool
	oldValue      func(context.Context) (*Permission, error)
	predicates    []predicate.Permission
}

var _ ent.Mutation = (*PermissionMutation)(nil)

// permissionOption allows management of the mutation configuration using functional options.
type permissionOption func(*PermissionMutation)

// newPermissionMutation creates new mutation for the Permission entity.
func newPermissionMutation(c config, op Op, opts ...permissionOption) *PermissionMutation {
	m := &PermissionMutation{
		config:        c,
		op:            op,
		typ:           TypePermission,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPermissionID sets the ID field of the mutation.
func withPermissionID(id uuid.UUID) permissionOption {
	return func(m *PermissionMutation) {
		var (
			err   error
			once  sync.Once
			value *Permission
		)
		m.oldValue = func(ctx context.Context) (*Permission, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Permission.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPermission sets the old Permission of the mutation.
func withPermission(node *Permission) permissionOption {
	return func(m *PermissionMutation) {
		m.oldValue = func(context.Context) (*Permission, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PermissionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PermissionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Permission entities.
func (m *PermissionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PermissionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PermissionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Permission.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PermissionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PermissionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PermissionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PermissionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PermissionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PermissionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *PermissionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PermissionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Permission entity.
// If the Permission object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PermissionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PermissionMutation) ResetName() {
	m.name = nil
}

// AddRoleIDs adds the "roles" edge to the Role entity by ids.
func (m *PermissionMutation) AddRoleIDs(ids ...uuid.UUID) {
	if m.roles == nil {
		m.roles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.roles[ids[i]] = struct{}{}
	}
}

// ClearRoles clears the "roles" edge to the Role entity.
func (m *PermissionMutation) ClearRoles() {
	m.clearedroles = true
}

// RolesCleared reports if the "roles" edge to the Role entity was cleared.
func (m *PermissionMutation) RolesCleared() bool {
	return m.clearedroles
}

// RemoveRoleIDs removes the "roles" edge to the Role entity by IDs.
func (m *PermissionMutation) RemoveRoleIDs(ids ...uuid.UUID) {
	if m.removedroles == nil {
		m.removedroles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.roles, ids[i])
		m.removedroles[ids[i]] = struct{}{}
	}
}

// RemovedRoles returns the removed IDs of the "roles" edge to the Role entity.
func (m *PermissionMutation) RemovedRolesIDs() (ids []uuid.UUID) {
	for id := range m.removedroles {
		ids = append(ids, id)
	}
	return
}

// RolesIDs returns the "roles" edge IDs in the mutation.
func (m *PermissionMutation) RolesIDs() (ids []uuid.UUID) {
	for id := range m.roles {
		ids = append(ids, id)
	}
	return
}

// ResetRoles resets all changes to the "roles" edge.
func (m *PermissionMutation) ResetRoles() {
	m.roles = nil
	m.clearedroles = false
	m.removedroles = nil
}

// Where appends a list predicates to the PermissionMutation builder.
func (m *PermissionMutation) Where(ps ...predicate.Permission) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PermissionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PermissionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Permission, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PermissionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PermissionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Permission).
func (m *PermissionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PermissionMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, permission.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, permission.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, permission.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PermissionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case permission.FieldCreatedAt:
		return m.CreatedAt()
	case permission.FieldUpdatedAt:
		return m.UpdatedAt()
	case permission.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PermissionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case permission.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case permission.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case permission.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Permission field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case permission.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case permission.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case permission.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PermissionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PermissionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PermissionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PermissionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PermissionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PermissionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Permission nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PermissionMutation) ResetField(name string) error {
	switch name {
	case permission.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case permission.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case permission.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Permission field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PermissionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.roles != nil {
		edges = append(edges, permission.EdgeRoles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PermissionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.roles))
		for id := range m.roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PermissionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedroles != nil {
		edges = append(edges, permission.EdgeRoles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PermissionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case permission.EdgeRoles:
		ids := make([]ent.Value, 0, len(m.removedroles))
		for id := range m.removedroles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PermissionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedroles {
		edges = append(edges, permission.EdgeRoles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PermissionMutation) EdgeCleared(name string) bool {
	switch name {
	case permission.EdgeRoles:
		return m.clearedroles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PermissionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Permission unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PermissionMutation) ResetEdge(name string) error {
	switch name {
	case permission.EdgeRoles:
		m.ResetRoles()
		return nil
	}
	return fmt.Errorf("unknown Permission edge %s", name)
}

// RoleMutation represents an operation that mutates the Role nodes in the graph.
type RoleMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *time.Time
	updated_at              *time.Time
	name                    *string
	clearedFields           map[string]struct{}
	workbook_members        map[uuid.UUID]struct{}
	removedworkbook_members map[uuid.UUID]struct{}
	clearedworkbook_members bool
	permissions             map[uuid.UUID]struct{}
	removedpermissions      map[uuid.UUID]struct{}
	clearedpermissions      bool
	done                    bool
	oldValue                func(context.Context) (*Role, error)
	predicates              []predicate.Role
}

var _ ent.Mutation = (*RoleMutation)(nil)

// roleOption allows management of the mutation configuration using functional options.
type roleOption func(*RoleMutation)

// newRoleMutation creates new mutation for the Role entity.
func newRoleMutation(c config, op Op, opts ...roleOption) *RoleMutation {
	m := &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoleID sets the ID field of the mutation.
func withRoleID(id uuid.UUID) roleOption {
	return func(m *RoleMutation) {
		var (
			err   error
			once  sync.Once
			value *Role
		)
		m.oldValue = func(ctx context.Context) (*Role, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Role.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRole sets the old Role of the mutation.
func withRole(node *Role) roleOption {
	return func(m *RoleMutation) {
		m.oldValue = func(context.Context) (*Role, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Role entities.
func (m *RoleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RoleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RoleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Role.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RoleMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RoleMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RoleMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RoleMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RoleMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RoleMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *RoleMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RoleMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Role entity.
// If the Role object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RoleMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RoleMutation) ResetName() {
	m.name = nil
}

// AddWorkbookMemberIDs adds the "workbook_members" edge to the WorkbookMember entity by ids.
func (m *RoleMutation) AddWorkbookMemberIDs(ids ...uuid.UUID) {
	if m.workbook_members == nil {
		m.workbook_members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workbook_members[ids[i]] = struct{}{}
	}
}

// ClearWorkbookMembers clears the "workbook_members" edge to the WorkbookMember entity.
func (m *RoleMutation) ClearWorkbookMembers() {
	m.clearedworkbook_members = true
}

// WorkbookMembersCleared reports if the "workbook_members" edge to the WorkbookMember entity was cleared.
func (m *RoleMutation) WorkbookMembersCleared() bool {
	return m.clearedworkbook_members
}

// RemoveWorkbookMemberIDs removes the "workbook_members" edge to the WorkbookMember entity by IDs.
func (m *RoleMutation) RemoveWorkbookMemberIDs(ids ...uuid.UUID) {
	if m.removedworkbook_members == nil {
		m.removedworkbook_members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workbook_members, ids[i])
		m.removedworkbook_members[ids[i]] = struct{}{}
	}
}

// RemovedWorkbookMembers returns the removed IDs of the "workbook_members" edge to the WorkbookMember entity.
func (m *RoleMutation) RemovedWorkbookMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedworkbook_members {
		ids = append(ids, id)
	}
	return
}

// WorkbookMembersIDs returns the "workbook_members" edge IDs in the mutation.
func (m *RoleMutation) WorkbookMembersIDs() (ids []uuid.UUID) {
	for id := range m.workbook_members {
		ids = append(ids, id)
	}
	return
}

// ResetWorkbookMembers resets all changes to the "workbook_members" edge.
func (m *RoleMutation) ResetWorkbookMembers() {
	m.workbook_members = nil
	m.clearedworkbook_members = false
	m.removedworkbook_members = nil
}

// AddPermissionIDs adds the "permissions" edge to the Permission entity by ids.
func (m *RoleMutation) AddPermissionIDs(ids ...uuid.UUID) {
	if m.permissions == nil {
		m.permissions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.permissions[ids[i]] = struct{}{}
	}
}

// ClearPermissions clears the "permissions" edge to the Permission entity.
func (m *RoleMutation) ClearPermissions() {
	m.clearedpermissions = true
}

// PermissionsCleared reports if the "permissions" edge to the Permission entity was cleared.
func (m *RoleMutation) PermissionsCleared() bool {
	return m.clearedpermissions
}

// RemovePermissionIDs removes the "permissions" edge to the Permission entity by IDs.
func (m *RoleMutation) RemovePermissionIDs(ids ...uuid.UUID) {
	if m.removedpermissions == nil {
		m.removedpermissions = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.permissions, ids[i])
		m.removedpermissions[ids[i]] = struct{}{}
	}
}

// RemovedPermissions returns the removed IDs of the "permissions" edge to the Permission entity.
func (m *RoleMutation) RemovedPermissionsIDs() (ids []uuid.UUID) {
	for id := range m.removedpermissions {
		ids = append(ids, id)
	}
	return
}

// PermissionsIDs returns the "permissions" edge IDs in the mutation.
func (m *RoleMutation) PermissionsIDs() (ids []uuid.UUID) {
	for id := range m.permissions {
		ids = append(ids, id)
	}
	return
}

// ResetPermissions resets all changes to the "permissions" edge.
func (m *RoleMutation) ResetPermissions() {
	m.permissions = nil
	m.clearedpermissions = false
	m.removedpermissions = nil
}

// Where appends a list predicates to the RoleMutation builder.
func (m *RoleMutation) Where(ps ...predicate.Role) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RoleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RoleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Role, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RoleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, role.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, role.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, role.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldCreatedAt:
		return m.CreatedAt()
	case role.FieldUpdatedAt:
		return m.UpdatedAt()
	case role.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RoleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case role.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case role.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case role.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Role field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case role.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case role.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case role.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case role.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.workbook_members != nil {
		edges = append(edges, role.EdgeWorkbookMembers)
	}
	if m.permissions != nil {
		edges = append(edges, role.EdgePermissions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeWorkbookMembers:
		ids := make([]ent.Value, 0, len(m.workbook_members))
		for id := range m.workbook_members {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.permissions))
		for id := range m.permissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedworkbook_members != nil {
		edges = append(edges, role.EdgeWorkbookMembers)
	}
	if m.removedpermissions != nil {
		edges = append(edges, role.EdgePermissions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeWorkbookMembers:
		ids := make([]ent.Value, 0, len(m.removedworkbook_members))
		for id := range m.removedworkbook_members {
			ids = append(ids, id)
		}
		return ids
	case role.EdgePermissions:
		ids := make([]ent.Value, 0, len(m.removedpermissions))
		for id := range m.removedpermissions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedworkbook_members {
		edges = append(edges, role.EdgeWorkbookMembers)
	}
	if m.clearedpermissions {
		edges = append(edges, role.EdgePermissions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	case role.EdgeWorkbookMembers:
		return m.clearedworkbook_members
	case role.EdgePermissions:
		return m.clearedpermissions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeWorkbookMembers:
		m.ResetWorkbookMembers()
		return nil
	case role.EdgePermissions:
		m.ResetPermissions()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// SelectionProblemMutation represents an operation that mutates the SelectionProblem nodes in the graph.
type SelectionProblemMutation struct {
	config
	op                               Op
	typ                              string
	id                               *uuid.UUID
	created_at                       *time.Time
	updated_at                       *time.Time
	statement                        *string
	clearedFields                    map[string]struct{}
	selection_problem_answers        map[uuid.UUID]struct{}
	removedselection_problem_answers map[uuid.UUID]struct{}
	clearedselection_problem_answers bool
	workbook                         *uuid.UUID
	clearedworkbook                  bool
	workbook_category                *uuid.UUID
	clearedworkbook_category         bool
	workbook_category_detail         *uuid.UUID
	clearedworkbook_category_detail  bool
	done                             bool
	oldValue                         func(context.Context) (*SelectionProblem, error)
	predicates                       []predicate.SelectionProblem
}

var _ ent.Mutation = (*SelectionProblemMutation)(nil)

// selectionproblemOption allows management of the mutation configuration using functional options.
type selectionproblemOption func(*SelectionProblemMutation)

// newSelectionProblemMutation creates new mutation for the SelectionProblem entity.
func newSelectionProblemMutation(c config, op Op, opts ...selectionproblemOption) *SelectionProblemMutation {
	m := &SelectionProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeSelectionProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSelectionProblemID sets the ID field of the mutation.
func withSelectionProblemID(id uuid.UUID) selectionproblemOption {
	return func(m *SelectionProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *SelectionProblem
		)
		m.oldValue = func(ctx context.Context) (*SelectionProblem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SelectionProblem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSelectionProblem sets the old SelectionProblem of the mutation.
func withSelectionProblem(node *SelectionProblem) selectionproblemOption {
	return func(m *SelectionProblemMutation) {
		m.oldValue = func(context.Context) (*SelectionProblem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SelectionProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SelectionProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SelectionProblem entities.
func (m *SelectionProblemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SelectionProblemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SelectionProblemMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SelectionProblem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SelectionProblemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SelectionProblemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SelectionProblem entity.
// If the SelectionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SelectionProblemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SelectionProblemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SelectionProblemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SelectionProblem entity.
// If the SelectionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SelectionProblemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetStatement sets the "statement" field.
func (m *SelectionProblemMutation) SetStatement(s string) {
	m.statement = &s
}

// Statement returns the value of the "statement" field in the mutation.
func (m *SelectionProblemMutation) Statement() (r string, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatement returns the old "statement" field's value of the SelectionProblem entity.
// If the SelectionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemMutation) OldStatement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatement: %w", err)
	}
	return oldValue.Statement, nil
}

// ResetStatement resets all changes to the "statement" field.
func (m *SelectionProblemMutation) ResetStatement() {
	m.statement = nil
}

// SetWorkbookID sets the "workbook_id" field.
func (m *SelectionProblemMutation) SetWorkbookID(u uuid.UUID) {
	m.workbook = &u
}

// WorkbookID returns the value of the "workbook_id" field in the mutation.
func (m *SelectionProblemMutation) WorkbookID() (r uuid.UUID, exists bool) {
	v := m.workbook
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookID returns the old "workbook_id" field's value of the SelectionProblem entity.
// If the SelectionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemMutation) OldWorkbookID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookID: %w", err)
	}
	return oldValue.WorkbookID, nil
}

// ResetWorkbookID resets all changes to the "workbook_id" field.
func (m *SelectionProblemMutation) ResetWorkbookID() {
	m.workbook = nil
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (m *SelectionProblemMutation) SetWorkbookCategoryID(u uuid.UUID) {
	m.workbook_category = &u
}

// WorkbookCategoryID returns the value of the "workbook_category_id" field in the mutation.
func (m *SelectionProblemMutation) WorkbookCategoryID() (r uuid.UUID, exists bool) {
	v := m.workbook_category
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookCategoryID returns the old "workbook_category_id" field's value of the SelectionProblem entity.
// If the SelectionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemMutation) OldWorkbookCategoryID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookCategoryID: %w", err)
	}
	return oldValue.WorkbookCategoryID, nil
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (m *SelectionProblemMutation) ClearWorkbookCategoryID() {
	m.workbook_category = nil
	m.clearedFields[selectionproblem.FieldWorkbookCategoryID] = struct{}{}
}

// WorkbookCategoryIDCleared returns if the "workbook_category_id" field was cleared in this mutation.
func (m *SelectionProblemMutation) WorkbookCategoryIDCleared() bool {
	_, ok := m.clearedFields[selectionproblem.FieldWorkbookCategoryID]
	return ok
}

// ResetWorkbookCategoryID resets all changes to the "workbook_category_id" field.
func (m *SelectionProblemMutation) ResetWorkbookCategoryID() {
	m.workbook_category = nil
	delete(m.clearedFields, selectionproblem.FieldWorkbookCategoryID)
}

// SetWorkbookCategoryDetailID sets the "workbook_category_detail_id" field.
func (m *SelectionProblemMutation) SetWorkbookCategoryDetailID(u uuid.UUID) {
	m.workbook_category_detail = &u
}

// WorkbookCategoryDetailID returns the value of the "workbook_category_detail_id" field in the mutation.
func (m *SelectionProblemMutation) WorkbookCategoryDetailID() (r uuid.UUID, exists bool) {
	v := m.workbook_category_detail
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookCategoryDetailID returns the old "workbook_category_detail_id" field's value of the SelectionProblem entity.
// If the SelectionProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemMutation) OldWorkbookCategoryDetailID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookCategoryDetailID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookCategoryDetailID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookCategoryDetailID: %w", err)
	}
	return oldValue.WorkbookCategoryDetailID, nil
}

// ClearWorkbookCategoryDetailID clears the value of the "workbook_category_detail_id" field.
func (m *SelectionProblemMutation) ClearWorkbookCategoryDetailID() {
	m.workbook_category_detail = nil
	m.clearedFields[selectionproblem.FieldWorkbookCategoryDetailID] = struct{}{}
}

// WorkbookCategoryDetailIDCleared returns if the "workbook_category_detail_id" field was cleared in this mutation.
func (m *SelectionProblemMutation) WorkbookCategoryDetailIDCleared() bool {
	_, ok := m.clearedFields[selectionproblem.FieldWorkbookCategoryDetailID]
	return ok
}

// ResetWorkbookCategoryDetailID resets all changes to the "workbook_category_detail_id" field.
func (m *SelectionProblemMutation) ResetWorkbookCategoryDetailID() {
	m.workbook_category_detail = nil
	delete(m.clearedFields, selectionproblem.FieldWorkbookCategoryDetailID)
}

// AddSelectionProblemAnswerIDs adds the "selection_problem_answers" edge to the SelectionProblemAnswer entity by ids.
func (m *SelectionProblemMutation) AddSelectionProblemAnswerIDs(ids ...uuid.UUID) {
	if m.selection_problem_answers == nil {
		m.selection_problem_answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.selection_problem_answers[ids[i]] = struct{}{}
	}
}

// ClearSelectionProblemAnswers clears the "selection_problem_answers" edge to the SelectionProblemAnswer entity.
func (m *SelectionProblemMutation) ClearSelectionProblemAnswers() {
	m.clearedselection_problem_answers = true
}

// SelectionProblemAnswersCleared reports if the "selection_problem_answers" edge to the SelectionProblemAnswer entity was cleared.
func (m *SelectionProblemMutation) SelectionProblemAnswersCleared() bool {
	return m.clearedselection_problem_answers
}

// RemoveSelectionProblemAnswerIDs removes the "selection_problem_answers" edge to the SelectionProblemAnswer entity by IDs.
func (m *SelectionProblemMutation) RemoveSelectionProblemAnswerIDs(ids ...uuid.UUID) {
	if m.removedselection_problem_answers == nil {
		m.removedselection_problem_answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.selection_problem_answers, ids[i])
		m.removedselection_problem_answers[ids[i]] = struct{}{}
	}
}

// RemovedSelectionProblemAnswers returns the removed IDs of the "selection_problem_answers" edge to the SelectionProblemAnswer entity.
func (m *SelectionProblemMutation) RemovedSelectionProblemAnswersIDs() (ids []uuid.UUID) {
	for id := range m.removedselection_problem_answers {
		ids = append(ids, id)
	}
	return
}

// SelectionProblemAnswersIDs returns the "selection_problem_answers" edge IDs in the mutation.
func (m *SelectionProblemMutation) SelectionProblemAnswersIDs() (ids []uuid.UUID) {
	for id := range m.selection_problem_answers {
		ids = append(ids, id)
	}
	return
}

// ResetSelectionProblemAnswers resets all changes to the "selection_problem_answers" edge.
func (m *SelectionProblemMutation) ResetSelectionProblemAnswers() {
	m.selection_problem_answers = nil
	m.clearedselection_problem_answers = false
	m.removedselection_problem_answers = nil
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (m *SelectionProblemMutation) ClearWorkbook() {
	m.clearedworkbook = true
	m.clearedFields[selectionproblem.FieldWorkbookID] = struct{}{}
}

// WorkbookCleared reports if the "workbook" edge to the Workbook entity was cleared.
func (m *SelectionProblemMutation) WorkbookCleared() bool {
	return m.clearedworkbook
}

// WorkbookIDs returns the "workbook" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookID instead. It exists only for internal usage by the builders.
func (m *SelectionProblemMutation) WorkbookIDs() (ids []uuid.UUID) {
	if id := m.workbook; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbook resets all changes to the "workbook" edge.
func (m *SelectionProblemMutation) ResetWorkbook() {
	m.workbook = nil
	m.clearedworkbook = false
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (m *SelectionProblemMutation) ClearWorkbookCategory() {
	m.clearedworkbook_category = true
	m.clearedFields[selectionproblem.FieldWorkbookCategoryID] = struct{}{}
}

// WorkbookCategoryCleared reports if the "workbook_category" edge to the WorkbookCategory entity was cleared.
func (m *SelectionProblemMutation) WorkbookCategoryCleared() bool {
	return m.WorkbookCategoryIDCleared() || m.clearedworkbook_category
}

// WorkbookCategoryIDs returns the "workbook_category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookCategoryID instead. It exists only for internal usage by the builders.
func (m *SelectionProblemMutation) WorkbookCategoryIDs() (ids []uuid.UUID) {
	if id := m.workbook_category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbookCategory resets all changes to the "workbook_category" edge.
func (m *SelectionProblemMutation) ResetWorkbookCategory() {
	m.workbook_category = nil
	m.clearedworkbook_category = false
}

// ClearWorkbookCategoryDetail clears the "workbook_category_detail" edge to the WorkbookCategoryDetail entity.
func (m *SelectionProblemMutation) ClearWorkbookCategoryDetail() {
	m.clearedworkbook_category_detail = true
	m.clearedFields[selectionproblem.FieldWorkbookCategoryDetailID] = struct{}{}
}

// WorkbookCategoryDetailCleared reports if the "workbook_category_detail" edge to the WorkbookCategoryDetail entity was cleared.
func (m *SelectionProblemMutation) WorkbookCategoryDetailCleared() bool {
	return m.WorkbookCategoryDetailIDCleared() || m.clearedworkbook_category_detail
}

// WorkbookCategoryDetailIDs returns the "workbook_category_detail" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookCategoryDetailID instead. It exists only for internal usage by the builders.
func (m *SelectionProblemMutation) WorkbookCategoryDetailIDs() (ids []uuid.UUID) {
	if id := m.workbook_category_detail; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbookCategoryDetail resets all changes to the "workbook_category_detail" edge.
func (m *SelectionProblemMutation) ResetWorkbookCategoryDetail() {
	m.workbook_category_detail = nil
	m.clearedworkbook_category_detail = false
}

// Where appends a list predicates to the SelectionProblemMutation builder.
func (m *SelectionProblemMutation) Where(ps ...predicate.SelectionProblem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SelectionProblemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SelectionProblemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SelectionProblem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SelectionProblemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SelectionProblemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SelectionProblem).
func (m *SelectionProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SelectionProblemMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, selectionproblem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, selectionproblem.FieldUpdatedAt)
	}
	if m.statement != nil {
		fields = append(fields, selectionproblem.FieldStatement)
	}
	if m.workbook != nil {
		fields = append(fields, selectionproblem.FieldWorkbookID)
	}
	if m.workbook_category != nil {
		fields = append(fields, selectionproblem.FieldWorkbookCategoryID)
	}
	if m.workbook_category_detail != nil {
		fields = append(fields, selectionproblem.FieldWorkbookCategoryDetailID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SelectionProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case selectionproblem.FieldCreatedAt:
		return m.CreatedAt()
	case selectionproblem.FieldUpdatedAt:
		return m.UpdatedAt()
	case selectionproblem.FieldStatement:
		return m.Statement()
	case selectionproblem.FieldWorkbookID:
		return m.WorkbookID()
	case selectionproblem.FieldWorkbookCategoryID:
		return m.WorkbookCategoryID()
	case selectionproblem.FieldWorkbookCategoryDetailID:
		return m.WorkbookCategoryDetailID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SelectionProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case selectionproblem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case selectionproblem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case selectionproblem.FieldStatement:
		return m.OldStatement(ctx)
	case selectionproblem.FieldWorkbookID:
		return m.OldWorkbookID(ctx)
	case selectionproblem.FieldWorkbookCategoryID:
		return m.OldWorkbookCategoryID(ctx)
	case selectionproblem.FieldWorkbookCategoryDetailID:
		return m.OldWorkbookCategoryDetailID(ctx)
	}
	return nil, fmt.Errorf("unknown SelectionProblem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SelectionProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case selectionproblem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case selectionproblem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case selectionproblem.FieldStatement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatement(v)
		return nil
	case selectionproblem.FieldWorkbookID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookID(v)
		return nil
	case selectionproblem.FieldWorkbookCategoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookCategoryID(v)
		return nil
	case selectionproblem.FieldWorkbookCategoryDetailID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookCategoryDetailID(v)
		return nil
	}
	return fmt.Errorf("unknown SelectionProblem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SelectionProblemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SelectionProblemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SelectionProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SelectionProblem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SelectionProblemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(selectionproblem.FieldWorkbookCategoryID) {
		fields = append(fields, selectionproblem.FieldWorkbookCategoryID)
	}
	if m.FieldCleared(selectionproblem.FieldWorkbookCategoryDetailID) {
		fields = append(fields, selectionproblem.FieldWorkbookCategoryDetailID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SelectionProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SelectionProblemMutation) ClearField(name string) error {
	switch name {
	case selectionproblem.FieldWorkbookCategoryID:
		m.ClearWorkbookCategoryID()
		return nil
	case selectionproblem.FieldWorkbookCategoryDetailID:
		m.ClearWorkbookCategoryDetailID()
		return nil
	}
	return fmt.Errorf("unknown SelectionProblem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SelectionProblemMutation) ResetField(name string) error {
	switch name {
	case selectionproblem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case selectionproblem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case selectionproblem.FieldStatement:
		m.ResetStatement()
		return nil
	case selectionproblem.FieldWorkbookID:
		m.ResetWorkbookID()
		return nil
	case selectionproblem.FieldWorkbookCategoryID:
		m.ResetWorkbookCategoryID()
		return nil
	case selectionproblem.FieldWorkbookCategoryDetailID:
		m.ResetWorkbookCategoryDetailID()
		return nil
	}
	return fmt.Errorf("unknown SelectionProblem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SelectionProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.selection_problem_answers != nil {
		edges = append(edges, selectionproblem.EdgeSelectionProblemAnswers)
	}
	if m.workbook != nil {
		edges = append(edges, selectionproblem.EdgeWorkbook)
	}
	if m.workbook_category != nil {
		edges = append(edges, selectionproblem.EdgeWorkbookCategory)
	}
	if m.workbook_category_detail != nil {
		edges = append(edges, selectionproblem.EdgeWorkbookCategoryDetail)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SelectionProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case selectionproblem.EdgeSelectionProblemAnswers:
		ids := make([]ent.Value, 0, len(m.selection_problem_answers))
		for id := range m.selection_problem_answers {
			ids = append(ids, id)
		}
		return ids
	case selectionproblem.EdgeWorkbook:
		if id := m.workbook; id != nil {
			return []ent.Value{*id}
		}
	case selectionproblem.EdgeWorkbookCategory:
		if id := m.workbook_category; id != nil {
			return []ent.Value{*id}
		}
	case selectionproblem.EdgeWorkbookCategoryDetail:
		if id := m.workbook_category_detail; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SelectionProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedselection_problem_answers != nil {
		edges = append(edges, selectionproblem.EdgeSelectionProblemAnswers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SelectionProblemMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case selectionproblem.EdgeSelectionProblemAnswers:
		ids := make([]ent.Value, 0, len(m.removedselection_problem_answers))
		for id := range m.removedselection_problem_answers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SelectionProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedselection_problem_answers {
		edges = append(edges, selectionproblem.EdgeSelectionProblemAnswers)
	}
	if m.clearedworkbook {
		edges = append(edges, selectionproblem.EdgeWorkbook)
	}
	if m.clearedworkbook_category {
		edges = append(edges, selectionproblem.EdgeWorkbookCategory)
	}
	if m.clearedworkbook_category_detail {
		edges = append(edges, selectionproblem.EdgeWorkbookCategoryDetail)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SelectionProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case selectionproblem.EdgeSelectionProblemAnswers:
		return m.clearedselection_problem_answers
	case selectionproblem.EdgeWorkbook:
		return m.clearedworkbook
	case selectionproblem.EdgeWorkbookCategory:
		return m.clearedworkbook_category
	case selectionproblem.EdgeWorkbookCategoryDetail:
		return m.clearedworkbook_category_detail
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SelectionProblemMutation) ClearEdge(name string) error {
	switch name {
	case selectionproblem.EdgeWorkbook:
		m.ClearWorkbook()
		return nil
	case selectionproblem.EdgeWorkbookCategory:
		m.ClearWorkbookCategory()
		return nil
	case selectionproblem.EdgeWorkbookCategoryDetail:
		m.ClearWorkbookCategoryDetail()
		return nil
	}
	return fmt.Errorf("unknown SelectionProblem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SelectionProblemMutation) ResetEdge(name string) error {
	switch name {
	case selectionproblem.EdgeSelectionProblemAnswers:
		m.ResetSelectionProblemAnswers()
		return nil
	case selectionproblem.EdgeWorkbook:
		m.ResetWorkbook()
		return nil
	case selectionproblem.EdgeWorkbookCategory:
		m.ResetWorkbookCategory()
		return nil
	case selectionproblem.EdgeWorkbookCategoryDetail:
		m.ResetWorkbookCategoryDetail()
		return nil
	}
	return fmt.Errorf("unknown SelectionProblem edge %s", name)
}

// SelectionProblemAnswerMutation represents an operation that mutates the SelectionProblemAnswer nodes in the graph.
type SelectionProblemAnswerMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	created_at               *time.Time
	updated_at               *time.Time
	is_correct               *bool
	statement                *string
	clearedFields            map[string]struct{}
	selection_problem        *uuid.UUID
	clearedselection_problem bool
	done                     bool
	oldValue                 func(context.Context) (*SelectionProblemAnswer, error)
	predicates               []predicate.SelectionProblemAnswer
}

var _ ent.Mutation = (*SelectionProblemAnswerMutation)(nil)

// selectionproblemanswerOption allows management of the mutation configuration using functional options.
type selectionproblemanswerOption func(*SelectionProblemAnswerMutation)

// newSelectionProblemAnswerMutation creates new mutation for the SelectionProblemAnswer entity.
func newSelectionProblemAnswerMutation(c config, op Op, opts ...selectionproblemanswerOption) *SelectionProblemAnswerMutation {
	m := &SelectionProblemAnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeSelectionProblemAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSelectionProblemAnswerID sets the ID field of the mutation.
func withSelectionProblemAnswerID(id uuid.UUID) selectionproblemanswerOption {
	return func(m *SelectionProblemAnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *SelectionProblemAnswer
		)
		m.oldValue = func(ctx context.Context) (*SelectionProblemAnswer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SelectionProblemAnswer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSelectionProblemAnswer sets the old SelectionProblemAnswer of the mutation.
func withSelectionProblemAnswer(node *SelectionProblemAnswer) selectionproblemanswerOption {
	return func(m *SelectionProblemAnswerMutation) {
		m.oldValue = func(context.Context) (*SelectionProblemAnswer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SelectionProblemAnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SelectionProblemAnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SelectionProblemAnswer entities.
func (m *SelectionProblemAnswerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SelectionProblemAnswerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SelectionProblemAnswerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SelectionProblemAnswer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *SelectionProblemAnswerMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SelectionProblemAnswerMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SelectionProblemAnswer entity.
// If the SelectionProblemAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemAnswerMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SelectionProblemAnswerMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *SelectionProblemAnswerMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *SelectionProblemAnswerMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the SelectionProblemAnswer entity.
// If the SelectionProblemAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemAnswerMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *SelectionProblemAnswerMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsCorrect sets the "is_correct" field.
func (m *SelectionProblemAnswerMutation) SetIsCorrect(b bool) {
	m.is_correct = &b
}

// IsCorrect returns the value of the "is_correct" field in the mutation.
func (m *SelectionProblemAnswerMutation) IsCorrect() (r bool, exists bool) {
	v := m.is_correct
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCorrect returns the old "is_correct" field's value of the SelectionProblemAnswer entity.
// If the SelectionProblemAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemAnswerMutation) OldIsCorrect(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCorrect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCorrect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCorrect: %w", err)
	}
	return oldValue.IsCorrect, nil
}

// ResetIsCorrect resets all changes to the "is_correct" field.
func (m *SelectionProblemAnswerMutation) ResetIsCorrect() {
	m.is_correct = nil
}

// SetSelectionProblemID sets the "selection_problem_id" field.
func (m *SelectionProblemAnswerMutation) SetSelectionProblemID(u uuid.UUID) {
	m.selection_problem = &u
}

// SelectionProblemID returns the value of the "selection_problem_id" field in the mutation.
func (m *SelectionProblemAnswerMutation) SelectionProblemID() (r uuid.UUID, exists bool) {
	v := m.selection_problem
	if v == nil {
		return
	}
	return *v, true
}

// OldSelectionProblemID returns the old "selection_problem_id" field's value of the SelectionProblemAnswer entity.
// If the SelectionProblemAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemAnswerMutation) OldSelectionProblemID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSelectionProblemID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSelectionProblemID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSelectionProblemID: %w", err)
	}
	return oldValue.SelectionProblemID, nil
}

// ResetSelectionProblemID resets all changes to the "selection_problem_id" field.
func (m *SelectionProblemAnswerMutation) ResetSelectionProblemID() {
	m.selection_problem = nil
}

// SetStatement sets the "statement" field.
func (m *SelectionProblemAnswerMutation) SetStatement(s string) {
	m.statement = &s
}

// Statement returns the value of the "statement" field in the mutation.
func (m *SelectionProblemAnswerMutation) Statement() (r string, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatement returns the old "statement" field's value of the SelectionProblemAnswer entity.
// If the SelectionProblemAnswer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SelectionProblemAnswerMutation) OldStatement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatement: %w", err)
	}
	return oldValue.Statement, nil
}

// ResetStatement resets all changes to the "statement" field.
func (m *SelectionProblemAnswerMutation) ResetStatement() {
	m.statement = nil
}

// ClearSelectionProblem clears the "selection_problem" edge to the SelectionProblem entity.
func (m *SelectionProblemAnswerMutation) ClearSelectionProblem() {
	m.clearedselection_problem = true
	m.clearedFields[selectionproblemanswer.FieldSelectionProblemID] = struct{}{}
}

// SelectionProblemCleared reports if the "selection_problem" edge to the SelectionProblem entity was cleared.
func (m *SelectionProblemAnswerMutation) SelectionProblemCleared() bool {
	return m.clearedselection_problem
}

// SelectionProblemIDs returns the "selection_problem" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SelectionProblemID instead. It exists only for internal usage by the builders.
func (m *SelectionProblemAnswerMutation) SelectionProblemIDs() (ids []uuid.UUID) {
	if id := m.selection_problem; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSelectionProblem resets all changes to the "selection_problem" edge.
func (m *SelectionProblemAnswerMutation) ResetSelectionProblem() {
	m.selection_problem = nil
	m.clearedselection_problem = false
}

// Where appends a list predicates to the SelectionProblemAnswerMutation builder.
func (m *SelectionProblemAnswerMutation) Where(ps ...predicate.SelectionProblemAnswer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SelectionProblemAnswerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SelectionProblemAnswerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SelectionProblemAnswer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SelectionProblemAnswerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SelectionProblemAnswerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SelectionProblemAnswer).
func (m *SelectionProblemAnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SelectionProblemAnswerMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, selectionproblemanswer.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, selectionproblemanswer.FieldUpdatedAt)
	}
	if m.is_correct != nil {
		fields = append(fields, selectionproblemanswer.FieldIsCorrect)
	}
	if m.selection_problem != nil {
		fields = append(fields, selectionproblemanswer.FieldSelectionProblemID)
	}
	if m.statement != nil {
		fields = append(fields, selectionproblemanswer.FieldStatement)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SelectionProblemAnswerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case selectionproblemanswer.FieldCreatedAt:
		return m.CreatedAt()
	case selectionproblemanswer.FieldUpdatedAt:
		return m.UpdatedAt()
	case selectionproblemanswer.FieldIsCorrect:
		return m.IsCorrect()
	case selectionproblemanswer.FieldSelectionProblemID:
		return m.SelectionProblemID()
	case selectionproblemanswer.FieldStatement:
		return m.Statement()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SelectionProblemAnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case selectionproblemanswer.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case selectionproblemanswer.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case selectionproblemanswer.FieldIsCorrect:
		return m.OldIsCorrect(ctx)
	case selectionproblemanswer.FieldSelectionProblemID:
		return m.OldSelectionProblemID(ctx)
	case selectionproblemanswer.FieldStatement:
		return m.OldStatement(ctx)
	}
	return nil, fmt.Errorf("unknown SelectionProblemAnswer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SelectionProblemAnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case selectionproblemanswer.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case selectionproblemanswer.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case selectionproblemanswer.FieldIsCorrect:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCorrect(v)
		return nil
	case selectionproblemanswer.FieldSelectionProblemID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSelectionProblemID(v)
		return nil
	case selectionproblemanswer.FieldStatement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatement(v)
		return nil
	}
	return fmt.Errorf("unknown SelectionProblemAnswer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SelectionProblemAnswerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SelectionProblemAnswerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SelectionProblemAnswerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SelectionProblemAnswer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SelectionProblemAnswerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SelectionProblemAnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SelectionProblemAnswerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SelectionProblemAnswer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SelectionProblemAnswerMutation) ResetField(name string) error {
	switch name {
	case selectionproblemanswer.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case selectionproblemanswer.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case selectionproblemanswer.FieldIsCorrect:
		m.ResetIsCorrect()
		return nil
	case selectionproblemanswer.FieldSelectionProblemID:
		m.ResetSelectionProblemID()
		return nil
	case selectionproblemanswer.FieldStatement:
		m.ResetStatement()
		return nil
	}
	return fmt.Errorf("unknown SelectionProblemAnswer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SelectionProblemAnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.selection_problem != nil {
		edges = append(edges, selectionproblemanswer.EdgeSelectionProblem)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SelectionProblemAnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case selectionproblemanswer.EdgeSelectionProblem:
		if id := m.selection_problem; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SelectionProblemAnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SelectionProblemAnswerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SelectionProblemAnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedselection_problem {
		edges = append(edges, selectionproblemanswer.EdgeSelectionProblem)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SelectionProblemAnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case selectionproblemanswer.EdgeSelectionProblem:
		return m.clearedselection_problem
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SelectionProblemAnswerMutation) ClearEdge(name string) error {
	switch name {
	case selectionproblemanswer.EdgeSelectionProblem:
		m.ClearSelectionProblem()
		return nil
	}
	return fmt.Errorf("unknown SelectionProblemAnswer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SelectionProblemAnswerMutation) ResetEdge(name string) error {
	switch name {
	case selectionproblemanswer.EdgeSelectionProblem:
		m.ResetSelectionProblem()
		return nil
	}
	return fmt.Errorf("unknown SelectionProblemAnswer edge %s", name)
}

// TrueOrFalseProblemMutation represents an operation that mutates the TrueOrFalseProblem nodes in the graph.
type TrueOrFalseProblemMutation struct {
	config
	op                              Op
	typ                             string
	id                              *uuid.UUID
	created_at                      *time.Time
	updated_at                      *time.Time
	is_correct                      *bool
	statement                       *string
	clearedFields                   map[string]struct{}
	workbook                        *uuid.UUID
	clearedworkbook                 bool
	workbook_category               *uuid.UUID
	clearedworkbook_category        bool
	workbook_category_detail        *uuid.UUID
	clearedworkbook_category_detail bool
	done                            bool
	oldValue                        func(context.Context) (*TrueOrFalseProblem, error)
	predicates                      []predicate.TrueOrFalseProblem
}

var _ ent.Mutation = (*TrueOrFalseProblemMutation)(nil)

// trueorfalseproblemOption allows management of the mutation configuration using functional options.
type trueorfalseproblemOption func(*TrueOrFalseProblemMutation)

// newTrueOrFalseProblemMutation creates new mutation for the TrueOrFalseProblem entity.
func newTrueOrFalseProblemMutation(c config, op Op, opts ...trueorfalseproblemOption) *TrueOrFalseProblemMutation {
	m := &TrueOrFalseProblemMutation{
		config:        c,
		op:            op,
		typ:           TypeTrueOrFalseProblem,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTrueOrFalseProblemID sets the ID field of the mutation.
func withTrueOrFalseProblemID(id uuid.UUID) trueorfalseproblemOption {
	return func(m *TrueOrFalseProblemMutation) {
		var (
			err   error
			once  sync.Once
			value *TrueOrFalseProblem
		)
		m.oldValue = func(ctx context.Context) (*TrueOrFalseProblem, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().TrueOrFalseProblem.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTrueOrFalseProblem sets the old TrueOrFalseProblem of the mutation.
func withTrueOrFalseProblem(node *TrueOrFalseProblem) trueorfalseproblemOption {
	return func(m *TrueOrFalseProblemMutation) {
		m.oldValue = func(context.Context) (*TrueOrFalseProblem, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TrueOrFalseProblemMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TrueOrFalseProblemMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of TrueOrFalseProblem entities.
func (m *TrueOrFalseProblemMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TrueOrFalseProblemMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TrueOrFalseProblemMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().TrueOrFalseProblem.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *TrueOrFalseProblemMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TrueOrFalseProblemMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the TrueOrFalseProblem entity.
// If the TrueOrFalseProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrueOrFalseProblemMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TrueOrFalseProblemMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TrueOrFalseProblemMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TrueOrFalseProblemMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the TrueOrFalseProblem entity.
// If the TrueOrFalseProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrueOrFalseProblemMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TrueOrFalseProblemMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsCorrect sets the "is_correct" field.
func (m *TrueOrFalseProblemMutation) SetIsCorrect(b bool) {
	m.is_correct = &b
}

// IsCorrect returns the value of the "is_correct" field in the mutation.
func (m *TrueOrFalseProblemMutation) IsCorrect() (r bool, exists bool) {
	v := m.is_correct
	if v == nil {
		return
	}
	return *v, true
}

// OldIsCorrect returns the old "is_correct" field's value of the TrueOrFalseProblem entity.
// If the TrueOrFalseProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrueOrFalseProblemMutation) OldIsCorrect(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsCorrect is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsCorrect requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsCorrect: %w", err)
	}
	return oldValue.IsCorrect, nil
}

// ResetIsCorrect resets all changes to the "is_correct" field.
func (m *TrueOrFalseProblemMutation) ResetIsCorrect() {
	m.is_correct = nil
}

// SetStatement sets the "statement" field.
func (m *TrueOrFalseProblemMutation) SetStatement(s string) {
	m.statement = &s
}

// Statement returns the value of the "statement" field in the mutation.
func (m *TrueOrFalseProblemMutation) Statement() (r string, exists bool) {
	v := m.statement
	if v == nil {
		return
	}
	return *v, true
}

// OldStatement returns the old "statement" field's value of the TrueOrFalseProblem entity.
// If the TrueOrFalseProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrueOrFalseProblemMutation) OldStatement(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatement is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatement requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatement: %w", err)
	}
	return oldValue.Statement, nil
}

// ResetStatement resets all changes to the "statement" field.
func (m *TrueOrFalseProblemMutation) ResetStatement() {
	m.statement = nil
}

// SetWorkbookID sets the "workbook_id" field.
func (m *TrueOrFalseProblemMutation) SetWorkbookID(u uuid.UUID) {
	m.workbook = &u
}

// WorkbookID returns the value of the "workbook_id" field in the mutation.
func (m *TrueOrFalseProblemMutation) WorkbookID() (r uuid.UUID, exists bool) {
	v := m.workbook
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookID returns the old "workbook_id" field's value of the TrueOrFalseProblem entity.
// If the TrueOrFalseProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrueOrFalseProblemMutation) OldWorkbookID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookID: %w", err)
	}
	return oldValue.WorkbookID, nil
}

// ResetWorkbookID resets all changes to the "workbook_id" field.
func (m *TrueOrFalseProblemMutation) ResetWorkbookID() {
	m.workbook = nil
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (m *TrueOrFalseProblemMutation) SetWorkbookCategoryID(u uuid.UUID) {
	m.workbook_category = &u
}

// WorkbookCategoryID returns the value of the "workbook_category_id" field in the mutation.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryID() (r uuid.UUID, exists bool) {
	v := m.workbook_category
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookCategoryID returns the old "workbook_category_id" field's value of the TrueOrFalseProblem entity.
// If the TrueOrFalseProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrueOrFalseProblemMutation) OldWorkbookCategoryID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookCategoryID: %w", err)
	}
	return oldValue.WorkbookCategoryID, nil
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (m *TrueOrFalseProblemMutation) ClearWorkbookCategoryID() {
	m.workbook_category = nil
	m.clearedFields[trueorfalseproblem.FieldWorkbookCategoryID] = struct{}{}
}

// WorkbookCategoryIDCleared returns if the "workbook_category_id" field was cleared in this mutation.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryIDCleared() bool {
	_, ok := m.clearedFields[trueorfalseproblem.FieldWorkbookCategoryID]
	return ok
}

// ResetWorkbookCategoryID resets all changes to the "workbook_category_id" field.
func (m *TrueOrFalseProblemMutation) ResetWorkbookCategoryID() {
	m.workbook_category = nil
	delete(m.clearedFields, trueorfalseproblem.FieldWorkbookCategoryID)
}

// SetWorkbookCategoryDetailID sets the "workbook_category_detail_id" field.
func (m *TrueOrFalseProblemMutation) SetWorkbookCategoryDetailID(u uuid.UUID) {
	m.workbook_category_detail = &u
}

// WorkbookCategoryDetailID returns the value of the "workbook_category_detail_id" field in the mutation.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryDetailID() (r uuid.UUID, exists bool) {
	v := m.workbook_category_detail
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookCategoryDetailID returns the old "workbook_category_detail_id" field's value of the TrueOrFalseProblem entity.
// If the TrueOrFalseProblem object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TrueOrFalseProblemMutation) OldWorkbookCategoryDetailID(ctx context.Context) (v *uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookCategoryDetailID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookCategoryDetailID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookCategoryDetailID: %w", err)
	}
	return oldValue.WorkbookCategoryDetailID, nil
}

// ClearWorkbookCategoryDetailID clears the value of the "workbook_category_detail_id" field.
func (m *TrueOrFalseProblemMutation) ClearWorkbookCategoryDetailID() {
	m.workbook_category_detail = nil
	m.clearedFields[trueorfalseproblem.FieldWorkbookCategoryDetailID] = struct{}{}
}

// WorkbookCategoryDetailIDCleared returns if the "workbook_category_detail_id" field was cleared in this mutation.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryDetailIDCleared() bool {
	_, ok := m.clearedFields[trueorfalseproblem.FieldWorkbookCategoryDetailID]
	return ok
}

// ResetWorkbookCategoryDetailID resets all changes to the "workbook_category_detail_id" field.
func (m *TrueOrFalseProblemMutation) ResetWorkbookCategoryDetailID() {
	m.workbook_category_detail = nil
	delete(m.clearedFields, trueorfalseproblem.FieldWorkbookCategoryDetailID)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (m *TrueOrFalseProblemMutation) ClearWorkbook() {
	m.clearedworkbook = true
	m.clearedFields[trueorfalseproblem.FieldWorkbookID] = struct{}{}
}

// WorkbookCleared reports if the "workbook" edge to the Workbook entity was cleared.
func (m *TrueOrFalseProblemMutation) WorkbookCleared() bool {
	return m.clearedworkbook
}

// WorkbookIDs returns the "workbook" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookID instead. It exists only for internal usage by the builders.
func (m *TrueOrFalseProblemMutation) WorkbookIDs() (ids []uuid.UUID) {
	if id := m.workbook; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbook resets all changes to the "workbook" edge.
func (m *TrueOrFalseProblemMutation) ResetWorkbook() {
	m.workbook = nil
	m.clearedworkbook = false
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (m *TrueOrFalseProblemMutation) ClearWorkbookCategory() {
	m.clearedworkbook_category = true
	m.clearedFields[trueorfalseproblem.FieldWorkbookCategoryID] = struct{}{}
}

// WorkbookCategoryCleared reports if the "workbook_category" edge to the WorkbookCategory entity was cleared.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryCleared() bool {
	return m.WorkbookCategoryIDCleared() || m.clearedworkbook_category
}

// WorkbookCategoryIDs returns the "workbook_category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookCategoryID instead. It exists only for internal usage by the builders.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryIDs() (ids []uuid.UUID) {
	if id := m.workbook_category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbookCategory resets all changes to the "workbook_category" edge.
func (m *TrueOrFalseProblemMutation) ResetWorkbookCategory() {
	m.workbook_category = nil
	m.clearedworkbook_category = false
}

// ClearWorkbookCategoryDetail clears the "workbook_category_detail" edge to the WorkbookCategoryDetail entity.
func (m *TrueOrFalseProblemMutation) ClearWorkbookCategoryDetail() {
	m.clearedworkbook_category_detail = true
	m.clearedFields[trueorfalseproblem.FieldWorkbookCategoryDetailID] = struct{}{}
}

// WorkbookCategoryDetailCleared reports if the "workbook_category_detail" edge to the WorkbookCategoryDetail entity was cleared.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryDetailCleared() bool {
	return m.WorkbookCategoryDetailIDCleared() || m.clearedworkbook_category_detail
}

// WorkbookCategoryDetailIDs returns the "workbook_category_detail" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookCategoryDetailID instead. It exists only for internal usage by the builders.
func (m *TrueOrFalseProblemMutation) WorkbookCategoryDetailIDs() (ids []uuid.UUID) {
	if id := m.workbook_category_detail; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbookCategoryDetail resets all changes to the "workbook_category_detail" edge.
func (m *TrueOrFalseProblemMutation) ResetWorkbookCategoryDetail() {
	m.workbook_category_detail = nil
	m.clearedworkbook_category_detail = false
}

// Where appends a list predicates to the TrueOrFalseProblemMutation builder.
func (m *TrueOrFalseProblemMutation) Where(ps ...predicate.TrueOrFalseProblem) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TrueOrFalseProblemMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TrueOrFalseProblemMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.TrueOrFalseProblem, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TrueOrFalseProblemMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TrueOrFalseProblemMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (TrueOrFalseProblem).
func (m *TrueOrFalseProblemMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TrueOrFalseProblemMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, trueorfalseproblem.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, trueorfalseproblem.FieldUpdatedAt)
	}
	if m.is_correct != nil {
		fields = append(fields, trueorfalseproblem.FieldIsCorrect)
	}
	if m.statement != nil {
		fields = append(fields, trueorfalseproblem.FieldStatement)
	}
	if m.workbook != nil {
		fields = append(fields, trueorfalseproblem.FieldWorkbookID)
	}
	if m.workbook_category != nil {
		fields = append(fields, trueorfalseproblem.FieldWorkbookCategoryID)
	}
	if m.workbook_category_detail != nil {
		fields = append(fields, trueorfalseproblem.FieldWorkbookCategoryDetailID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TrueOrFalseProblemMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case trueorfalseproblem.FieldCreatedAt:
		return m.CreatedAt()
	case trueorfalseproblem.FieldUpdatedAt:
		return m.UpdatedAt()
	case trueorfalseproblem.FieldIsCorrect:
		return m.IsCorrect()
	case trueorfalseproblem.FieldStatement:
		return m.Statement()
	case trueorfalseproblem.FieldWorkbookID:
		return m.WorkbookID()
	case trueorfalseproblem.FieldWorkbookCategoryID:
		return m.WorkbookCategoryID()
	case trueorfalseproblem.FieldWorkbookCategoryDetailID:
		return m.WorkbookCategoryDetailID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TrueOrFalseProblemMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case trueorfalseproblem.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case trueorfalseproblem.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case trueorfalseproblem.FieldIsCorrect:
		return m.OldIsCorrect(ctx)
	case trueorfalseproblem.FieldStatement:
		return m.OldStatement(ctx)
	case trueorfalseproblem.FieldWorkbookID:
		return m.OldWorkbookID(ctx)
	case trueorfalseproblem.FieldWorkbookCategoryID:
		return m.OldWorkbookCategoryID(ctx)
	case trueorfalseproblem.FieldWorkbookCategoryDetailID:
		return m.OldWorkbookCategoryDetailID(ctx)
	}
	return nil, fmt.Errorf("unknown TrueOrFalseProblem field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrueOrFalseProblemMutation) SetField(name string, value ent.Value) error {
	switch name {
	case trueorfalseproblem.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case trueorfalseproblem.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case trueorfalseproblem.FieldIsCorrect:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsCorrect(v)
		return nil
	case trueorfalseproblem.FieldStatement:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatement(v)
		return nil
	case trueorfalseproblem.FieldWorkbookID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookID(v)
		return nil
	case trueorfalseproblem.FieldWorkbookCategoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookCategoryID(v)
		return nil
	case trueorfalseproblem.FieldWorkbookCategoryDetailID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookCategoryDetailID(v)
		return nil
	}
	return fmt.Errorf("unknown TrueOrFalseProblem field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TrueOrFalseProblemMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TrueOrFalseProblemMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TrueOrFalseProblemMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown TrueOrFalseProblem numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TrueOrFalseProblemMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(trueorfalseproblem.FieldWorkbookCategoryID) {
		fields = append(fields, trueorfalseproblem.FieldWorkbookCategoryID)
	}
	if m.FieldCleared(trueorfalseproblem.FieldWorkbookCategoryDetailID) {
		fields = append(fields, trueorfalseproblem.FieldWorkbookCategoryDetailID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TrueOrFalseProblemMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TrueOrFalseProblemMutation) ClearField(name string) error {
	switch name {
	case trueorfalseproblem.FieldWorkbookCategoryID:
		m.ClearWorkbookCategoryID()
		return nil
	case trueorfalseproblem.FieldWorkbookCategoryDetailID:
		m.ClearWorkbookCategoryDetailID()
		return nil
	}
	return fmt.Errorf("unknown TrueOrFalseProblem nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TrueOrFalseProblemMutation) ResetField(name string) error {
	switch name {
	case trueorfalseproblem.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case trueorfalseproblem.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case trueorfalseproblem.FieldIsCorrect:
		m.ResetIsCorrect()
		return nil
	case trueorfalseproblem.FieldStatement:
		m.ResetStatement()
		return nil
	case trueorfalseproblem.FieldWorkbookID:
		m.ResetWorkbookID()
		return nil
	case trueorfalseproblem.FieldWorkbookCategoryID:
		m.ResetWorkbookCategoryID()
		return nil
	case trueorfalseproblem.FieldWorkbookCategoryDetailID:
		m.ResetWorkbookCategoryDetailID()
		return nil
	}
	return fmt.Errorf("unknown TrueOrFalseProblem field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TrueOrFalseProblemMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.workbook != nil {
		edges = append(edges, trueorfalseproblem.EdgeWorkbook)
	}
	if m.workbook_category != nil {
		edges = append(edges, trueorfalseproblem.EdgeWorkbookCategory)
	}
	if m.workbook_category_detail != nil {
		edges = append(edges, trueorfalseproblem.EdgeWorkbookCategoryDetail)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TrueOrFalseProblemMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case trueorfalseproblem.EdgeWorkbook:
		if id := m.workbook; id != nil {
			return []ent.Value{*id}
		}
	case trueorfalseproblem.EdgeWorkbookCategory:
		if id := m.workbook_category; id != nil {
			return []ent.Value{*id}
		}
	case trueorfalseproblem.EdgeWorkbookCategoryDetail:
		if id := m.workbook_category_detail; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TrueOrFalseProblemMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TrueOrFalseProblemMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TrueOrFalseProblemMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedworkbook {
		edges = append(edges, trueorfalseproblem.EdgeWorkbook)
	}
	if m.clearedworkbook_category {
		edges = append(edges, trueorfalseproblem.EdgeWorkbookCategory)
	}
	if m.clearedworkbook_category_detail {
		edges = append(edges, trueorfalseproblem.EdgeWorkbookCategoryDetail)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TrueOrFalseProblemMutation) EdgeCleared(name string) bool {
	switch name {
	case trueorfalseproblem.EdgeWorkbook:
		return m.clearedworkbook
	case trueorfalseproblem.EdgeWorkbookCategory:
		return m.clearedworkbook_category
	case trueorfalseproblem.EdgeWorkbookCategoryDetail:
		return m.clearedworkbook_category_detail
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TrueOrFalseProblemMutation) ClearEdge(name string) error {
	switch name {
	case trueorfalseproblem.EdgeWorkbook:
		m.ClearWorkbook()
		return nil
	case trueorfalseproblem.EdgeWorkbookCategory:
		m.ClearWorkbookCategory()
		return nil
	case trueorfalseproblem.EdgeWorkbookCategoryDetail:
		m.ClearWorkbookCategoryDetail()
		return nil
	}
	return fmt.Errorf("unknown TrueOrFalseProblem unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TrueOrFalseProblemMutation) ResetEdge(name string) error {
	switch name {
	case trueorfalseproblem.EdgeWorkbook:
		m.ResetWorkbook()
		return nil
	case trueorfalseproblem.EdgeWorkbookCategory:
		m.ResetWorkbookCategory()
		return nil
	case trueorfalseproblem.EdgeWorkbookCategoryDetail:
		m.ResetWorkbookCategoryDetail()
		return nil
	}
	return fmt.Errorf("unknown TrueOrFalseProblem edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *uuid.UUID
	created_at              *time.Time
	updated_at              *time.Time
	email                   *string
	name                    *string
	nick_name               *string
	password                *string
	clearedFields           map[string]struct{}
	articles                map[uuid.UUID]struct{}
	removedarticles         map[uuid.UUID]struct{}
	clearedarticles         bool
	workbook_members        map[uuid.UUID]struct{}
	removedworkbook_members map[uuid.UUID]struct{}
	clearedworkbook_members bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetNickName sets the "nick_name" field.
func (m *UserMutation) SetNickName(s string) {
	m.nick_name = &s
}

// NickName returns the value of the "nick_name" field in the mutation.
func (m *UserMutation) NickName() (r string, exists bool) {
	v := m.nick_name
	if v == nil {
		return
	}
	return *v, true
}

// OldNickName returns the old "nick_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldNickName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickName: %w", err)
	}
	return oldValue.NickName, nil
}

// ResetNickName resets all changes to the "nick_name" field.
func (m *UserMutation) ResetNickName() {
	m.nick_name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// AddArticleIDs adds the "articles" edge to the Article entity by ids.
func (m *UserMutation) AddArticleIDs(ids ...uuid.UUID) {
	if m.articles == nil {
		m.articles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.articles[ids[i]] = struct{}{}
	}
}

// ClearArticles clears the "articles" edge to the Article entity.
func (m *UserMutation) ClearArticles() {
	m.clearedarticles = true
}

// ArticlesCleared reports if the "articles" edge to the Article entity was cleared.
func (m *UserMutation) ArticlesCleared() bool {
	return m.clearedarticles
}

// RemoveArticleIDs removes the "articles" edge to the Article entity by IDs.
func (m *UserMutation) RemoveArticleIDs(ids ...uuid.UUID) {
	if m.removedarticles == nil {
		m.removedarticles = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.articles, ids[i])
		m.removedarticles[ids[i]] = struct{}{}
	}
}

// RemovedArticles returns the removed IDs of the "articles" edge to the Article entity.
func (m *UserMutation) RemovedArticlesIDs() (ids []uuid.UUID) {
	for id := range m.removedarticles {
		ids = append(ids, id)
	}
	return
}

// ArticlesIDs returns the "articles" edge IDs in the mutation.
func (m *UserMutation) ArticlesIDs() (ids []uuid.UUID) {
	for id := range m.articles {
		ids = append(ids, id)
	}
	return
}

// ResetArticles resets all changes to the "articles" edge.
func (m *UserMutation) ResetArticles() {
	m.articles = nil
	m.clearedarticles = false
	m.removedarticles = nil
}

// AddWorkbookMemberIDs adds the "workbook_members" edge to the WorkbookMember entity by ids.
func (m *UserMutation) AddWorkbookMemberIDs(ids ...uuid.UUID) {
	if m.workbook_members == nil {
		m.workbook_members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workbook_members[ids[i]] = struct{}{}
	}
}

// ClearWorkbookMembers clears the "workbook_members" edge to the WorkbookMember entity.
func (m *UserMutation) ClearWorkbookMembers() {
	m.clearedworkbook_members = true
}

// WorkbookMembersCleared reports if the "workbook_members" edge to the WorkbookMember entity was cleared.
func (m *UserMutation) WorkbookMembersCleared() bool {
	return m.clearedworkbook_members
}

// RemoveWorkbookMemberIDs removes the "workbook_members" edge to the WorkbookMember entity by IDs.
func (m *UserMutation) RemoveWorkbookMemberIDs(ids ...uuid.UUID) {
	if m.removedworkbook_members == nil {
		m.removedworkbook_members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workbook_members, ids[i])
		m.removedworkbook_members[ids[i]] = struct{}{}
	}
}

// RemovedWorkbookMembers returns the removed IDs of the "workbook_members" edge to the WorkbookMember entity.
func (m *UserMutation) RemovedWorkbookMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedworkbook_members {
		ids = append(ids, id)
	}
	return
}

// WorkbookMembersIDs returns the "workbook_members" edge IDs in the mutation.
func (m *UserMutation) WorkbookMembersIDs() (ids []uuid.UUID) {
	for id := range m.workbook_members {
		ids = append(ids, id)
	}
	return
}

// ResetWorkbookMembers resets all changes to the "workbook_members" edge.
func (m *UserMutation) ResetWorkbookMembers() {
	m.workbook_members = nil
	m.clearedworkbook_members = false
	m.removedworkbook_members = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.nick_name != nil {
		fields = append(fields, user.FieldNickName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldEmail:
		return m.Email()
	case user.FieldName:
		return m.Name()
	case user.FieldNickName:
		return m.NickName()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldNickName:
		return m.OldNickName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldNickName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldNickName:
		m.ResetNickName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.articles != nil {
		edges = append(edges, user.EdgeArticles)
	}
	if m.workbook_members != nil {
		edges = append(edges, user.EdgeWorkbookMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.articles))
		for id := range m.articles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWorkbookMembers:
		ids := make([]ent.Value, 0, len(m.workbook_members))
		for id := range m.workbook_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedarticles != nil {
		edges = append(edges, user.EdgeArticles)
	}
	if m.removedworkbook_members != nil {
		edges = append(edges, user.EdgeWorkbookMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeArticles:
		ids := make([]ent.Value, 0, len(m.removedarticles))
		for id := range m.removedarticles {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWorkbookMembers:
		ids := make([]ent.Value, 0, len(m.removedworkbook_members))
		for id := range m.removedworkbook_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedarticles {
		edges = append(edges, user.EdgeArticles)
	}
	if m.clearedworkbook_members {
		edges = append(edges, user.EdgeWorkbookMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeArticles:
		return m.clearedarticles
	case user.EdgeWorkbookMembers:
		return m.clearedworkbook_members
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeArticles:
		m.ResetArticles()
		return nil
	case user.EdgeWorkbookMembers:
		m.ResetWorkbookMembers()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// WorkbookMutation represents an operation that mutates the Workbook nodes in the graph.
type WorkbookMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	created_at                    *time.Time
	updated_at                    *time.Time
	user_id                       *uuid.UUID
	description                   *string
	is_public                     *bool
	title                         *string
	clearedFields                 map[string]struct{}
	description_problems          map[uuid.UUID]struct{}
	removeddescription_problems   map[uuid.UUID]struct{}
	cleareddescription_problems   bool
	selection_problems            map[uuid.UUID]struct{}
	removedselection_problems     map[uuid.UUID]struct{}
	clearedselection_problems     bool
	true_or_false_problems        map[uuid.UUID]struct{}
	removedtrue_or_false_problems map[uuid.UUID]struct{}
	clearedtrue_or_false_problems bool
	workbook_categories           map[uuid.UUID]struct{}
	removedworkbook_categories    map[uuid.UUID]struct{}
	clearedworkbook_categories    bool
	workbook_members              map[uuid.UUID]struct{}
	removedworkbook_members       map[uuid.UUID]struct{}
	clearedworkbook_members       bool
	done                          bool
	oldValue                      func(context.Context) (*Workbook, error)
	predicates                    []predicate.Workbook
}

var _ ent.Mutation = (*WorkbookMutation)(nil)

// workbookOption allows management of the mutation configuration using functional options.
type workbookOption func(*WorkbookMutation)

// newWorkbookMutation creates new mutation for the Workbook entity.
func newWorkbookMutation(c config, op Op, opts ...workbookOption) *WorkbookMutation {
	m := &WorkbookMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkbook,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkbookID sets the ID field of the mutation.
func withWorkbookID(id uuid.UUID) workbookOption {
	return func(m *WorkbookMutation) {
		var (
			err   error
			once  sync.Once
			value *Workbook
		)
		m.oldValue = func(ctx context.Context) (*Workbook, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Workbook.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkbook sets the old Workbook of the mutation.
func withWorkbook(node *Workbook) workbookOption {
	return func(m *WorkbookMutation) {
		m.oldValue = func(context.Context) (*Workbook, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkbookMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkbookMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Workbook entities.
func (m *WorkbookMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkbookMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkbookMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Workbook.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkbookMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkbookMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Workbook entity.
// If the Workbook object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkbookMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkbookMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkbookMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Workbook entity.
// If the Workbook object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkbookMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUserID sets the "user_id" field.
func (m *WorkbookMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *WorkbookMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Workbook entity.
// If the Workbook object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *WorkbookMutation) ResetUserID() {
	m.user_id = nil
}

// SetDescription sets the "description" field.
func (m *WorkbookMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WorkbookMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Workbook entity.
// If the Workbook object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMutation) OldDescription(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *WorkbookMutation) ResetDescription() {
	m.description = nil
}

// SetIsPublic sets the "is_public" field.
func (m *WorkbookMutation) SetIsPublic(b bool) {
	m.is_public = &b
}

// IsPublic returns the value of the "is_public" field in the mutation.
func (m *WorkbookMutation) IsPublic() (r bool, exists bool) {
	v := m.is_public
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPublic returns the old "is_public" field's value of the Workbook entity.
// If the Workbook object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMutation) OldIsPublic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPublic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPublic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPublic: %w", err)
	}
	return oldValue.IsPublic, nil
}

// ResetIsPublic resets all changes to the "is_public" field.
func (m *WorkbookMutation) ResetIsPublic() {
	m.is_public = nil
}

// SetTitle sets the "title" field.
func (m *WorkbookMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *WorkbookMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Workbook entity.
// If the Workbook object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *WorkbookMutation) ResetTitle() {
	m.title = nil
}

// AddDescriptionProblemIDs adds the "description_problems" edge to the DescriptionProblem entity by ids.
func (m *WorkbookMutation) AddDescriptionProblemIDs(ids ...uuid.UUID) {
	if m.description_problems == nil {
		m.description_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.description_problems[ids[i]] = struct{}{}
	}
}

// ClearDescriptionProblems clears the "description_problems" edge to the DescriptionProblem entity.
func (m *WorkbookMutation) ClearDescriptionProblems() {
	m.cleareddescription_problems = true
}

// DescriptionProblemsCleared reports if the "description_problems" edge to the DescriptionProblem entity was cleared.
func (m *WorkbookMutation) DescriptionProblemsCleared() bool {
	return m.cleareddescription_problems
}

// RemoveDescriptionProblemIDs removes the "description_problems" edge to the DescriptionProblem entity by IDs.
func (m *WorkbookMutation) RemoveDescriptionProblemIDs(ids ...uuid.UUID) {
	if m.removeddescription_problems == nil {
		m.removeddescription_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.description_problems, ids[i])
		m.removeddescription_problems[ids[i]] = struct{}{}
	}
}

// RemovedDescriptionProblems returns the removed IDs of the "description_problems" edge to the DescriptionProblem entity.
func (m *WorkbookMutation) RemovedDescriptionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removeddescription_problems {
		ids = append(ids, id)
	}
	return
}

// DescriptionProblemsIDs returns the "description_problems" edge IDs in the mutation.
func (m *WorkbookMutation) DescriptionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.description_problems {
		ids = append(ids, id)
	}
	return
}

// ResetDescriptionProblems resets all changes to the "description_problems" edge.
func (m *WorkbookMutation) ResetDescriptionProblems() {
	m.description_problems = nil
	m.cleareddescription_problems = false
	m.removeddescription_problems = nil
}

// AddSelectionProblemIDs adds the "selection_problems" edge to the SelectionProblem entity by ids.
func (m *WorkbookMutation) AddSelectionProblemIDs(ids ...uuid.UUID) {
	if m.selection_problems == nil {
		m.selection_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.selection_problems[ids[i]] = struct{}{}
	}
}

// ClearSelectionProblems clears the "selection_problems" edge to the SelectionProblem entity.
func (m *WorkbookMutation) ClearSelectionProblems() {
	m.clearedselection_problems = true
}

// SelectionProblemsCleared reports if the "selection_problems" edge to the SelectionProblem entity was cleared.
func (m *WorkbookMutation) SelectionProblemsCleared() bool {
	return m.clearedselection_problems
}

// RemoveSelectionProblemIDs removes the "selection_problems" edge to the SelectionProblem entity by IDs.
func (m *WorkbookMutation) RemoveSelectionProblemIDs(ids ...uuid.UUID) {
	if m.removedselection_problems == nil {
		m.removedselection_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.selection_problems, ids[i])
		m.removedselection_problems[ids[i]] = struct{}{}
	}
}

// RemovedSelectionProblems returns the removed IDs of the "selection_problems" edge to the SelectionProblem entity.
func (m *WorkbookMutation) RemovedSelectionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removedselection_problems {
		ids = append(ids, id)
	}
	return
}

// SelectionProblemsIDs returns the "selection_problems" edge IDs in the mutation.
func (m *WorkbookMutation) SelectionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.selection_problems {
		ids = append(ids, id)
	}
	return
}

// ResetSelectionProblems resets all changes to the "selection_problems" edge.
func (m *WorkbookMutation) ResetSelectionProblems() {
	m.selection_problems = nil
	m.clearedselection_problems = false
	m.removedselection_problems = nil
}

// AddTrueOrFalseProblemIDs adds the "true_or_false_problems" edge to the TrueOrFalseProblem entity by ids.
func (m *WorkbookMutation) AddTrueOrFalseProblemIDs(ids ...uuid.UUID) {
	if m.true_or_false_problems == nil {
		m.true_or_false_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.true_or_false_problems[ids[i]] = struct{}{}
	}
}

// ClearTrueOrFalseProblems clears the "true_or_false_problems" edge to the TrueOrFalseProblem entity.
func (m *WorkbookMutation) ClearTrueOrFalseProblems() {
	m.clearedtrue_or_false_problems = true
}

// TrueOrFalseProblemsCleared reports if the "true_or_false_problems" edge to the TrueOrFalseProblem entity was cleared.
func (m *WorkbookMutation) TrueOrFalseProblemsCleared() bool {
	return m.clearedtrue_or_false_problems
}

// RemoveTrueOrFalseProblemIDs removes the "true_or_false_problems" edge to the TrueOrFalseProblem entity by IDs.
func (m *WorkbookMutation) RemoveTrueOrFalseProblemIDs(ids ...uuid.UUID) {
	if m.removedtrue_or_false_problems == nil {
		m.removedtrue_or_false_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.true_or_false_problems, ids[i])
		m.removedtrue_or_false_problems[ids[i]] = struct{}{}
	}
}

// RemovedTrueOrFalseProblems returns the removed IDs of the "true_or_false_problems" edge to the TrueOrFalseProblem entity.
func (m *WorkbookMutation) RemovedTrueOrFalseProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removedtrue_or_false_problems {
		ids = append(ids, id)
	}
	return
}

// TrueOrFalseProblemsIDs returns the "true_or_false_problems" edge IDs in the mutation.
func (m *WorkbookMutation) TrueOrFalseProblemsIDs() (ids []uuid.UUID) {
	for id := range m.true_or_false_problems {
		ids = append(ids, id)
	}
	return
}

// ResetTrueOrFalseProblems resets all changes to the "true_or_false_problems" edge.
func (m *WorkbookMutation) ResetTrueOrFalseProblems() {
	m.true_or_false_problems = nil
	m.clearedtrue_or_false_problems = false
	m.removedtrue_or_false_problems = nil
}

// AddWorkbookCategoryIDs adds the "workbook_categories" edge to the WorkbookCategory entity by ids.
func (m *WorkbookMutation) AddWorkbookCategoryIDs(ids ...uuid.UUID) {
	if m.workbook_categories == nil {
		m.workbook_categories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workbook_categories[ids[i]] = struct{}{}
	}
}

// ClearWorkbookCategories clears the "workbook_categories" edge to the WorkbookCategory entity.
func (m *WorkbookMutation) ClearWorkbookCategories() {
	m.clearedworkbook_categories = true
}

// WorkbookCategoriesCleared reports if the "workbook_categories" edge to the WorkbookCategory entity was cleared.
func (m *WorkbookMutation) WorkbookCategoriesCleared() bool {
	return m.clearedworkbook_categories
}

// RemoveWorkbookCategoryIDs removes the "workbook_categories" edge to the WorkbookCategory entity by IDs.
func (m *WorkbookMutation) RemoveWorkbookCategoryIDs(ids ...uuid.UUID) {
	if m.removedworkbook_categories == nil {
		m.removedworkbook_categories = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workbook_categories, ids[i])
		m.removedworkbook_categories[ids[i]] = struct{}{}
	}
}

// RemovedWorkbookCategories returns the removed IDs of the "workbook_categories" edge to the WorkbookCategory entity.
func (m *WorkbookMutation) RemovedWorkbookCategoriesIDs() (ids []uuid.UUID) {
	for id := range m.removedworkbook_categories {
		ids = append(ids, id)
	}
	return
}

// WorkbookCategoriesIDs returns the "workbook_categories" edge IDs in the mutation.
func (m *WorkbookMutation) WorkbookCategoriesIDs() (ids []uuid.UUID) {
	for id := range m.workbook_categories {
		ids = append(ids, id)
	}
	return
}

// ResetWorkbookCategories resets all changes to the "workbook_categories" edge.
func (m *WorkbookMutation) ResetWorkbookCategories() {
	m.workbook_categories = nil
	m.clearedworkbook_categories = false
	m.removedworkbook_categories = nil
}

// AddWorkbookMemberIDs adds the "workbook_members" edge to the WorkbookMember entity by ids.
func (m *WorkbookMutation) AddWorkbookMemberIDs(ids ...uuid.UUID) {
	if m.workbook_members == nil {
		m.workbook_members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workbook_members[ids[i]] = struct{}{}
	}
}

// ClearWorkbookMembers clears the "workbook_members" edge to the WorkbookMember entity.
func (m *WorkbookMutation) ClearWorkbookMembers() {
	m.clearedworkbook_members = true
}

// WorkbookMembersCleared reports if the "workbook_members" edge to the WorkbookMember entity was cleared.
func (m *WorkbookMutation) WorkbookMembersCleared() bool {
	return m.clearedworkbook_members
}

// RemoveWorkbookMemberIDs removes the "workbook_members" edge to the WorkbookMember entity by IDs.
func (m *WorkbookMutation) RemoveWorkbookMemberIDs(ids ...uuid.UUID) {
	if m.removedworkbook_members == nil {
		m.removedworkbook_members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workbook_members, ids[i])
		m.removedworkbook_members[ids[i]] = struct{}{}
	}
}

// RemovedWorkbookMembers returns the removed IDs of the "workbook_members" edge to the WorkbookMember entity.
func (m *WorkbookMutation) RemovedWorkbookMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedworkbook_members {
		ids = append(ids, id)
	}
	return
}

// WorkbookMembersIDs returns the "workbook_members" edge IDs in the mutation.
func (m *WorkbookMutation) WorkbookMembersIDs() (ids []uuid.UUID) {
	for id := range m.workbook_members {
		ids = append(ids, id)
	}
	return
}

// ResetWorkbookMembers resets all changes to the "workbook_members" edge.
func (m *WorkbookMutation) ResetWorkbookMembers() {
	m.workbook_members = nil
	m.clearedworkbook_members = false
	m.removedworkbook_members = nil
}

// Where appends a list predicates to the WorkbookMutation builder.
func (m *WorkbookMutation) Where(ps ...predicate.Workbook) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkbookMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkbookMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Workbook, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkbookMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkbookMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Workbook).
func (m *WorkbookMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkbookMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, workbook.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workbook.FieldUpdatedAt)
	}
	if m.user_id != nil {
		fields = append(fields, workbook.FieldUserID)
	}
	if m.description != nil {
		fields = append(fields, workbook.FieldDescription)
	}
	if m.is_public != nil {
		fields = append(fields, workbook.FieldIsPublic)
	}
	if m.title != nil {
		fields = append(fields, workbook.FieldTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkbookMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workbook.FieldCreatedAt:
		return m.CreatedAt()
	case workbook.FieldUpdatedAt:
		return m.UpdatedAt()
	case workbook.FieldUserID:
		return m.UserID()
	case workbook.FieldDescription:
		return m.Description()
	case workbook.FieldIsPublic:
		return m.IsPublic()
	case workbook.FieldTitle:
		return m.Title()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkbookMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workbook.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workbook.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case workbook.FieldUserID:
		return m.OldUserID(ctx)
	case workbook.FieldDescription:
		return m.OldDescription(ctx)
	case workbook.FieldIsPublic:
		return m.OldIsPublic(ctx)
	case workbook.FieldTitle:
		return m.OldTitle(ctx)
	}
	return nil, fmt.Errorf("unknown Workbook field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workbook.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workbook.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case workbook.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case workbook.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case workbook.FieldIsPublic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPublic(v)
		return nil
	case workbook.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	}
	return fmt.Errorf("unknown Workbook field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkbookMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkbookMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Workbook numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkbookMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkbookMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkbookMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Workbook nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkbookMutation) ResetField(name string) error {
	switch name {
	case workbook.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workbook.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case workbook.FieldUserID:
		m.ResetUserID()
		return nil
	case workbook.FieldDescription:
		m.ResetDescription()
		return nil
	case workbook.FieldIsPublic:
		m.ResetIsPublic()
		return nil
	case workbook.FieldTitle:
		m.ResetTitle()
		return nil
	}
	return fmt.Errorf("unknown Workbook field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkbookMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.description_problems != nil {
		edges = append(edges, workbook.EdgeDescriptionProblems)
	}
	if m.selection_problems != nil {
		edges = append(edges, workbook.EdgeSelectionProblems)
	}
	if m.true_or_false_problems != nil {
		edges = append(edges, workbook.EdgeTrueOrFalseProblems)
	}
	if m.workbook_categories != nil {
		edges = append(edges, workbook.EdgeWorkbookCategories)
	}
	if m.workbook_members != nil {
		edges = append(edges, workbook.EdgeWorkbookMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkbookMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workbook.EdgeDescriptionProblems:
		ids := make([]ent.Value, 0, len(m.description_problems))
		for id := range m.description_problems {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeSelectionProblems:
		ids := make([]ent.Value, 0, len(m.selection_problems))
		for id := range m.selection_problems {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeTrueOrFalseProblems:
		ids := make([]ent.Value, 0, len(m.true_or_false_problems))
		for id := range m.true_or_false_problems {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeWorkbookCategories:
		ids := make([]ent.Value, 0, len(m.workbook_categories))
		for id := range m.workbook_categories {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeWorkbookMembers:
		ids := make([]ent.Value, 0, len(m.workbook_members))
		for id := range m.workbook_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkbookMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removeddescription_problems != nil {
		edges = append(edges, workbook.EdgeDescriptionProblems)
	}
	if m.removedselection_problems != nil {
		edges = append(edges, workbook.EdgeSelectionProblems)
	}
	if m.removedtrue_or_false_problems != nil {
		edges = append(edges, workbook.EdgeTrueOrFalseProblems)
	}
	if m.removedworkbook_categories != nil {
		edges = append(edges, workbook.EdgeWorkbookCategories)
	}
	if m.removedworkbook_members != nil {
		edges = append(edges, workbook.EdgeWorkbookMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkbookMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workbook.EdgeDescriptionProblems:
		ids := make([]ent.Value, 0, len(m.removeddescription_problems))
		for id := range m.removeddescription_problems {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeSelectionProblems:
		ids := make([]ent.Value, 0, len(m.removedselection_problems))
		for id := range m.removedselection_problems {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeTrueOrFalseProblems:
		ids := make([]ent.Value, 0, len(m.removedtrue_or_false_problems))
		for id := range m.removedtrue_or_false_problems {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeWorkbookCategories:
		ids := make([]ent.Value, 0, len(m.removedworkbook_categories))
		for id := range m.removedworkbook_categories {
			ids = append(ids, id)
		}
		return ids
	case workbook.EdgeWorkbookMembers:
		ids := make([]ent.Value, 0, len(m.removedworkbook_members))
		for id := range m.removedworkbook_members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkbookMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareddescription_problems {
		edges = append(edges, workbook.EdgeDescriptionProblems)
	}
	if m.clearedselection_problems {
		edges = append(edges, workbook.EdgeSelectionProblems)
	}
	if m.clearedtrue_or_false_problems {
		edges = append(edges, workbook.EdgeTrueOrFalseProblems)
	}
	if m.clearedworkbook_categories {
		edges = append(edges, workbook.EdgeWorkbookCategories)
	}
	if m.clearedworkbook_members {
		edges = append(edges, workbook.EdgeWorkbookMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkbookMutation) EdgeCleared(name string) bool {
	switch name {
	case workbook.EdgeDescriptionProblems:
		return m.cleareddescription_problems
	case workbook.EdgeSelectionProblems:
		return m.clearedselection_problems
	case workbook.EdgeTrueOrFalseProblems:
		return m.clearedtrue_or_false_problems
	case workbook.EdgeWorkbookCategories:
		return m.clearedworkbook_categories
	case workbook.EdgeWorkbookMembers:
		return m.clearedworkbook_members
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkbookMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Workbook unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkbookMutation) ResetEdge(name string) error {
	switch name {
	case workbook.EdgeDescriptionProblems:
		m.ResetDescriptionProblems()
		return nil
	case workbook.EdgeSelectionProblems:
		m.ResetSelectionProblems()
		return nil
	case workbook.EdgeTrueOrFalseProblems:
		m.ResetTrueOrFalseProblems()
		return nil
	case workbook.EdgeWorkbookCategories:
		m.ResetWorkbookCategories()
		return nil
	case workbook.EdgeWorkbookMembers:
		m.ResetWorkbookMembers()
		return nil
	}
	return fmt.Errorf("unknown Workbook edge %s", name)
}

// WorkbookCategoryMutation represents an operation that mutates the WorkbookCategory nodes in the graph.
type WorkbookCategoryMutation struct {
	config
	op                               Op
	typ                              string
	id                               *uuid.UUID
	created_at                       *time.Time
	updated_at                       *time.Time
	name                             *string
	clearedFields                    map[string]struct{}
	description_problems             map[uuid.UUID]struct{}
	removeddescription_problems      map[uuid.UUID]struct{}
	cleareddescription_problems      bool
	selection_problems               map[uuid.UUID]struct{}
	removedselection_problems        map[uuid.UUID]struct{}
	clearedselection_problems        bool
	true_or_false_problems           map[uuid.UUID]struct{}
	removedtrue_or_false_problems    map[uuid.UUID]struct{}
	clearedtrue_or_false_problems    bool
	workbook                         *uuid.UUID
	clearedworkbook                  bool
	workbook_category_details        map[uuid.UUID]struct{}
	removedworkbook_category_details map[uuid.UUID]struct{}
	clearedworkbook_category_details bool
	done                             bool
	oldValue                         func(context.Context) (*WorkbookCategory, error)
	predicates                       []predicate.WorkbookCategory
}

var _ ent.Mutation = (*WorkbookCategoryMutation)(nil)

// workbookcategoryOption allows management of the mutation configuration using functional options.
type workbookcategoryOption func(*WorkbookCategoryMutation)

// newWorkbookCategoryMutation creates new mutation for the WorkbookCategory entity.
func newWorkbookCategoryMutation(c config, op Op, opts ...workbookcategoryOption) *WorkbookCategoryMutation {
	m := &WorkbookCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkbookCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkbookCategoryID sets the ID field of the mutation.
func withWorkbookCategoryID(id uuid.UUID) workbookcategoryOption {
	return func(m *WorkbookCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkbookCategory
		)
		m.oldValue = func(ctx context.Context) (*WorkbookCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkbookCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkbookCategory sets the old WorkbookCategory of the mutation.
func withWorkbookCategory(node *WorkbookCategory) workbookcategoryOption {
	return func(m *WorkbookCategoryMutation) {
		m.oldValue = func(context.Context) (*WorkbookCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkbookCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkbookCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WorkbookCategory entities.
func (m *WorkbookCategoryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkbookCategoryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkbookCategoryMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkbookCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkbookCategoryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkbookCategoryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WorkbookCategory entity.
// If the WorkbookCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkbookCategoryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkbookCategoryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkbookCategoryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WorkbookCategory entity.
// If the WorkbookCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkbookCategoryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *WorkbookCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WorkbookCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the WorkbookCategory entity.
// If the WorkbookCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WorkbookCategoryMutation) ResetName() {
	m.name = nil
}

// SetWorkbookID sets the "workbook_id" field.
func (m *WorkbookCategoryMutation) SetWorkbookID(u uuid.UUID) {
	m.workbook = &u
}

// WorkbookID returns the value of the "workbook_id" field in the mutation.
func (m *WorkbookCategoryMutation) WorkbookID() (r uuid.UUID, exists bool) {
	v := m.workbook
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookID returns the old "workbook_id" field's value of the WorkbookCategory entity.
// If the WorkbookCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryMutation) OldWorkbookID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookID: %w", err)
	}
	return oldValue.WorkbookID, nil
}

// ResetWorkbookID resets all changes to the "workbook_id" field.
func (m *WorkbookCategoryMutation) ResetWorkbookID() {
	m.workbook = nil
}

// AddDescriptionProblemIDs adds the "description_problems" edge to the DescriptionProblem entity by ids.
func (m *WorkbookCategoryMutation) AddDescriptionProblemIDs(ids ...uuid.UUID) {
	if m.description_problems == nil {
		m.description_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.description_problems[ids[i]] = struct{}{}
	}
}

// ClearDescriptionProblems clears the "description_problems" edge to the DescriptionProblem entity.
func (m *WorkbookCategoryMutation) ClearDescriptionProblems() {
	m.cleareddescription_problems = true
}

// DescriptionProblemsCleared reports if the "description_problems" edge to the DescriptionProblem entity was cleared.
func (m *WorkbookCategoryMutation) DescriptionProblemsCleared() bool {
	return m.cleareddescription_problems
}

// RemoveDescriptionProblemIDs removes the "description_problems" edge to the DescriptionProblem entity by IDs.
func (m *WorkbookCategoryMutation) RemoveDescriptionProblemIDs(ids ...uuid.UUID) {
	if m.removeddescription_problems == nil {
		m.removeddescription_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.description_problems, ids[i])
		m.removeddescription_problems[ids[i]] = struct{}{}
	}
}

// RemovedDescriptionProblems returns the removed IDs of the "description_problems" edge to the DescriptionProblem entity.
func (m *WorkbookCategoryMutation) RemovedDescriptionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removeddescription_problems {
		ids = append(ids, id)
	}
	return
}

// DescriptionProblemsIDs returns the "description_problems" edge IDs in the mutation.
func (m *WorkbookCategoryMutation) DescriptionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.description_problems {
		ids = append(ids, id)
	}
	return
}

// ResetDescriptionProblems resets all changes to the "description_problems" edge.
func (m *WorkbookCategoryMutation) ResetDescriptionProblems() {
	m.description_problems = nil
	m.cleareddescription_problems = false
	m.removeddescription_problems = nil
}

// AddSelectionProblemIDs adds the "selection_problems" edge to the SelectionProblem entity by ids.
func (m *WorkbookCategoryMutation) AddSelectionProblemIDs(ids ...uuid.UUID) {
	if m.selection_problems == nil {
		m.selection_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.selection_problems[ids[i]] = struct{}{}
	}
}

// ClearSelectionProblems clears the "selection_problems" edge to the SelectionProblem entity.
func (m *WorkbookCategoryMutation) ClearSelectionProblems() {
	m.clearedselection_problems = true
}

// SelectionProblemsCleared reports if the "selection_problems" edge to the SelectionProblem entity was cleared.
func (m *WorkbookCategoryMutation) SelectionProblemsCleared() bool {
	return m.clearedselection_problems
}

// RemoveSelectionProblemIDs removes the "selection_problems" edge to the SelectionProblem entity by IDs.
func (m *WorkbookCategoryMutation) RemoveSelectionProblemIDs(ids ...uuid.UUID) {
	if m.removedselection_problems == nil {
		m.removedselection_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.selection_problems, ids[i])
		m.removedselection_problems[ids[i]] = struct{}{}
	}
}

// RemovedSelectionProblems returns the removed IDs of the "selection_problems" edge to the SelectionProblem entity.
func (m *WorkbookCategoryMutation) RemovedSelectionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removedselection_problems {
		ids = append(ids, id)
	}
	return
}

// SelectionProblemsIDs returns the "selection_problems" edge IDs in the mutation.
func (m *WorkbookCategoryMutation) SelectionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.selection_problems {
		ids = append(ids, id)
	}
	return
}

// ResetSelectionProblems resets all changes to the "selection_problems" edge.
func (m *WorkbookCategoryMutation) ResetSelectionProblems() {
	m.selection_problems = nil
	m.clearedselection_problems = false
	m.removedselection_problems = nil
}

// AddTrueOrFalseProblemIDs adds the "true_or_false_problems" edge to the TrueOrFalseProblem entity by ids.
func (m *WorkbookCategoryMutation) AddTrueOrFalseProblemIDs(ids ...uuid.UUID) {
	if m.true_or_false_problems == nil {
		m.true_or_false_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.true_or_false_problems[ids[i]] = struct{}{}
	}
}

// ClearTrueOrFalseProblems clears the "true_or_false_problems" edge to the TrueOrFalseProblem entity.
func (m *WorkbookCategoryMutation) ClearTrueOrFalseProblems() {
	m.clearedtrue_or_false_problems = true
}

// TrueOrFalseProblemsCleared reports if the "true_or_false_problems" edge to the TrueOrFalseProblem entity was cleared.
func (m *WorkbookCategoryMutation) TrueOrFalseProblemsCleared() bool {
	return m.clearedtrue_or_false_problems
}

// RemoveTrueOrFalseProblemIDs removes the "true_or_false_problems" edge to the TrueOrFalseProblem entity by IDs.
func (m *WorkbookCategoryMutation) RemoveTrueOrFalseProblemIDs(ids ...uuid.UUID) {
	if m.removedtrue_or_false_problems == nil {
		m.removedtrue_or_false_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.true_or_false_problems, ids[i])
		m.removedtrue_or_false_problems[ids[i]] = struct{}{}
	}
}

// RemovedTrueOrFalseProblems returns the removed IDs of the "true_or_false_problems" edge to the TrueOrFalseProblem entity.
func (m *WorkbookCategoryMutation) RemovedTrueOrFalseProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removedtrue_or_false_problems {
		ids = append(ids, id)
	}
	return
}

// TrueOrFalseProblemsIDs returns the "true_or_false_problems" edge IDs in the mutation.
func (m *WorkbookCategoryMutation) TrueOrFalseProblemsIDs() (ids []uuid.UUID) {
	for id := range m.true_or_false_problems {
		ids = append(ids, id)
	}
	return
}

// ResetTrueOrFalseProblems resets all changes to the "true_or_false_problems" edge.
func (m *WorkbookCategoryMutation) ResetTrueOrFalseProblems() {
	m.true_or_false_problems = nil
	m.clearedtrue_or_false_problems = false
	m.removedtrue_or_false_problems = nil
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (m *WorkbookCategoryMutation) ClearWorkbook() {
	m.clearedworkbook = true
	m.clearedFields[workbookcategory.FieldWorkbookID] = struct{}{}
}

// WorkbookCleared reports if the "workbook" edge to the Workbook entity was cleared.
func (m *WorkbookCategoryMutation) WorkbookCleared() bool {
	return m.clearedworkbook
}

// WorkbookIDs returns the "workbook" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookID instead. It exists only for internal usage by the builders.
func (m *WorkbookCategoryMutation) WorkbookIDs() (ids []uuid.UUID) {
	if id := m.workbook; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbook resets all changes to the "workbook" edge.
func (m *WorkbookCategoryMutation) ResetWorkbook() {
	m.workbook = nil
	m.clearedworkbook = false
}

// AddWorkbookCategoryDetailIDs adds the "workbook_category_details" edge to the WorkbookCategoryDetail entity by ids.
func (m *WorkbookCategoryMutation) AddWorkbookCategoryDetailIDs(ids ...uuid.UUID) {
	if m.workbook_category_details == nil {
		m.workbook_category_details = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.workbook_category_details[ids[i]] = struct{}{}
	}
}

// ClearWorkbookCategoryDetails clears the "workbook_category_details" edge to the WorkbookCategoryDetail entity.
func (m *WorkbookCategoryMutation) ClearWorkbookCategoryDetails() {
	m.clearedworkbook_category_details = true
}

// WorkbookCategoryDetailsCleared reports if the "workbook_category_details" edge to the WorkbookCategoryDetail entity was cleared.
func (m *WorkbookCategoryMutation) WorkbookCategoryDetailsCleared() bool {
	return m.clearedworkbook_category_details
}

// RemoveWorkbookCategoryDetailIDs removes the "workbook_category_details" edge to the WorkbookCategoryDetail entity by IDs.
func (m *WorkbookCategoryMutation) RemoveWorkbookCategoryDetailIDs(ids ...uuid.UUID) {
	if m.removedworkbook_category_details == nil {
		m.removedworkbook_category_details = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.workbook_category_details, ids[i])
		m.removedworkbook_category_details[ids[i]] = struct{}{}
	}
}

// RemovedWorkbookCategoryDetails returns the removed IDs of the "workbook_category_details" edge to the WorkbookCategoryDetail entity.
func (m *WorkbookCategoryMutation) RemovedWorkbookCategoryDetailsIDs() (ids []uuid.UUID) {
	for id := range m.removedworkbook_category_details {
		ids = append(ids, id)
	}
	return
}

// WorkbookCategoryDetailsIDs returns the "workbook_category_details" edge IDs in the mutation.
func (m *WorkbookCategoryMutation) WorkbookCategoryDetailsIDs() (ids []uuid.UUID) {
	for id := range m.workbook_category_details {
		ids = append(ids, id)
	}
	return
}

// ResetWorkbookCategoryDetails resets all changes to the "workbook_category_details" edge.
func (m *WorkbookCategoryMutation) ResetWorkbookCategoryDetails() {
	m.workbook_category_details = nil
	m.clearedworkbook_category_details = false
	m.removedworkbook_category_details = nil
}

// Where appends a list predicates to the WorkbookCategoryMutation builder.
func (m *WorkbookCategoryMutation) Where(ps ...predicate.WorkbookCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkbookCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkbookCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkbookCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkbookCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkbookCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkbookCategory).
func (m *WorkbookCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkbookCategoryMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, workbookcategory.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workbookcategory.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, workbookcategory.FieldName)
	}
	if m.workbook != nil {
		fields = append(fields, workbookcategory.FieldWorkbookID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkbookCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workbookcategory.FieldCreatedAt:
		return m.CreatedAt()
	case workbookcategory.FieldUpdatedAt:
		return m.UpdatedAt()
	case workbookcategory.FieldName:
		return m.Name()
	case workbookcategory.FieldWorkbookID:
		return m.WorkbookID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkbookCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workbookcategory.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workbookcategory.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case workbookcategory.FieldName:
		return m.OldName(ctx)
	case workbookcategory.FieldWorkbookID:
		return m.OldWorkbookID(ctx)
	}
	return nil, fmt.Errorf("unknown WorkbookCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workbookcategory.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workbookcategory.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case workbookcategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case workbookcategory.FieldWorkbookID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookID(v)
		return nil
	}
	return fmt.Errorf("unknown WorkbookCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkbookCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkbookCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkbookCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkbookCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkbookCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkbookCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WorkbookCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkbookCategoryMutation) ResetField(name string) error {
	switch name {
	case workbookcategory.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workbookcategory.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case workbookcategory.FieldName:
		m.ResetName()
		return nil
	case workbookcategory.FieldWorkbookID:
		m.ResetWorkbookID()
		return nil
	}
	return fmt.Errorf("unknown WorkbookCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkbookCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.description_problems != nil {
		edges = append(edges, workbookcategory.EdgeDescriptionProblems)
	}
	if m.selection_problems != nil {
		edges = append(edges, workbookcategory.EdgeSelectionProblems)
	}
	if m.true_or_false_problems != nil {
		edges = append(edges, workbookcategory.EdgeTrueOrFalseProblems)
	}
	if m.workbook != nil {
		edges = append(edges, workbookcategory.EdgeWorkbook)
	}
	if m.workbook_category_details != nil {
		edges = append(edges, workbookcategory.EdgeWorkbookCategoryDetails)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkbookCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workbookcategory.EdgeDescriptionProblems:
		ids := make([]ent.Value, 0, len(m.description_problems))
		for id := range m.description_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategory.EdgeSelectionProblems:
		ids := make([]ent.Value, 0, len(m.selection_problems))
		for id := range m.selection_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategory.EdgeTrueOrFalseProblems:
		ids := make([]ent.Value, 0, len(m.true_or_false_problems))
		for id := range m.true_or_false_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategory.EdgeWorkbook:
		if id := m.workbook; id != nil {
			return []ent.Value{*id}
		}
	case workbookcategory.EdgeWorkbookCategoryDetails:
		ids := make([]ent.Value, 0, len(m.workbook_category_details))
		for id := range m.workbook_category_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkbookCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removeddescription_problems != nil {
		edges = append(edges, workbookcategory.EdgeDescriptionProblems)
	}
	if m.removedselection_problems != nil {
		edges = append(edges, workbookcategory.EdgeSelectionProblems)
	}
	if m.removedtrue_or_false_problems != nil {
		edges = append(edges, workbookcategory.EdgeTrueOrFalseProblems)
	}
	if m.removedworkbook_category_details != nil {
		edges = append(edges, workbookcategory.EdgeWorkbookCategoryDetails)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkbookCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workbookcategory.EdgeDescriptionProblems:
		ids := make([]ent.Value, 0, len(m.removeddescription_problems))
		for id := range m.removeddescription_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategory.EdgeSelectionProblems:
		ids := make([]ent.Value, 0, len(m.removedselection_problems))
		for id := range m.removedselection_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategory.EdgeTrueOrFalseProblems:
		ids := make([]ent.Value, 0, len(m.removedtrue_or_false_problems))
		for id := range m.removedtrue_or_false_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategory.EdgeWorkbookCategoryDetails:
		ids := make([]ent.Value, 0, len(m.removedworkbook_category_details))
		for id := range m.removedworkbook_category_details {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkbookCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.cleareddescription_problems {
		edges = append(edges, workbookcategory.EdgeDescriptionProblems)
	}
	if m.clearedselection_problems {
		edges = append(edges, workbookcategory.EdgeSelectionProblems)
	}
	if m.clearedtrue_or_false_problems {
		edges = append(edges, workbookcategory.EdgeTrueOrFalseProblems)
	}
	if m.clearedworkbook {
		edges = append(edges, workbookcategory.EdgeWorkbook)
	}
	if m.clearedworkbook_category_details {
		edges = append(edges, workbookcategory.EdgeWorkbookCategoryDetails)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkbookCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case workbookcategory.EdgeDescriptionProblems:
		return m.cleareddescription_problems
	case workbookcategory.EdgeSelectionProblems:
		return m.clearedselection_problems
	case workbookcategory.EdgeTrueOrFalseProblems:
		return m.clearedtrue_or_false_problems
	case workbookcategory.EdgeWorkbook:
		return m.clearedworkbook
	case workbookcategory.EdgeWorkbookCategoryDetails:
		return m.clearedworkbook_category_details
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkbookCategoryMutation) ClearEdge(name string) error {
	switch name {
	case workbookcategory.EdgeWorkbook:
		m.ClearWorkbook()
		return nil
	}
	return fmt.Errorf("unknown WorkbookCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkbookCategoryMutation) ResetEdge(name string) error {
	switch name {
	case workbookcategory.EdgeDescriptionProblems:
		m.ResetDescriptionProblems()
		return nil
	case workbookcategory.EdgeSelectionProblems:
		m.ResetSelectionProblems()
		return nil
	case workbookcategory.EdgeTrueOrFalseProblems:
		m.ResetTrueOrFalseProblems()
		return nil
	case workbookcategory.EdgeWorkbook:
		m.ResetWorkbook()
		return nil
	case workbookcategory.EdgeWorkbookCategoryDetails:
		m.ResetWorkbookCategoryDetails()
		return nil
	}
	return fmt.Errorf("unknown WorkbookCategory edge %s", name)
}

// WorkbookCategoryDetailMutation represents an operation that mutates the WorkbookCategoryDetail nodes in the graph.
type WorkbookCategoryDetailMutation struct {
	config
	op                            Op
	typ                           string
	id                            *uuid.UUID
	created_at                    *time.Time
	updated_at                    *time.Time
	name                          *string
	workbook_category_id          *uuid.UUID
	clearedFields                 map[string]struct{}
	description_problems          map[uuid.UUID]struct{}
	removeddescription_problems   map[uuid.UUID]struct{}
	cleareddescription_problems   bool
	selection_problems            map[uuid.UUID]struct{}
	removedselection_problems     map[uuid.UUID]struct{}
	clearedselection_problems     bool
	true_or_false_problems        map[uuid.UUID]struct{}
	removedtrue_or_false_problems map[uuid.UUID]struct{}
	clearedtrue_or_false_problems bool
	done                          bool
	oldValue                      func(context.Context) (*WorkbookCategoryDetail, error)
	predicates                    []predicate.WorkbookCategoryDetail
}

var _ ent.Mutation = (*WorkbookCategoryDetailMutation)(nil)

// workbookcategorydetailOption allows management of the mutation configuration using functional options.
type workbookcategorydetailOption func(*WorkbookCategoryDetailMutation)

// newWorkbookCategoryDetailMutation creates new mutation for the WorkbookCategoryDetail entity.
func newWorkbookCategoryDetailMutation(c config, op Op, opts ...workbookcategorydetailOption) *WorkbookCategoryDetailMutation {
	m := &WorkbookCategoryDetailMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkbookCategoryDetail,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkbookCategoryDetailID sets the ID field of the mutation.
func withWorkbookCategoryDetailID(id uuid.UUID) workbookcategorydetailOption {
	return func(m *WorkbookCategoryDetailMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkbookCategoryDetail
		)
		m.oldValue = func(ctx context.Context) (*WorkbookCategoryDetail, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkbookCategoryDetail.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkbookCategoryDetail sets the old WorkbookCategoryDetail of the mutation.
func withWorkbookCategoryDetail(node *WorkbookCategoryDetail) workbookcategorydetailOption {
	return func(m *WorkbookCategoryDetailMutation) {
		m.oldValue = func(context.Context) (*WorkbookCategoryDetail, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkbookCategoryDetailMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkbookCategoryDetailMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WorkbookCategoryDetail entities.
func (m *WorkbookCategoryDetailMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkbookCategoryDetailMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkbookCategoryDetailMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkbookCategoryDetail.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkbookCategoryDetailMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkbookCategoryDetailMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WorkbookCategoryDetail entity.
// If the WorkbookCategoryDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryDetailMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkbookCategoryDetailMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkbookCategoryDetailMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkbookCategoryDetailMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WorkbookCategoryDetail entity.
// If the WorkbookCategoryDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryDetailMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkbookCategoryDetailMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the "name" field.
func (m *WorkbookCategoryDetailMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WorkbookCategoryDetailMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the WorkbookCategoryDetail entity.
// If the WorkbookCategoryDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryDetailMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WorkbookCategoryDetailMutation) ResetName() {
	m.name = nil
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (m *WorkbookCategoryDetailMutation) SetWorkbookCategoryID(u uuid.UUID) {
	m.workbook_category_id = &u
}

// WorkbookCategoryID returns the value of the "workbook_category_id" field in the mutation.
func (m *WorkbookCategoryDetailMutation) WorkbookCategoryID() (r uuid.UUID, exists bool) {
	v := m.workbook_category_id
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookCategoryID returns the old "workbook_category_id" field's value of the WorkbookCategoryDetail entity.
// If the WorkbookCategoryDetail object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookCategoryDetailMutation) OldWorkbookCategoryID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookCategoryID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookCategoryID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookCategoryID: %w", err)
	}
	return oldValue.WorkbookCategoryID, nil
}

// ResetWorkbookCategoryID resets all changes to the "workbook_category_id" field.
func (m *WorkbookCategoryDetailMutation) ResetWorkbookCategoryID() {
	m.workbook_category_id = nil
}

// AddDescriptionProblemIDs adds the "description_problems" edge to the DescriptionProblem entity by ids.
func (m *WorkbookCategoryDetailMutation) AddDescriptionProblemIDs(ids ...uuid.UUID) {
	if m.description_problems == nil {
		m.description_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.description_problems[ids[i]] = struct{}{}
	}
}

// ClearDescriptionProblems clears the "description_problems" edge to the DescriptionProblem entity.
func (m *WorkbookCategoryDetailMutation) ClearDescriptionProblems() {
	m.cleareddescription_problems = true
}

// DescriptionProblemsCleared reports if the "description_problems" edge to the DescriptionProblem entity was cleared.
func (m *WorkbookCategoryDetailMutation) DescriptionProblemsCleared() bool {
	return m.cleareddescription_problems
}

// RemoveDescriptionProblemIDs removes the "description_problems" edge to the DescriptionProblem entity by IDs.
func (m *WorkbookCategoryDetailMutation) RemoveDescriptionProblemIDs(ids ...uuid.UUID) {
	if m.removeddescription_problems == nil {
		m.removeddescription_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.description_problems, ids[i])
		m.removeddescription_problems[ids[i]] = struct{}{}
	}
}

// RemovedDescriptionProblems returns the removed IDs of the "description_problems" edge to the DescriptionProblem entity.
func (m *WorkbookCategoryDetailMutation) RemovedDescriptionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removeddescription_problems {
		ids = append(ids, id)
	}
	return
}

// DescriptionProblemsIDs returns the "description_problems" edge IDs in the mutation.
func (m *WorkbookCategoryDetailMutation) DescriptionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.description_problems {
		ids = append(ids, id)
	}
	return
}

// ResetDescriptionProblems resets all changes to the "description_problems" edge.
func (m *WorkbookCategoryDetailMutation) ResetDescriptionProblems() {
	m.description_problems = nil
	m.cleareddescription_problems = false
	m.removeddescription_problems = nil
}

// AddSelectionProblemIDs adds the "selection_problems" edge to the SelectionProblem entity by ids.
func (m *WorkbookCategoryDetailMutation) AddSelectionProblemIDs(ids ...uuid.UUID) {
	if m.selection_problems == nil {
		m.selection_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.selection_problems[ids[i]] = struct{}{}
	}
}

// ClearSelectionProblems clears the "selection_problems" edge to the SelectionProblem entity.
func (m *WorkbookCategoryDetailMutation) ClearSelectionProblems() {
	m.clearedselection_problems = true
}

// SelectionProblemsCleared reports if the "selection_problems" edge to the SelectionProblem entity was cleared.
func (m *WorkbookCategoryDetailMutation) SelectionProblemsCleared() bool {
	return m.clearedselection_problems
}

// RemoveSelectionProblemIDs removes the "selection_problems" edge to the SelectionProblem entity by IDs.
func (m *WorkbookCategoryDetailMutation) RemoveSelectionProblemIDs(ids ...uuid.UUID) {
	if m.removedselection_problems == nil {
		m.removedselection_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.selection_problems, ids[i])
		m.removedselection_problems[ids[i]] = struct{}{}
	}
}

// RemovedSelectionProblems returns the removed IDs of the "selection_problems" edge to the SelectionProblem entity.
func (m *WorkbookCategoryDetailMutation) RemovedSelectionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removedselection_problems {
		ids = append(ids, id)
	}
	return
}

// SelectionProblemsIDs returns the "selection_problems" edge IDs in the mutation.
func (m *WorkbookCategoryDetailMutation) SelectionProblemsIDs() (ids []uuid.UUID) {
	for id := range m.selection_problems {
		ids = append(ids, id)
	}
	return
}

// ResetSelectionProblems resets all changes to the "selection_problems" edge.
func (m *WorkbookCategoryDetailMutation) ResetSelectionProblems() {
	m.selection_problems = nil
	m.clearedselection_problems = false
	m.removedselection_problems = nil
}

// AddTrueOrFalseProblemIDs adds the "true_or_false_problems" edge to the TrueOrFalseProblem entity by ids.
func (m *WorkbookCategoryDetailMutation) AddTrueOrFalseProblemIDs(ids ...uuid.UUID) {
	if m.true_or_false_problems == nil {
		m.true_or_false_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.true_or_false_problems[ids[i]] = struct{}{}
	}
}

// ClearTrueOrFalseProblems clears the "true_or_false_problems" edge to the TrueOrFalseProblem entity.
func (m *WorkbookCategoryDetailMutation) ClearTrueOrFalseProblems() {
	m.clearedtrue_or_false_problems = true
}

// TrueOrFalseProblemsCleared reports if the "true_or_false_problems" edge to the TrueOrFalseProblem entity was cleared.
func (m *WorkbookCategoryDetailMutation) TrueOrFalseProblemsCleared() bool {
	return m.clearedtrue_or_false_problems
}

// RemoveTrueOrFalseProblemIDs removes the "true_or_false_problems" edge to the TrueOrFalseProblem entity by IDs.
func (m *WorkbookCategoryDetailMutation) RemoveTrueOrFalseProblemIDs(ids ...uuid.UUID) {
	if m.removedtrue_or_false_problems == nil {
		m.removedtrue_or_false_problems = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.true_or_false_problems, ids[i])
		m.removedtrue_or_false_problems[ids[i]] = struct{}{}
	}
}

// RemovedTrueOrFalseProblems returns the removed IDs of the "true_or_false_problems" edge to the TrueOrFalseProblem entity.
func (m *WorkbookCategoryDetailMutation) RemovedTrueOrFalseProblemsIDs() (ids []uuid.UUID) {
	for id := range m.removedtrue_or_false_problems {
		ids = append(ids, id)
	}
	return
}

// TrueOrFalseProblemsIDs returns the "true_or_false_problems" edge IDs in the mutation.
func (m *WorkbookCategoryDetailMutation) TrueOrFalseProblemsIDs() (ids []uuid.UUID) {
	for id := range m.true_or_false_problems {
		ids = append(ids, id)
	}
	return
}

// ResetTrueOrFalseProblems resets all changes to the "true_or_false_problems" edge.
func (m *WorkbookCategoryDetailMutation) ResetTrueOrFalseProblems() {
	m.true_or_false_problems = nil
	m.clearedtrue_or_false_problems = false
	m.removedtrue_or_false_problems = nil
}

// Where appends a list predicates to the WorkbookCategoryDetailMutation builder.
func (m *WorkbookCategoryDetailMutation) Where(ps ...predicate.WorkbookCategoryDetail) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkbookCategoryDetailMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkbookCategoryDetailMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkbookCategoryDetail, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkbookCategoryDetailMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkbookCategoryDetailMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkbookCategoryDetail).
func (m *WorkbookCategoryDetailMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkbookCategoryDetailMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, workbookcategorydetail.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workbookcategorydetail.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, workbookcategorydetail.FieldName)
	}
	if m.workbook_category_id != nil {
		fields = append(fields, workbookcategorydetail.FieldWorkbookCategoryID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkbookCategoryDetailMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workbookcategorydetail.FieldCreatedAt:
		return m.CreatedAt()
	case workbookcategorydetail.FieldUpdatedAt:
		return m.UpdatedAt()
	case workbookcategorydetail.FieldName:
		return m.Name()
	case workbookcategorydetail.FieldWorkbookCategoryID:
		return m.WorkbookCategoryID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkbookCategoryDetailMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workbookcategorydetail.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workbookcategorydetail.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case workbookcategorydetail.FieldName:
		return m.OldName(ctx)
	case workbookcategorydetail.FieldWorkbookCategoryID:
		return m.OldWorkbookCategoryID(ctx)
	}
	return nil, fmt.Errorf("unknown WorkbookCategoryDetail field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookCategoryDetailMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workbookcategorydetail.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workbookcategorydetail.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case workbookcategorydetail.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case workbookcategorydetail.FieldWorkbookCategoryID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookCategoryID(v)
		return nil
	}
	return fmt.Errorf("unknown WorkbookCategoryDetail field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkbookCategoryDetailMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkbookCategoryDetailMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookCategoryDetailMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkbookCategoryDetail numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkbookCategoryDetailMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkbookCategoryDetailMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkbookCategoryDetailMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WorkbookCategoryDetail nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkbookCategoryDetailMutation) ResetField(name string) error {
	switch name {
	case workbookcategorydetail.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workbookcategorydetail.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case workbookcategorydetail.FieldName:
		m.ResetName()
		return nil
	case workbookcategorydetail.FieldWorkbookCategoryID:
		m.ResetWorkbookCategoryID()
		return nil
	}
	return fmt.Errorf("unknown WorkbookCategoryDetail field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkbookCategoryDetailMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.description_problems != nil {
		edges = append(edges, workbookcategorydetail.EdgeDescriptionProblems)
	}
	if m.selection_problems != nil {
		edges = append(edges, workbookcategorydetail.EdgeSelectionProblems)
	}
	if m.true_or_false_problems != nil {
		edges = append(edges, workbookcategorydetail.EdgeTrueOrFalseProblems)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkbookCategoryDetailMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workbookcategorydetail.EdgeDescriptionProblems:
		ids := make([]ent.Value, 0, len(m.description_problems))
		for id := range m.description_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategorydetail.EdgeSelectionProblems:
		ids := make([]ent.Value, 0, len(m.selection_problems))
		for id := range m.selection_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategorydetail.EdgeTrueOrFalseProblems:
		ids := make([]ent.Value, 0, len(m.true_or_false_problems))
		for id := range m.true_or_false_problems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkbookCategoryDetailMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removeddescription_problems != nil {
		edges = append(edges, workbookcategorydetail.EdgeDescriptionProblems)
	}
	if m.removedselection_problems != nil {
		edges = append(edges, workbookcategorydetail.EdgeSelectionProblems)
	}
	if m.removedtrue_or_false_problems != nil {
		edges = append(edges, workbookcategorydetail.EdgeTrueOrFalseProblems)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkbookCategoryDetailMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case workbookcategorydetail.EdgeDescriptionProblems:
		ids := make([]ent.Value, 0, len(m.removeddescription_problems))
		for id := range m.removeddescription_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategorydetail.EdgeSelectionProblems:
		ids := make([]ent.Value, 0, len(m.removedselection_problems))
		for id := range m.removedselection_problems {
			ids = append(ids, id)
		}
		return ids
	case workbookcategorydetail.EdgeTrueOrFalseProblems:
		ids := make([]ent.Value, 0, len(m.removedtrue_or_false_problems))
		for id := range m.removedtrue_or_false_problems {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkbookCategoryDetailMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareddescription_problems {
		edges = append(edges, workbookcategorydetail.EdgeDescriptionProblems)
	}
	if m.clearedselection_problems {
		edges = append(edges, workbookcategorydetail.EdgeSelectionProblems)
	}
	if m.clearedtrue_or_false_problems {
		edges = append(edges, workbookcategorydetail.EdgeTrueOrFalseProblems)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkbookCategoryDetailMutation) EdgeCleared(name string) bool {
	switch name {
	case workbookcategorydetail.EdgeDescriptionProblems:
		return m.cleareddescription_problems
	case workbookcategorydetail.EdgeSelectionProblems:
		return m.clearedselection_problems
	case workbookcategorydetail.EdgeTrueOrFalseProblems:
		return m.clearedtrue_or_false_problems
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkbookCategoryDetailMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkbookCategoryDetail unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkbookCategoryDetailMutation) ResetEdge(name string) error {
	switch name {
	case workbookcategorydetail.EdgeDescriptionProblems:
		m.ResetDescriptionProblems()
		return nil
	case workbookcategorydetail.EdgeSelectionProblems:
		m.ResetSelectionProblems()
		return nil
	case workbookcategorydetail.EdgeTrueOrFalseProblems:
		m.ResetTrueOrFalseProblems()
		return nil
	}
	return fmt.Errorf("unknown WorkbookCategoryDetail edge %s", name)
}

// WorkbookMemberMutation represents an operation that mutates the WorkbookMember nodes in the graph.
type WorkbookMemberMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	role            *uuid.UUID
	clearedrole     bool
	user            *uuid.UUID
	cleareduser     bool
	workbook        *uuid.UUID
	clearedworkbook bool
	done            bool
	oldValue        func(context.Context) (*WorkbookMember, error)
	predicates      []predicate.WorkbookMember
}

var _ ent.Mutation = (*WorkbookMemberMutation)(nil)

// workbookmemberOption allows management of the mutation configuration using functional options.
type workbookmemberOption func(*WorkbookMemberMutation)

// newWorkbookMemberMutation creates new mutation for the WorkbookMember entity.
func newWorkbookMemberMutation(c config, op Op, opts ...workbookmemberOption) *WorkbookMemberMutation {
	m := &WorkbookMemberMutation{
		config:        c,
		op:            op,
		typ:           TypeWorkbookMember,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWorkbookMemberID sets the ID field of the mutation.
func withWorkbookMemberID(id uuid.UUID) workbookmemberOption {
	return func(m *WorkbookMemberMutation) {
		var (
			err   error
			once  sync.Once
			value *WorkbookMember
		)
		m.oldValue = func(ctx context.Context) (*WorkbookMember, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WorkbookMember.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWorkbookMember sets the old WorkbookMember of the mutation.
func withWorkbookMember(node *WorkbookMember) workbookmemberOption {
	return func(m *WorkbookMemberMutation) {
		m.oldValue = func(context.Context) (*WorkbookMember, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WorkbookMemberMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WorkbookMemberMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of WorkbookMember entities.
func (m *WorkbookMemberMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WorkbookMemberMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WorkbookMemberMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WorkbookMember.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WorkbookMemberMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WorkbookMemberMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WorkbookMember entity.
// If the WorkbookMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMemberMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WorkbookMemberMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WorkbookMemberMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WorkbookMemberMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WorkbookMember entity.
// If the WorkbookMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMemberMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WorkbookMemberMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRoleID sets the "role_id" field.
func (m *WorkbookMemberMutation) SetRoleID(u uuid.UUID) {
	m.role = &u
}

// RoleID returns the value of the "role_id" field in the mutation.
func (m *WorkbookMemberMutation) RoleID() (r uuid.UUID, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRoleID returns the old "role_id" field's value of the WorkbookMember entity.
// If the WorkbookMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMemberMutation) OldRoleID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRoleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRoleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoleID: %w", err)
	}
	return oldValue.RoleID, nil
}

// ResetRoleID resets all changes to the "role_id" field.
func (m *WorkbookMemberMutation) ResetRoleID() {
	m.role = nil
}

// SetUserID sets the "user_id" field.
func (m *WorkbookMemberMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *WorkbookMemberMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the WorkbookMember entity.
// If the WorkbookMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMemberMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *WorkbookMemberMutation) ResetUserID() {
	m.user = nil
}

// SetWorkbookID sets the "workbook_id" field.
func (m *WorkbookMemberMutation) SetWorkbookID(u uuid.UUID) {
	m.workbook = &u
}

// WorkbookID returns the value of the "workbook_id" field in the mutation.
func (m *WorkbookMemberMutation) WorkbookID() (r uuid.UUID, exists bool) {
	v := m.workbook
	if v == nil {
		return
	}
	return *v, true
}

// OldWorkbookID returns the old "workbook_id" field's value of the WorkbookMember entity.
// If the WorkbookMember object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WorkbookMemberMutation) OldWorkbookID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorkbookID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorkbookID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorkbookID: %w", err)
	}
	return oldValue.WorkbookID, nil
}

// ResetWorkbookID resets all changes to the "workbook_id" field.
func (m *WorkbookMemberMutation) ResetWorkbookID() {
	m.workbook = nil
}

// ClearRole clears the "role" edge to the Role entity.
func (m *WorkbookMemberMutation) ClearRole() {
	m.clearedrole = true
	m.clearedFields[workbookmember.FieldRoleID] = struct{}{}
}

// RoleCleared reports if the "role" edge to the Role entity was cleared.
func (m *WorkbookMemberMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleIDs returns the "role" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *WorkbookMemberMutation) RoleIDs() (ids []uuid.UUID) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole resets all changes to the "role" edge.
func (m *WorkbookMemberMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *WorkbookMemberMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[workbookmember.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *WorkbookMemberMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *WorkbookMemberMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *WorkbookMemberMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (m *WorkbookMemberMutation) ClearWorkbook() {
	m.clearedworkbook = true
	m.clearedFields[workbookmember.FieldWorkbookID] = struct{}{}
}

// WorkbookCleared reports if the "workbook" edge to the Workbook entity was cleared.
func (m *WorkbookMemberMutation) WorkbookCleared() bool {
	return m.clearedworkbook
}

// WorkbookIDs returns the "workbook" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// WorkbookID instead. It exists only for internal usage by the builders.
func (m *WorkbookMemberMutation) WorkbookIDs() (ids []uuid.UUID) {
	if id := m.workbook; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetWorkbook resets all changes to the "workbook" edge.
func (m *WorkbookMemberMutation) ResetWorkbook() {
	m.workbook = nil
	m.clearedworkbook = false
}

// Where appends a list predicates to the WorkbookMemberMutation builder.
func (m *WorkbookMemberMutation) Where(ps ...predicate.WorkbookMember) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WorkbookMemberMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WorkbookMemberMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.WorkbookMember, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WorkbookMemberMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WorkbookMemberMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (WorkbookMember).
func (m *WorkbookMemberMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WorkbookMemberMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, workbookmember.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, workbookmember.FieldUpdatedAt)
	}
	if m.role != nil {
		fields = append(fields, workbookmember.FieldRoleID)
	}
	if m.user != nil {
		fields = append(fields, workbookmember.FieldUserID)
	}
	if m.workbook != nil {
		fields = append(fields, workbookmember.FieldWorkbookID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WorkbookMemberMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case workbookmember.FieldCreatedAt:
		return m.CreatedAt()
	case workbookmember.FieldUpdatedAt:
		return m.UpdatedAt()
	case workbookmember.FieldRoleID:
		return m.RoleID()
	case workbookmember.FieldUserID:
		return m.UserID()
	case workbookmember.FieldWorkbookID:
		return m.WorkbookID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WorkbookMemberMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case workbookmember.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case workbookmember.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case workbookmember.FieldRoleID:
		return m.OldRoleID(ctx)
	case workbookmember.FieldUserID:
		return m.OldUserID(ctx)
	case workbookmember.FieldWorkbookID:
		return m.OldWorkbookID(ctx)
	}
	return nil, fmt.Errorf("unknown WorkbookMember field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookMemberMutation) SetField(name string, value ent.Value) error {
	switch name {
	case workbookmember.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case workbookmember.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case workbookmember.FieldRoleID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoleID(v)
		return nil
	case workbookmember.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case workbookmember.FieldWorkbookID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorkbookID(v)
		return nil
	}
	return fmt.Errorf("unknown WorkbookMember field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WorkbookMemberMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WorkbookMemberMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WorkbookMemberMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WorkbookMember numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WorkbookMemberMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WorkbookMemberMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WorkbookMemberMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WorkbookMember nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WorkbookMemberMutation) ResetField(name string) error {
	switch name {
	case workbookmember.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case workbookmember.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case workbookmember.FieldRoleID:
		m.ResetRoleID()
		return nil
	case workbookmember.FieldUserID:
		m.ResetUserID()
		return nil
	case workbookmember.FieldWorkbookID:
		m.ResetWorkbookID()
		return nil
	}
	return fmt.Errorf("unknown WorkbookMember field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WorkbookMemberMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.role != nil {
		edges = append(edges, workbookmember.EdgeRole)
	}
	if m.user != nil {
		edges = append(edges, workbookmember.EdgeUser)
	}
	if m.workbook != nil {
		edges = append(edges, workbookmember.EdgeWorkbook)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WorkbookMemberMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case workbookmember.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	case workbookmember.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case workbookmember.EdgeWorkbook:
		if id := m.workbook; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WorkbookMemberMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WorkbookMemberMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WorkbookMemberMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedrole {
		edges = append(edges, workbookmember.EdgeRole)
	}
	if m.cleareduser {
		edges = append(edges, workbookmember.EdgeUser)
	}
	if m.clearedworkbook {
		edges = append(edges, workbookmember.EdgeWorkbook)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WorkbookMemberMutation) EdgeCleared(name string) bool {
	switch name {
	case workbookmember.EdgeRole:
		return m.clearedrole
	case workbookmember.EdgeUser:
		return m.cleareduser
	case workbookmember.EdgeWorkbook:
		return m.clearedworkbook
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WorkbookMemberMutation) ClearEdge(name string) error {
	switch name {
	case workbookmember.EdgeRole:
		m.ClearRole()
		return nil
	case workbookmember.EdgeUser:
		m.ClearUser()
		return nil
	case workbookmember.EdgeWorkbook:
		m.ClearWorkbook()
		return nil
	}
	return fmt.Errorf("unknown WorkbookMember unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WorkbookMemberMutation) ResetEdge(name string) error {
	switch name {
	case workbookmember.EdgeRole:
		m.ResetRole()
		return nil
	case workbookmember.EdgeUser:
		m.ResetUser()
		return nil
	case workbookmember.EdgeWorkbook:
		m.ResetWorkbook()
		return nil
	}
	return fmt.Errorf("unknown WorkbookMember edge %s", name)
}
