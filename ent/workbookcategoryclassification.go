// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/workbookcategoryclassification"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkbookCategoryClassification is the model entity for the WorkbookCategoryClassification schema.
type WorkbookCategoryClassification struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// WorkbookCategoryID holds the value of the "workbook_category_id" field.
	WorkbookCategoryID uuid.UUID `json:"workbook_category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkbookCategoryClassificationQuery when eager-loading is set.
	Edges                                               WorkbookCategoryClassificationEdges `json:"edges"`
	workbook_category_workbook_category_classifications *uuid.UUID
	selectValues                                        sql.SelectValues
}

// WorkbookCategoryClassificationEdges holds the relations/edges for other nodes in the graph.
type WorkbookCategoryClassificationEdges struct {
	// Problems holds the value of the problems edge.
	Problems []*Problem `json:"problems,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProblemsOrErr returns the Problems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryClassificationEdges) ProblemsOrErr() ([]*Problem, error) {
	if e.loadedTypes[0] {
		return e.Problems, nil
	}
	return nil, &NotLoadedError{edge: "problems"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkbookCategoryClassification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbookcategoryclassification.FieldName:
			values[i] = new(sql.NullString)
		case workbookcategoryclassification.FieldCreatedAt, workbookcategoryclassification.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workbookcategoryclassification.FieldID, workbookcategoryclassification.FieldWorkbookCategoryID:
			values[i] = new(uuid.UUID)
		case workbookcategoryclassification.ForeignKeys[0]: // workbook_category_workbook_category_classifications
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkbookCategoryClassification fields.
func (wcc *WorkbookCategoryClassification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbookcategoryclassification.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wcc.ID = *value
			}
		case workbookcategoryclassification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wcc.CreatedAt = value.Time
			}
		case workbookcategoryclassification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wcc.UpdatedAt = value.Time
			}
		case workbookcategoryclassification.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wcc.Name = value.String
			}
		case workbookcategoryclassification.FieldWorkbookCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_category_id", values[i])
			} else if value != nil {
				wcc.WorkbookCategoryID = *value
			}
		case workbookcategoryclassification.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_category_workbook_category_classifications", values[i])
			} else if value.Valid {
				wcc.workbook_category_workbook_category_classifications = new(uuid.UUID)
				*wcc.workbook_category_workbook_category_classifications = *value.S.(*uuid.UUID)
			}
		default:
			wcc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkbookCategoryClassification.
// This includes values selected through modifiers, order, etc.
func (wcc *WorkbookCategoryClassification) Value(name string) (ent.Value, error) {
	return wcc.selectValues.Get(name)
}

// QueryProblems queries the "problems" edge of the WorkbookCategoryClassification entity.
func (wcc *WorkbookCategoryClassification) QueryProblems() *ProblemQuery {
	return NewWorkbookCategoryClassificationClient(wcc.config).QueryProblems(wcc)
}

// Update returns a builder for updating this WorkbookCategoryClassification.
// Note that you need to call WorkbookCategoryClassification.Unwrap() before calling this method if this WorkbookCategoryClassification
// was returned from a transaction, and the transaction was committed or rolled back.
func (wcc *WorkbookCategoryClassification) Update() *WorkbookCategoryClassificationUpdateOne {
	return NewWorkbookCategoryClassificationClient(wcc.config).UpdateOne(wcc)
}

// Unwrap unwraps the WorkbookCategoryClassification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wcc *WorkbookCategoryClassification) Unwrap() *WorkbookCategoryClassification {
	_tx, ok := wcc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkbookCategoryClassification is not a transactional entity")
	}
	wcc.config.driver = _tx.drv
	return wcc
}

// String implements the fmt.Stringer.
func (wcc *WorkbookCategoryClassification) String() string {
	var builder strings.Builder
	builder.WriteString("WorkbookCategoryClassification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wcc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wcc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wcc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wcc.Name)
	builder.WriteString(", ")
	builder.WriteString("workbook_category_id=")
	builder.WriteString(fmt.Sprintf("%v", wcc.WorkbookCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkbookCategoryClassifications is a parsable slice of WorkbookCategoryClassification.
type WorkbookCategoryClassifications []*WorkbookCategoryClassification
