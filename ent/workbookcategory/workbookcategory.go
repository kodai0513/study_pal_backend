// Code generated by ent, DO NOT EDIT.

package workbookcategory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workbookcategory type in the database.
	Label = "workbook_category"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWorkbookID holds the string denoting the workbook_id field in the database.
	FieldWorkbookID = "workbook_id"
	// EdgeProblems holds the string denoting the problems edge name in mutations.
	EdgeProblems = "problems"
	// EdgeWorkbook holds the string denoting the workbook edge name in mutations.
	EdgeWorkbook = "workbook"
	// EdgeWorkbookCategoryClosures holds the string denoting the workbook_category_closures edge name in mutations.
	EdgeWorkbookCategoryClosures = "workbook_category_closures"
	// Table holds the table name of the workbookcategory in the database.
	Table = "workbook_categories"
	// ProblemsTable is the table that holds the problems relation/edge.
	ProblemsTable = "problems"
	// ProblemsInverseTable is the table name for the Problem entity.
	// It exists in this package in order to avoid circular dependency with the "problem" package.
	ProblemsInverseTable = "problems"
	// ProblemsColumn is the table column denoting the problems relation/edge.
	ProblemsColumn = "workbook_category_id"
	// WorkbookTable is the table that holds the workbook relation/edge.
	WorkbookTable = "workbook_categories"
	// WorkbookInverseTable is the table name for the Workbook entity.
	// It exists in this package in order to avoid circular dependency with the "workbook" package.
	WorkbookInverseTable = "workbooks"
	// WorkbookColumn is the table column denoting the workbook relation/edge.
	WorkbookColumn = "workbook_id"
	// WorkbookCategoryClosuresTable is the table that holds the workbook_category_closures relation/edge.
	WorkbookCategoryClosuresTable = "workbook_category_closures"
	// WorkbookCategoryClosuresInverseTable is the table name for the WorkbookCategoryClosure entity.
	// It exists in this package in order to avoid circular dependency with the "workbookcategoryclosure" package.
	WorkbookCategoryClosuresInverseTable = "workbook_category_closures"
	// WorkbookCategoryClosuresColumn is the table column denoting the workbook_category_closures relation/edge.
	WorkbookCategoryClosuresColumn = "workbook_category_workbook_category_closures"
)

// Columns holds all SQL columns for workbookcategory fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldWorkbookID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the WorkbookCategory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWorkbookID orders the results by the workbook_id field.
func ByWorkbookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookID, opts...).ToFunc()
}

// ByProblemsCount orders the results by problems count.
func ByProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProblemsStep(), opts...)
	}
}

// ByProblems orders the results by problems terms.
func ByProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkbookField orders the results by workbook field.
func ByWorkbookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkbookCategoryClosuresCount orders the results by workbook_category_closures count.
func ByWorkbookCategoryClosuresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkbookCategoryClosuresStep(), opts...)
	}
}

// ByWorkbookCategoryClosures orders the results by workbook_category_closures terms.
func ByWorkbookCategoryClosures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookCategoryClosuresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProblemsTable, ProblemsColumn),
	)
}
func newWorkbookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkbookTable, WorkbookColumn),
	)
}
func newWorkbookCategoryClosuresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookCategoryClosuresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkbookCategoryClosuresTable, WorkbookCategoryClosuresColumn),
	)
}
