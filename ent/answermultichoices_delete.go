// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"study-pal-backend/ent/answermultichoices"
	"study-pal-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerMultiChoicesDelete is the builder for deleting a AnswerMultiChoices entity.
type AnswerMultiChoicesDelete struct {
	config
	hooks    []Hook
	mutation *AnswerMultiChoicesMutation
}

// Where appends a list predicates to the AnswerMultiChoicesDelete builder.
func (amcd *AnswerMultiChoicesDelete) Where(ps ...predicate.AnswerMultiChoices) *AnswerMultiChoicesDelete {
	amcd.mutation.Where(ps...)
	return amcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (amcd *AnswerMultiChoicesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, amcd.sqlExec, amcd.mutation, amcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (amcd *AnswerMultiChoicesDelete) ExecX(ctx context.Context) int {
	n, err := amcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (amcd *AnswerMultiChoicesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(answermultichoices.Table, sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeUUID))
	if ps := amcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, amcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	amcd.mutation.done = true
	return affected, err
}

// AnswerMultiChoicesDeleteOne is the builder for deleting a single AnswerMultiChoices entity.
type AnswerMultiChoicesDeleteOne struct {
	amcd *AnswerMultiChoicesDelete
}

// Where appends a list predicates to the AnswerMultiChoicesDelete builder.
func (amcdo *AnswerMultiChoicesDeleteOne) Where(ps ...predicate.AnswerMultiChoices) *AnswerMultiChoicesDeleteOne {
	amcdo.amcd.mutation.Where(ps...)
	return amcdo
}

// Exec executes the deletion query.
func (amcdo *AnswerMultiChoicesDeleteOne) Exec(ctx context.Context) error {
	n, err := amcdo.amcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{answermultichoices.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (amcdo *AnswerMultiChoicesDeleteOne) ExecX(ctx context.Context) {
	if err := amcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
