// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookmember"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookMemberUpdate is the builder for updating WorkbookMember entities.
type WorkbookMemberUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookMemberMutation
}

// Where appends a list predicates to the WorkbookMemberUpdate builder.
func (wmu *WorkbookMemberUpdate) Where(ps ...predicate.WorkbookMember) *WorkbookMemberUpdate {
	wmu.mutation.Where(ps...)
	return wmu
}

// SetCreatedAt sets the "created_at" field.
func (wmu *WorkbookMemberUpdate) SetCreatedAt(t time.Time) *WorkbookMemberUpdate {
	wmu.mutation.SetCreatedAt(t)
	return wmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wmu *WorkbookMemberUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookMemberUpdate {
	if t != nil {
		wmu.SetCreatedAt(*t)
	}
	return wmu
}

// SetUpdatedAt sets the "updated_at" field.
func (wmu *WorkbookMemberUpdate) SetUpdatedAt(t time.Time) *WorkbookMemberUpdate {
	wmu.mutation.SetUpdatedAt(t)
	return wmu
}

// SetRoleID sets the "role_id" field.
func (wmu *WorkbookMemberUpdate) SetRoleID(u uuid.UUID) *WorkbookMemberUpdate {
	wmu.mutation.SetRoleID(u)
	return wmu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (wmu *WorkbookMemberUpdate) SetNillableRoleID(u *uuid.UUID) *WorkbookMemberUpdate {
	if u != nil {
		wmu.SetRoleID(*u)
	}
	return wmu
}

// SetMemberID sets the "member_id" field.
func (wmu *WorkbookMemberUpdate) SetMemberID(u uuid.UUID) *WorkbookMemberUpdate {
	wmu.mutation.SetMemberID(u)
	return wmu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (wmu *WorkbookMemberUpdate) SetNillableMemberID(u *uuid.UUID) *WorkbookMemberUpdate {
	if u != nil {
		wmu.SetMemberID(*u)
	}
	return wmu
}

// SetWorkbookID sets the "workbook_id" field.
func (wmu *WorkbookMemberUpdate) SetWorkbookID(u uuid.UUID) *WorkbookMemberUpdate {
	wmu.mutation.SetWorkbookID(u)
	return wmu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wmu *WorkbookMemberUpdate) SetNillableWorkbookID(u *uuid.UUID) *WorkbookMemberUpdate {
	if u != nil {
		wmu.SetWorkbookID(*u)
	}
	return wmu
}

// SetRole sets the "role" edge to the Role entity.
func (wmu *WorkbookMemberUpdate) SetRole(r *Role) *WorkbookMemberUpdate {
	return wmu.SetRoleID(r.ID)
}

// SetMember sets the "member" edge to the User entity.
func (wmu *WorkbookMemberUpdate) SetMember(u *User) *WorkbookMemberUpdate {
	return wmu.SetMemberID(u.ID)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wmu *WorkbookMemberUpdate) SetWorkbook(w *Workbook) *WorkbookMemberUpdate {
	return wmu.SetWorkbookID(w.ID)
}

// Mutation returns the WorkbookMemberMutation object of the builder.
func (wmu *WorkbookMemberUpdate) Mutation() *WorkbookMemberMutation {
	return wmu.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (wmu *WorkbookMemberUpdate) ClearRole() *WorkbookMemberUpdate {
	wmu.mutation.ClearRole()
	return wmu
}

// ClearMember clears the "member" edge to the User entity.
func (wmu *WorkbookMemberUpdate) ClearMember() *WorkbookMemberUpdate {
	wmu.mutation.ClearMember()
	return wmu
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wmu *WorkbookMemberUpdate) ClearWorkbook() *WorkbookMemberUpdate {
	wmu.mutation.ClearWorkbook()
	return wmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wmu *WorkbookMemberUpdate) Save(ctx context.Context) (int, error) {
	wmu.defaults()
	return withHooks(ctx, wmu.sqlSave, wmu.mutation, wmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wmu *WorkbookMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := wmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wmu *WorkbookMemberUpdate) Exec(ctx context.Context) error {
	_, err := wmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmu *WorkbookMemberUpdate) ExecX(ctx context.Context) {
	if err := wmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wmu *WorkbookMemberUpdate) defaults() {
	if _, ok := wmu.mutation.UpdatedAt(); !ok {
		v := workbookmember.UpdateDefaultUpdatedAt()
		wmu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wmu *WorkbookMemberUpdate) check() error {
	if wmu.mutation.RoleCleared() && len(wmu.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookMember.role"`)
	}
	if wmu.mutation.MemberCleared() && len(wmu.mutation.MemberIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookMember.member"`)
	}
	if wmu.mutation.WorkbookCleared() && len(wmu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookMember.workbook"`)
	}
	return nil
}

func (wmu *WorkbookMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookmember.Table, workbookmember.Columns, sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeUUID))
	if ps := wmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wmu.mutation.CreatedAt(); ok {
		_spec.SetField(workbookmember.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wmu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if wmu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.RoleTable,
			Columns: []string{workbookmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.RoleTable,
			Columns: []string{workbookmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wmu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.MemberTable,
			Columns: []string{workbookmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.MemberTable,
			Columns: []string{workbookmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wmu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.WorkbookTable,
			Columns: []string{workbookmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.WorkbookTable,
			Columns: []string{workbookmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wmu.mutation.done = true
	return n, nil
}

// WorkbookMemberUpdateOne is the builder for updating a single WorkbookMember entity.
type WorkbookMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookMemberMutation
}

// SetCreatedAt sets the "created_at" field.
func (wmuo *WorkbookMemberUpdateOne) SetCreatedAt(t time.Time) *WorkbookMemberUpdateOne {
	wmuo.mutation.SetCreatedAt(t)
	return wmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wmuo *WorkbookMemberUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookMemberUpdateOne {
	if t != nil {
		wmuo.SetCreatedAt(*t)
	}
	return wmuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wmuo *WorkbookMemberUpdateOne) SetUpdatedAt(t time.Time) *WorkbookMemberUpdateOne {
	wmuo.mutation.SetUpdatedAt(t)
	return wmuo
}

// SetRoleID sets the "role_id" field.
func (wmuo *WorkbookMemberUpdateOne) SetRoleID(u uuid.UUID) *WorkbookMemberUpdateOne {
	wmuo.mutation.SetRoleID(u)
	return wmuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (wmuo *WorkbookMemberUpdateOne) SetNillableRoleID(u *uuid.UUID) *WorkbookMemberUpdateOne {
	if u != nil {
		wmuo.SetRoleID(*u)
	}
	return wmuo
}

// SetMemberID sets the "member_id" field.
func (wmuo *WorkbookMemberUpdateOne) SetMemberID(u uuid.UUID) *WorkbookMemberUpdateOne {
	wmuo.mutation.SetMemberID(u)
	return wmuo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (wmuo *WorkbookMemberUpdateOne) SetNillableMemberID(u *uuid.UUID) *WorkbookMemberUpdateOne {
	if u != nil {
		wmuo.SetMemberID(*u)
	}
	return wmuo
}

// SetWorkbookID sets the "workbook_id" field.
func (wmuo *WorkbookMemberUpdateOne) SetWorkbookID(u uuid.UUID) *WorkbookMemberUpdateOne {
	wmuo.mutation.SetWorkbookID(u)
	return wmuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wmuo *WorkbookMemberUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *WorkbookMemberUpdateOne {
	if u != nil {
		wmuo.SetWorkbookID(*u)
	}
	return wmuo
}

// SetRole sets the "role" edge to the Role entity.
func (wmuo *WorkbookMemberUpdateOne) SetRole(r *Role) *WorkbookMemberUpdateOne {
	return wmuo.SetRoleID(r.ID)
}

// SetMember sets the "member" edge to the User entity.
func (wmuo *WorkbookMemberUpdateOne) SetMember(u *User) *WorkbookMemberUpdateOne {
	return wmuo.SetMemberID(u.ID)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wmuo *WorkbookMemberUpdateOne) SetWorkbook(w *Workbook) *WorkbookMemberUpdateOne {
	return wmuo.SetWorkbookID(w.ID)
}

// Mutation returns the WorkbookMemberMutation object of the builder.
func (wmuo *WorkbookMemberUpdateOne) Mutation() *WorkbookMemberMutation {
	return wmuo.mutation
}

// ClearRole clears the "role" edge to the Role entity.
func (wmuo *WorkbookMemberUpdateOne) ClearRole() *WorkbookMemberUpdateOne {
	wmuo.mutation.ClearRole()
	return wmuo
}

// ClearMember clears the "member" edge to the User entity.
func (wmuo *WorkbookMemberUpdateOne) ClearMember() *WorkbookMemberUpdateOne {
	wmuo.mutation.ClearMember()
	return wmuo
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wmuo *WorkbookMemberUpdateOne) ClearWorkbook() *WorkbookMemberUpdateOne {
	wmuo.mutation.ClearWorkbook()
	return wmuo
}

// Where appends a list predicates to the WorkbookMemberUpdate builder.
func (wmuo *WorkbookMemberUpdateOne) Where(ps ...predicate.WorkbookMember) *WorkbookMemberUpdateOne {
	wmuo.mutation.Where(ps...)
	return wmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wmuo *WorkbookMemberUpdateOne) Select(field string, fields ...string) *WorkbookMemberUpdateOne {
	wmuo.fields = append([]string{field}, fields...)
	return wmuo
}

// Save executes the query and returns the updated WorkbookMember entity.
func (wmuo *WorkbookMemberUpdateOne) Save(ctx context.Context) (*WorkbookMember, error) {
	wmuo.defaults()
	return withHooks(ctx, wmuo.sqlSave, wmuo.mutation, wmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wmuo *WorkbookMemberUpdateOne) SaveX(ctx context.Context) *WorkbookMember {
	node, err := wmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wmuo *WorkbookMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := wmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wmuo *WorkbookMemberUpdateOne) ExecX(ctx context.Context) {
	if err := wmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wmuo *WorkbookMemberUpdateOne) defaults() {
	if _, ok := wmuo.mutation.UpdatedAt(); !ok {
		v := workbookmember.UpdateDefaultUpdatedAt()
		wmuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wmuo *WorkbookMemberUpdateOne) check() error {
	if wmuo.mutation.RoleCleared() && len(wmuo.mutation.RoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookMember.role"`)
	}
	if wmuo.mutation.MemberCleared() && len(wmuo.mutation.MemberIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookMember.member"`)
	}
	if wmuo.mutation.WorkbookCleared() && len(wmuo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookMember.workbook"`)
	}
	return nil
}

func (wmuo *WorkbookMemberUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookMember, err error) {
	if err := wmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookmember.Table, workbookmember.Columns, sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeUUID))
	id, ok := wmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookmember.FieldID)
		for _, f := range fields {
			if !workbookmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wmuo.mutation.CreatedAt(); ok {
		_spec.SetField(workbookmember.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookmember.FieldUpdatedAt, field.TypeTime, value)
	}
	if wmuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.RoleTable,
			Columns: []string{workbookmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.RoleTable,
			Columns: []string{workbookmember.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(role.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wmuo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.MemberTable,
			Columns: []string{workbookmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmuo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.MemberTable,
			Columns: []string{workbookmember.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wmuo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.WorkbookTable,
			Columns: []string{workbookmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wmuo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookmember.WorkbookTable,
			Columns: []string{workbookmember.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkbookMember{config: wmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wmuo.mutation.done = true
	return _node, nil
}
