// Code generated by ent, DO NOT EDIT.

package workbookcategoryclosure

import (
	"study-pal-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldUpdatedAt, v))
}

// WorkbookID applies equality check predicate on the "workbook_id" field. It's identical to WorkbookIDEQ.
func WorkbookID(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldWorkbookID, v))
}

// ChildID applies equality check predicate on the "child_id" field. It's identical to ChildIDEQ.
func ChildID(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldChildID, v))
}

// IsRoot applies equality check predicate on the "is_root" field. It's identical to IsRootEQ.
func IsRoot(v bool) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldIsRoot, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldParentID, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldPosition, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldLevel, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLTE(FieldUpdatedAt, v))
}

// WorkbookIDEQ applies the EQ predicate on the "workbook_id" field.
func WorkbookIDEQ(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldWorkbookID, v))
}

// WorkbookIDNEQ applies the NEQ predicate on the "workbook_id" field.
func WorkbookIDNEQ(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldWorkbookID, v))
}

// WorkbookIDIn applies the In predicate on the "workbook_id" field.
func WorkbookIDIn(vs ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldWorkbookID, vs...))
}

// WorkbookIDNotIn applies the NotIn predicate on the "workbook_id" field.
func WorkbookIDNotIn(vs ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldWorkbookID, vs...))
}

// WorkbookIDGT applies the GT predicate on the "workbook_id" field.
func WorkbookIDGT(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGT(FieldWorkbookID, v))
}

// WorkbookIDGTE applies the GTE predicate on the "workbook_id" field.
func WorkbookIDGTE(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGTE(FieldWorkbookID, v))
}

// WorkbookIDLT applies the LT predicate on the "workbook_id" field.
func WorkbookIDLT(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLT(FieldWorkbookID, v))
}

// WorkbookIDLTE applies the LTE predicate on the "workbook_id" field.
func WorkbookIDLTE(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLTE(FieldWorkbookID, v))
}

// ChildIDEQ applies the EQ predicate on the "child_id" field.
func ChildIDEQ(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldChildID, v))
}

// ChildIDNEQ applies the NEQ predicate on the "child_id" field.
func ChildIDNEQ(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldChildID, v))
}

// ChildIDIn applies the In predicate on the "child_id" field.
func ChildIDIn(vs ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldChildID, vs...))
}

// ChildIDNotIn applies the NotIn predicate on the "child_id" field.
func ChildIDNotIn(vs ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldChildID, vs...))
}

// IsRootEQ applies the EQ predicate on the "is_root" field.
func IsRootEQ(v bool) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldIsRoot, v))
}

// IsRootNEQ applies the NEQ predicate on the "is_root" field.
func IsRootNEQ(v bool) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldIsRoot, v))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uuid.UUID) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldParentID, vs...))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLTE(FieldPosition, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.FieldLTE(FieldLevel, v))
}

// HasChildCategory applies the HasEdge predicate on the "child_category" edge.
func HasChildCategory() predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ChildCategoryTable, ChildCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildCategoryWith applies the HasEdge predicate on the "child_category" edge with a given conditions (other predicates).
func HasChildCategoryWith(preds ...predicate.WorkbookCategory) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(func(s *sql.Selector) {
		step := newChildCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParentCategory applies the HasEdge predicate on the "parent_category" edge.
func HasParentCategory() predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ParentCategoryTable, ParentCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentCategoryWith applies the HasEdge predicate on the "parent_category" edge with a given conditions (other predicates).
func HasParentCategoryWith(preds ...predicate.WorkbookCategory) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(func(s *sql.Selector) {
		step := newParentCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkbookCategoryClosure) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkbookCategoryClosure) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkbookCategoryClosure) predicate.WorkbookCategoryClosure {
	return predicate.WorkbookCategoryClosure(sql.NotPredicates(p))
}
