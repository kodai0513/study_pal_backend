// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SelectionProblemAnswerCreate is the builder for creating a SelectionProblemAnswer entity.
type SelectionProblemAnswerCreate struct {
	config
	mutation *SelectionProblemAnswerMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (spac *SelectionProblemAnswerCreate) SetCreatedAt(t time.Time) *SelectionProblemAnswerCreate {
	spac.mutation.SetCreatedAt(t)
	return spac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spac *SelectionProblemAnswerCreate) SetNillableCreatedAt(t *time.Time) *SelectionProblemAnswerCreate {
	if t != nil {
		spac.SetCreatedAt(*t)
	}
	return spac
}

// SetUpdatedAt sets the "updated_at" field.
func (spac *SelectionProblemAnswerCreate) SetUpdatedAt(t time.Time) *SelectionProblemAnswerCreate {
	spac.mutation.SetUpdatedAt(t)
	return spac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spac *SelectionProblemAnswerCreate) SetNillableUpdatedAt(t *time.Time) *SelectionProblemAnswerCreate {
	if t != nil {
		spac.SetUpdatedAt(*t)
	}
	return spac
}

// SetIsCorrect sets the "is_correct" field.
func (spac *SelectionProblemAnswerCreate) SetIsCorrect(b bool) *SelectionProblemAnswerCreate {
	spac.mutation.SetIsCorrect(b)
	return spac
}

// SetSelectionProblemID sets the "selection_problem_id" field.
func (spac *SelectionProblemAnswerCreate) SetSelectionProblemID(u uuid.UUID) *SelectionProblemAnswerCreate {
	spac.mutation.SetSelectionProblemID(u)
	return spac
}

// SetStatement sets the "statement" field.
func (spac *SelectionProblemAnswerCreate) SetStatement(s string) *SelectionProblemAnswerCreate {
	spac.mutation.SetStatement(s)
	return spac
}

// SetID sets the "id" field.
func (spac *SelectionProblemAnswerCreate) SetID(u uuid.UUID) *SelectionProblemAnswerCreate {
	spac.mutation.SetID(u)
	return spac
}

// SetSelectionProblem sets the "selection_problem" edge to the SelectionProblem entity.
func (spac *SelectionProblemAnswerCreate) SetSelectionProblem(s *SelectionProblem) *SelectionProblemAnswerCreate {
	return spac.SetSelectionProblemID(s.ID)
}

// Mutation returns the SelectionProblemAnswerMutation object of the builder.
func (spac *SelectionProblemAnswerCreate) Mutation() *SelectionProblemAnswerMutation {
	return spac.mutation
}

// Save creates the SelectionProblemAnswer in the database.
func (spac *SelectionProblemAnswerCreate) Save(ctx context.Context) (*SelectionProblemAnswer, error) {
	spac.defaults()
	return withHooks(ctx, spac.sqlSave, spac.mutation, spac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spac *SelectionProblemAnswerCreate) SaveX(ctx context.Context) *SelectionProblemAnswer {
	v, err := spac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spac *SelectionProblemAnswerCreate) Exec(ctx context.Context) error {
	_, err := spac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spac *SelectionProblemAnswerCreate) ExecX(ctx context.Context) {
	if err := spac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spac *SelectionProblemAnswerCreate) defaults() {
	if _, ok := spac.mutation.CreatedAt(); !ok {
		v := selectionproblemanswer.DefaultCreatedAt()
		spac.mutation.SetCreatedAt(v)
	}
	if _, ok := spac.mutation.UpdatedAt(); !ok {
		v := selectionproblemanswer.DefaultUpdatedAt()
		spac.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spac *SelectionProblemAnswerCreate) check() error {
	if _, ok := spac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SelectionProblemAnswer.created_at"`)}
	}
	if _, ok := spac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SelectionProblemAnswer.updated_at"`)}
	}
	if _, ok := spac.mutation.IsCorrect(); !ok {
		return &ValidationError{Name: "is_correct", err: errors.New(`ent: missing required field "SelectionProblemAnswer.is_correct"`)}
	}
	if _, ok := spac.mutation.SelectionProblemID(); !ok {
		return &ValidationError{Name: "selection_problem_id", err: errors.New(`ent: missing required field "SelectionProblemAnswer.selection_problem_id"`)}
	}
	if _, ok := spac.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "SelectionProblemAnswer.statement"`)}
	}
	if v, ok := spac.mutation.Statement(); ok {
		if err := selectionproblemanswer.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "SelectionProblemAnswer.statement": %w`, err)}
		}
	}
	if len(spac.mutation.SelectionProblemIDs()) == 0 {
		return &ValidationError{Name: "selection_problem", err: errors.New(`ent: missing required edge "SelectionProblemAnswer.selection_problem"`)}
	}
	return nil
}

func (spac *SelectionProblemAnswerCreate) sqlSave(ctx context.Context) (*SelectionProblemAnswer, error) {
	if err := spac.check(); err != nil {
		return nil, err
	}
	_node, _spec := spac.createSpec()
	if err := sqlgraph.CreateNode(ctx, spac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spac.mutation.id = &_node.ID
	spac.mutation.done = true
	return _node, nil
}

func (spac *SelectionProblemAnswerCreate) createSpec() (*SelectionProblemAnswer, *sqlgraph.CreateSpec) {
	var (
		_node = &SelectionProblemAnswer{config: spac.config}
		_spec = sqlgraph.NewCreateSpec(selectionproblemanswer.Table, sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID))
	)
	if id, ok := spac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spac.mutation.CreatedAt(); ok {
		_spec.SetField(selectionproblemanswer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spac.mutation.UpdatedAt(); ok {
		_spec.SetField(selectionproblemanswer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := spac.mutation.IsCorrect(); ok {
		_spec.SetField(selectionproblemanswer.FieldIsCorrect, field.TypeBool, value)
		_node.IsCorrect = value
	}
	if value, ok := spac.mutation.Statement(); ok {
		_spec.SetField(selectionproblemanswer.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if nodes := spac.mutation.SelectionProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblemanswer.SelectionProblemTable,
			Columns: []string{selectionproblemanswer.SelectionProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SelectionProblemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SelectionProblemAnswerCreateBulk is the builder for creating many SelectionProblemAnswer entities in bulk.
type SelectionProblemAnswerCreateBulk struct {
	config
	err      error
	builders []*SelectionProblemAnswerCreate
}

// Save creates the SelectionProblemAnswer entities in the database.
func (spacb *SelectionProblemAnswerCreateBulk) Save(ctx context.Context) ([]*SelectionProblemAnswer, error) {
	if spacb.err != nil {
		return nil, spacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spacb.builders))
	nodes := make([]*SelectionProblemAnswer, len(spacb.builders))
	mutators := make([]Mutator, len(spacb.builders))
	for i := range spacb.builders {
		func(i int, root context.Context) {
			builder := spacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SelectionProblemAnswerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spacb *SelectionProblemAnswerCreateBulk) SaveX(ctx context.Context) []*SelectionProblemAnswer {
	v, err := spacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spacb *SelectionProblemAnswerCreateBulk) Exec(ctx context.Context) error {
	_, err := spacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spacb *SelectionProblemAnswerCreateBulk) ExecX(ctx context.Context) {
	if err := spacb.Exec(ctx); err != nil {
		panic(err)
	}
}
