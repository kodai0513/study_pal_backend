// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/selectionproblemanswer"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SelectionProblemAnswerDelete is the builder for deleting a SelectionProblemAnswer entity.
type SelectionProblemAnswerDelete struct {
	config
	hooks    []Hook
	mutation *SelectionProblemAnswerMutation
}

// Where appends a list predicates to the SelectionProblemAnswerDelete builder.
func (spad *SelectionProblemAnswerDelete) Where(ps ...predicate.SelectionProblemAnswer) *SelectionProblemAnswerDelete {
	spad.mutation.Where(ps...)
	return spad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (spad *SelectionProblemAnswerDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, spad.sqlExec, spad.mutation, spad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (spad *SelectionProblemAnswerDelete) ExecX(ctx context.Context) int {
	n, err := spad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (spad *SelectionProblemAnswerDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(selectionproblemanswer.Table, sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID))
	if ps := spad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, spad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	spad.mutation.done = true
	return affected, err
}

// SelectionProblemAnswerDeleteOne is the builder for deleting a single SelectionProblemAnswer entity.
type SelectionProblemAnswerDeleteOne struct {
	spad *SelectionProblemAnswerDelete
}

// Where appends a list predicates to the SelectionProblemAnswerDelete builder.
func (spado *SelectionProblemAnswerDeleteOne) Where(ps ...predicate.SelectionProblemAnswer) *SelectionProblemAnswerDeleteOne {
	spado.spad.mutation.Where(ps...)
	return spado
}

// Exec executes the deletion query.
func (spado *SelectionProblemAnswerDeleteOne) Exec(ctx context.Context) error {
	n, err := spado.spad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{selectionproblemanswer.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (spado *SelectionProblemAnswerDeleteOne) ExecX(ctx context.Context) {
	if err := spado.Exec(ctx); err != nil {
		panic(err)
	}
}
