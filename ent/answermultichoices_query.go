// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"study-pal-backend/ent/answermultichoices"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerMultiChoicesQuery is the builder for querying AnswerMultiChoices entities.
type AnswerMultiChoicesQuery struct {
	config
	ctx         *QueryContext
	order       []answermultichoices.OrderOption
	inters      []Interceptor
	predicates  []predicate.AnswerMultiChoices
	withProblem *ProblemQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AnswerMultiChoicesQuery builder.
func (amcq *AnswerMultiChoicesQuery) Where(ps ...predicate.AnswerMultiChoices) *AnswerMultiChoicesQuery {
	amcq.predicates = append(amcq.predicates, ps...)
	return amcq
}

// Limit the number of records to be returned by this query.
func (amcq *AnswerMultiChoicesQuery) Limit(limit int) *AnswerMultiChoicesQuery {
	amcq.ctx.Limit = &limit
	return amcq
}

// Offset to start from.
func (amcq *AnswerMultiChoicesQuery) Offset(offset int) *AnswerMultiChoicesQuery {
	amcq.ctx.Offset = &offset
	return amcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (amcq *AnswerMultiChoicesQuery) Unique(unique bool) *AnswerMultiChoicesQuery {
	amcq.ctx.Unique = &unique
	return amcq
}

// Order specifies how the records should be ordered.
func (amcq *AnswerMultiChoicesQuery) Order(o ...answermultichoices.OrderOption) *AnswerMultiChoicesQuery {
	amcq.order = append(amcq.order, o...)
	return amcq
}

// QueryProblem chains the current query on the "problem" edge.
func (amcq *AnswerMultiChoicesQuery) QueryProblem() *ProblemQuery {
	query := (&ProblemClient{config: amcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := amcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := amcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(answermultichoices.Table, answermultichoices.FieldID, selector),
			sqlgraph.To(problem.Table, problem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, answermultichoices.ProblemTable, answermultichoices.ProblemColumn),
		)
		fromU = sqlgraph.SetNeighbors(amcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AnswerMultiChoices entity from the query.
// Returns a *NotFoundError when no AnswerMultiChoices was found.
func (amcq *AnswerMultiChoicesQuery) First(ctx context.Context) (*AnswerMultiChoices, error) {
	nodes, err := amcq.Limit(1).All(setContextOp(ctx, amcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{answermultichoices.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) FirstX(ctx context.Context) *AnswerMultiChoices {
	node, err := amcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AnswerMultiChoices ID from the query.
// Returns a *NotFoundError when no AnswerMultiChoices ID was found.
func (amcq *AnswerMultiChoicesQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = amcq.Limit(1).IDs(setContextOp(ctx, amcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{answermultichoices.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) FirstIDX(ctx context.Context) int {
	id, err := amcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AnswerMultiChoices entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AnswerMultiChoices entity is found.
// Returns a *NotFoundError when no AnswerMultiChoices entities are found.
func (amcq *AnswerMultiChoicesQuery) Only(ctx context.Context) (*AnswerMultiChoices, error) {
	nodes, err := amcq.Limit(2).All(setContextOp(ctx, amcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{answermultichoices.Label}
	default:
		return nil, &NotSingularError{answermultichoices.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) OnlyX(ctx context.Context) *AnswerMultiChoices {
	node, err := amcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AnswerMultiChoices ID in the query.
// Returns a *NotSingularError when more than one AnswerMultiChoices ID is found.
// Returns a *NotFoundError when no entities are found.
func (amcq *AnswerMultiChoicesQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = amcq.Limit(2).IDs(setContextOp(ctx, amcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{answermultichoices.Label}
	default:
		err = &NotSingularError{answermultichoices.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) OnlyIDX(ctx context.Context) int {
	id, err := amcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AnswerMultiChoicesSlice.
func (amcq *AnswerMultiChoicesQuery) All(ctx context.Context) ([]*AnswerMultiChoices, error) {
	ctx = setContextOp(ctx, amcq.ctx, ent.OpQueryAll)
	if err := amcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AnswerMultiChoices, *AnswerMultiChoicesQuery]()
	return withInterceptors[[]*AnswerMultiChoices](ctx, amcq, qr, amcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) AllX(ctx context.Context) []*AnswerMultiChoices {
	nodes, err := amcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AnswerMultiChoices IDs.
func (amcq *AnswerMultiChoicesQuery) IDs(ctx context.Context) (ids []int, err error) {
	if amcq.ctx.Unique == nil && amcq.path != nil {
		amcq.Unique(true)
	}
	ctx = setContextOp(ctx, amcq.ctx, ent.OpQueryIDs)
	if err = amcq.Select(answermultichoices.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) IDsX(ctx context.Context) []int {
	ids, err := amcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (amcq *AnswerMultiChoicesQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, amcq.ctx, ent.OpQueryCount)
	if err := amcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, amcq, querierCount[*AnswerMultiChoicesQuery](), amcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) CountX(ctx context.Context) int {
	count, err := amcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (amcq *AnswerMultiChoicesQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, amcq.ctx, ent.OpQueryExist)
	switch _, err := amcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (amcq *AnswerMultiChoicesQuery) ExistX(ctx context.Context) bool {
	exist, err := amcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AnswerMultiChoicesQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (amcq *AnswerMultiChoicesQuery) Clone() *AnswerMultiChoicesQuery {
	if amcq == nil {
		return nil
	}
	return &AnswerMultiChoicesQuery{
		config:      amcq.config,
		ctx:         amcq.ctx.Clone(),
		order:       append([]answermultichoices.OrderOption{}, amcq.order...),
		inters:      append([]Interceptor{}, amcq.inters...),
		predicates:  append([]predicate.AnswerMultiChoices{}, amcq.predicates...),
		withProblem: amcq.withProblem.Clone(),
		// clone intermediate query.
		sql:  amcq.sql.Clone(),
		path: amcq.path,
	}
}

// WithProblem tells the query-builder to eager-load the nodes that are connected to
// the "problem" edge. The optional arguments are used to configure the query builder of the edge.
func (amcq *AnswerMultiChoicesQuery) WithProblem(opts ...func(*ProblemQuery)) *AnswerMultiChoicesQuery {
	query := (&ProblemClient{config: amcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	amcq.withProblem = query
	return amcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AnswerMultiChoices.Query().
//		GroupBy(answermultichoices.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (amcq *AnswerMultiChoicesQuery) GroupBy(field string, fields ...string) *AnswerMultiChoicesGroupBy {
	amcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AnswerMultiChoicesGroupBy{build: amcq}
	grbuild.flds = &amcq.ctx.Fields
	grbuild.label = answermultichoices.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AnswerMultiChoices.Query().
//		Select(answermultichoices.FieldCreatedAt).
//		Scan(ctx, &v)
func (amcq *AnswerMultiChoicesQuery) Select(fields ...string) *AnswerMultiChoicesSelect {
	amcq.ctx.Fields = append(amcq.ctx.Fields, fields...)
	sbuild := &AnswerMultiChoicesSelect{AnswerMultiChoicesQuery: amcq}
	sbuild.label = answermultichoices.Label
	sbuild.flds, sbuild.scan = &amcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AnswerMultiChoicesSelect configured with the given aggregations.
func (amcq *AnswerMultiChoicesQuery) Aggregate(fns ...AggregateFunc) *AnswerMultiChoicesSelect {
	return amcq.Select().Aggregate(fns...)
}

func (amcq *AnswerMultiChoicesQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range amcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, amcq); err != nil {
				return err
			}
		}
	}
	for _, f := range amcq.ctx.Fields {
		if !answermultichoices.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if amcq.path != nil {
		prev, err := amcq.path(ctx)
		if err != nil {
			return err
		}
		amcq.sql = prev
	}
	return nil
}

func (amcq *AnswerMultiChoicesQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AnswerMultiChoices, error) {
	var (
		nodes       = []*AnswerMultiChoices{}
		_spec       = amcq.querySpec()
		loadedTypes = [1]bool{
			amcq.withProblem != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AnswerMultiChoices).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AnswerMultiChoices{config: amcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, amcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := amcq.withProblem; query != nil {
		if err := amcq.loadProblem(ctx, query, nodes, nil,
			func(n *AnswerMultiChoices, e *Problem) { n.Edges.Problem = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (amcq *AnswerMultiChoicesQuery) loadProblem(ctx context.Context, query *ProblemQuery, nodes []*AnswerMultiChoices, init func(*AnswerMultiChoices), assign func(*AnswerMultiChoices, *Problem)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AnswerMultiChoices)
	for i := range nodes {
		fk := nodes[i].ProblemID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(problem.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "problem_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (amcq *AnswerMultiChoicesQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := amcq.querySpec()
	_spec.Node.Columns = amcq.ctx.Fields
	if len(amcq.ctx.Fields) > 0 {
		_spec.Unique = amcq.ctx.Unique != nil && *amcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, amcq.driver, _spec)
}

func (amcq *AnswerMultiChoicesQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(answermultichoices.Table, answermultichoices.Columns, sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt))
	_spec.From = amcq.sql
	if unique := amcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if amcq.path != nil {
		_spec.Unique = true
	}
	if fields := amcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answermultichoices.FieldID)
		for i := range fields {
			if fields[i] != answermultichoices.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if amcq.withProblem != nil {
			_spec.Node.AddColumnOnce(answermultichoices.FieldProblemID)
		}
	}
	if ps := amcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := amcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := amcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := amcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (amcq *AnswerMultiChoicesQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(amcq.driver.Dialect())
	t1 := builder.Table(answermultichoices.Table)
	columns := amcq.ctx.Fields
	if len(columns) == 0 {
		columns = answermultichoices.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if amcq.sql != nil {
		selector = amcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if amcq.ctx.Unique != nil && *amcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range amcq.predicates {
		p(selector)
	}
	for _, p := range amcq.order {
		p(selector)
	}
	if offset := amcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := amcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AnswerMultiChoicesGroupBy is the group-by builder for AnswerMultiChoices entities.
type AnswerMultiChoicesGroupBy struct {
	selector
	build *AnswerMultiChoicesQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (amcgb *AnswerMultiChoicesGroupBy) Aggregate(fns ...AggregateFunc) *AnswerMultiChoicesGroupBy {
	amcgb.fns = append(amcgb.fns, fns...)
	return amcgb
}

// Scan applies the selector query and scans the result into the given value.
func (amcgb *AnswerMultiChoicesGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, amcgb.build.ctx, ent.OpQueryGroupBy)
	if err := amcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AnswerMultiChoicesQuery, *AnswerMultiChoicesGroupBy](ctx, amcgb.build, amcgb, amcgb.build.inters, v)
}

func (amcgb *AnswerMultiChoicesGroupBy) sqlScan(ctx context.Context, root *AnswerMultiChoicesQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(amcgb.fns))
	for _, fn := range amcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*amcgb.flds)+len(amcgb.fns))
		for _, f := range *amcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*amcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AnswerMultiChoicesSelect is the builder for selecting fields of AnswerMultiChoices entities.
type AnswerMultiChoicesSelect struct {
	*AnswerMultiChoicesQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (amcs *AnswerMultiChoicesSelect) Aggregate(fns ...AggregateFunc) *AnswerMultiChoicesSelect {
	amcs.fns = append(amcs.fns, fns...)
	return amcs
}

// Scan applies the selector query and scans the result into the given value.
func (amcs *AnswerMultiChoicesSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, amcs.ctx, ent.OpQuerySelect)
	if err := amcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AnswerMultiChoicesQuery, *AnswerMultiChoicesSelect](ctx, amcs.AnswerMultiChoicesQuery, amcs, amcs.inters, v)
}

func (amcs *AnswerMultiChoicesSelect) sqlScan(ctx context.Context, root *AnswerMultiChoicesQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(amcs.fns))
	for _, fn := range amcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*amcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := amcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
