// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/workbookinvitationmember"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkbookInvitationMemberDelete is the builder for deleting a WorkbookInvitationMember entity.
type WorkbookInvitationMemberDelete struct {
	config
	hooks    []Hook
	mutation *WorkbookInvitationMemberMutation
}

// Where appends a list predicates to the WorkbookInvitationMemberDelete builder.
func (wimd *WorkbookInvitationMemberDelete) Where(ps ...predicate.WorkbookInvitationMember) *WorkbookInvitationMemberDelete {
	wimd.mutation.Where(ps...)
	return wimd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wimd *WorkbookInvitationMemberDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wimd.sqlExec, wimd.mutation, wimd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wimd *WorkbookInvitationMemberDelete) ExecX(ctx context.Context) int {
	n, err := wimd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wimd *WorkbookInvitationMemberDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workbookinvitationmember.Table, sqlgraph.NewFieldSpec(workbookinvitationmember.FieldID, field.TypeUUID))
	if ps := wimd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wimd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wimd.mutation.done = true
	return affected, err
}

// WorkbookInvitationMemberDeleteOne is the builder for deleting a single WorkbookInvitationMember entity.
type WorkbookInvitationMemberDeleteOne struct {
	wimd *WorkbookInvitationMemberDelete
}

// Where appends a list predicates to the WorkbookInvitationMemberDelete builder.
func (wimdo *WorkbookInvitationMemberDeleteOne) Where(ps ...predicate.WorkbookInvitationMember) *WorkbookInvitationMemberDeleteOne {
	wimdo.wimd.mutation.Where(ps...)
	return wimdo
}

// Exec executes the deletion query.
func (wimdo *WorkbookInvitationMemberDeleteOne) Exec(ctx context.Context) error {
	n, err := wimdo.wimd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workbookinvitationmember.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wimdo *WorkbookInvitationMemberDeleteOne) ExecX(ctx context.Context) {
	if err := wimdo.Exec(ctx); err != nil {
		panic(err)
	}
}
