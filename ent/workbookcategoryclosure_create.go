// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategoryclosure"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryClosureCreate is the builder for creating a WorkbookCategoryClosure entity.
type WorkbookCategoryClosureCreate struct {
	config
	mutation *WorkbookCategoryClosureMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wccc *WorkbookCategoryClosureCreate) SetCreatedAt(t time.Time) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetCreatedAt(t)
	return wccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wccc *WorkbookCategoryClosureCreate) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryClosureCreate {
	if t != nil {
		wccc.SetCreatedAt(*t)
	}
	return wccc
}

// SetUpdatedAt sets the "updated_at" field.
func (wccc *WorkbookCategoryClosureCreate) SetUpdatedAt(t time.Time) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetUpdatedAt(t)
	return wccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wccc *WorkbookCategoryClosureCreate) SetNillableUpdatedAt(t *time.Time) *WorkbookCategoryClosureCreate {
	if t != nil {
		wccc.SetUpdatedAt(*t)
	}
	return wccc
}

// SetWorkbookID sets the "workbook_id" field.
func (wccc *WorkbookCategoryClosureCreate) SetWorkbookID(u uuid.UUID) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetWorkbookID(u)
	return wccc
}

// SetChildID sets the "child_id" field.
func (wccc *WorkbookCategoryClosureCreate) SetChildID(u uuid.UUID) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetChildID(u)
	return wccc
}

// SetIsRoot sets the "is_root" field.
func (wccc *WorkbookCategoryClosureCreate) SetIsRoot(b bool) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetIsRoot(b)
	return wccc
}

// SetParentID sets the "parent_id" field.
func (wccc *WorkbookCategoryClosureCreate) SetParentID(u uuid.UUID) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetParentID(u)
	return wccc
}

// SetPosition sets the "position" field.
func (wccc *WorkbookCategoryClosureCreate) SetPosition(i int) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetPosition(i)
	return wccc
}

// SetLevel sets the "level" field.
func (wccc *WorkbookCategoryClosureCreate) SetLevel(i int) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetLevel(i)
	return wccc
}

// SetID sets the "id" field.
func (wccc *WorkbookCategoryClosureCreate) SetID(u uuid.UUID) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetID(u)
	return wccc
}

// SetChildCategoryID sets the "child_category" edge to the WorkbookCategory entity by ID.
func (wccc *WorkbookCategoryClosureCreate) SetChildCategoryID(id uuid.UUID) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetChildCategoryID(id)
	return wccc
}

// SetChildCategory sets the "child_category" edge to the WorkbookCategory entity.
func (wccc *WorkbookCategoryClosureCreate) SetChildCategory(w *WorkbookCategory) *WorkbookCategoryClosureCreate {
	return wccc.SetChildCategoryID(w.ID)
}

// SetParentCategoryID sets the "parent_category" edge to the WorkbookCategory entity by ID.
func (wccc *WorkbookCategoryClosureCreate) SetParentCategoryID(id uuid.UUID) *WorkbookCategoryClosureCreate {
	wccc.mutation.SetParentCategoryID(id)
	return wccc
}

// SetParentCategory sets the "parent_category" edge to the WorkbookCategory entity.
func (wccc *WorkbookCategoryClosureCreate) SetParentCategory(w *WorkbookCategory) *WorkbookCategoryClosureCreate {
	return wccc.SetParentCategoryID(w.ID)
}

// Mutation returns the WorkbookCategoryClosureMutation object of the builder.
func (wccc *WorkbookCategoryClosureCreate) Mutation() *WorkbookCategoryClosureMutation {
	return wccc.mutation
}

// Save creates the WorkbookCategoryClosure in the database.
func (wccc *WorkbookCategoryClosureCreate) Save(ctx context.Context) (*WorkbookCategoryClosure, error) {
	wccc.defaults()
	return withHooks(ctx, wccc.sqlSave, wccc.mutation, wccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wccc *WorkbookCategoryClosureCreate) SaveX(ctx context.Context) *WorkbookCategoryClosure {
	v, err := wccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wccc *WorkbookCategoryClosureCreate) Exec(ctx context.Context) error {
	_, err := wccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccc *WorkbookCategoryClosureCreate) ExecX(ctx context.Context) {
	if err := wccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wccc *WorkbookCategoryClosureCreate) defaults() {
	if _, ok := wccc.mutation.CreatedAt(); !ok {
		v := workbookcategoryclosure.DefaultCreatedAt()
		wccc.mutation.SetCreatedAt(v)
	}
	if _, ok := wccc.mutation.UpdatedAt(); !ok {
		v := workbookcategoryclosure.DefaultUpdatedAt()
		wccc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wccc *WorkbookCategoryClosureCreate) check() error {
	if _, ok := wccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.created_at"`)}
	}
	if _, ok := wccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.updated_at"`)}
	}
	if _, ok := wccc.mutation.WorkbookID(); !ok {
		return &ValidationError{Name: "workbook_id", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.workbook_id"`)}
	}
	if _, ok := wccc.mutation.ChildID(); !ok {
		return &ValidationError{Name: "child_id", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.child_id"`)}
	}
	if _, ok := wccc.mutation.IsRoot(); !ok {
		return &ValidationError{Name: "is_root", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.is_root"`)}
	}
	if _, ok := wccc.mutation.ParentID(); !ok {
		return &ValidationError{Name: "parent_id", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.parent_id"`)}
	}
	if _, ok := wccc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.position"`)}
	}
	if _, ok := wccc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "WorkbookCategoryClosure.level"`)}
	}
	if len(wccc.mutation.ChildCategoryIDs()) == 0 {
		return &ValidationError{Name: "child_category", err: errors.New(`ent: missing required edge "WorkbookCategoryClosure.child_category"`)}
	}
	if len(wccc.mutation.ParentCategoryIDs()) == 0 {
		return &ValidationError{Name: "parent_category", err: errors.New(`ent: missing required edge "WorkbookCategoryClosure.parent_category"`)}
	}
	return nil
}

func (wccc *WorkbookCategoryClosureCreate) sqlSave(ctx context.Context) (*WorkbookCategoryClosure, error) {
	if err := wccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wccc.mutation.id = &_node.ID
	wccc.mutation.done = true
	return _node, nil
}

func (wccc *WorkbookCategoryClosureCreate) createSpec() (*WorkbookCategoryClosure, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkbookCategoryClosure{config: wccc.config}
		_spec = sqlgraph.NewCreateSpec(workbookcategoryclosure.Table, sqlgraph.NewFieldSpec(workbookcategoryclosure.FieldID, field.TypeUUID))
	)
	if id, ok := wccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wccc.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategoryclosure.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wccc.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategoryclosure.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wccc.mutation.WorkbookID(); ok {
		_spec.SetField(workbookcategoryclosure.FieldWorkbookID, field.TypeUUID, value)
		_node.WorkbookID = value
	}
	if value, ok := wccc.mutation.IsRoot(); ok {
		_spec.SetField(workbookcategoryclosure.FieldIsRoot, field.TypeBool, value)
		_node.IsRoot = value
	}
	if value, ok := wccc.mutation.Position(); ok {
		_spec.SetField(workbookcategoryclosure.FieldPosition, field.TypeInt, value)
		_node.Position = value
	}
	if value, ok := wccc.mutation.Level(); ok {
		_spec.SetField(workbookcategoryclosure.FieldLevel, field.TypeInt, value)
		_node.Level = value
	}
	if nodes := wccc.mutation.ChildCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ChildCategoryTable,
			Columns: []string{workbookcategoryclosure.ChildCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ChildID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wccc.mutation.ParentCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ParentCategoryTable,
			Columns: []string{workbookcategoryclosure.ParentCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkbookCategoryClosureCreateBulk is the builder for creating many WorkbookCategoryClosure entities in bulk.
type WorkbookCategoryClosureCreateBulk struct {
	config
	err      error
	builders []*WorkbookCategoryClosureCreate
}

// Save creates the WorkbookCategoryClosure entities in the database.
func (wcccb *WorkbookCategoryClosureCreateBulk) Save(ctx context.Context) ([]*WorkbookCategoryClosure, error) {
	if wcccb.err != nil {
		return nil, wcccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcccb.builders))
	nodes := make([]*WorkbookCategoryClosure, len(wcccb.builders))
	mutators := make([]Mutator, len(wcccb.builders))
	for i := range wcccb.builders {
		func(i int, root context.Context) {
			builder := wcccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkbookCategoryClosureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcccb *WorkbookCategoryClosureCreateBulk) SaveX(ctx context.Context) []*WorkbookCategoryClosure {
	v, err := wcccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcccb *WorkbookCategoryClosureCreateBulk) Exec(ctx context.Context) error {
	_, err := wcccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcccb *WorkbookCategoryClosureCreateBulk) ExecX(ctx context.Context) {
	if err := wcccb.Exec(ctx); err != nil {
		panic(err)
	}
}
