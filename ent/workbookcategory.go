// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkbookCategory is the model entity for the WorkbookCategory schema.
type WorkbookCategory struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// WorkbookID holds the value of the "workbook_id" field.
	WorkbookID uuid.UUID `json:"workbook_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkbookCategoryQuery when eager-loading is set.
	Edges        WorkbookCategoryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkbookCategoryEdges holds the relations/edges for other nodes in the graph.
type WorkbookCategoryEdges struct {
	// DescriptionProblems holds the value of the description_problems edge.
	DescriptionProblems []*DescriptionProblem `json:"description_problems,omitempty"`
	// SelectionProblems holds the value of the selection_problems edge.
	SelectionProblems []*SelectionProblem `json:"selection_problems,omitempty"`
	// TrueOrFalseProblems holds the value of the true_or_false_problems edge.
	TrueOrFalseProblems []*TrueOrFalseProblem `json:"true_or_false_problems,omitempty"`
	// Workbook holds the value of the workbook edge.
	Workbook *Workbook `json:"workbook,omitempty"`
	// WorkbookCategoryDetails holds the value of the workbook_category_details edge.
	WorkbookCategoryDetails []*WorkbookCategoryDetail `json:"workbook_category_details,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// DescriptionProblemsOrErr returns the DescriptionProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryEdges) DescriptionProblemsOrErr() ([]*DescriptionProblem, error) {
	if e.loadedTypes[0] {
		return e.DescriptionProblems, nil
	}
	return nil, &NotLoadedError{edge: "description_problems"}
}

// SelectionProblemsOrErr returns the SelectionProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryEdges) SelectionProblemsOrErr() ([]*SelectionProblem, error) {
	if e.loadedTypes[1] {
		return e.SelectionProblems, nil
	}
	return nil, &NotLoadedError{edge: "selection_problems"}
}

// TrueOrFalseProblemsOrErr returns the TrueOrFalseProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryEdges) TrueOrFalseProblemsOrErr() ([]*TrueOrFalseProblem, error) {
	if e.loadedTypes[2] {
		return e.TrueOrFalseProblems, nil
	}
	return nil, &NotLoadedError{edge: "true_or_false_problems"}
}

// WorkbookOrErr returns the Workbook value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookCategoryEdges) WorkbookOrErr() (*Workbook, error) {
	if e.Workbook != nil {
		return e.Workbook, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: workbook.Label}
	}
	return nil, &NotLoadedError{edge: "workbook"}
}

// WorkbookCategoryDetailsOrErr returns the WorkbookCategoryDetails value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryEdges) WorkbookCategoryDetailsOrErr() ([]*WorkbookCategoryDetail, error) {
	if e.loadedTypes[4] {
		return e.WorkbookCategoryDetails, nil
	}
	return nil, &NotLoadedError{edge: "workbook_category_details"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkbookCategory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbookcategory.FieldName:
			values[i] = new(sql.NullString)
		case workbookcategory.FieldCreatedAt, workbookcategory.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workbookcategory.FieldID, workbookcategory.FieldWorkbookID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkbookCategory fields.
func (wc *WorkbookCategory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbookcategory.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wc.ID = *value
			}
		case workbookcategory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wc.CreatedAt = value.Time
			}
		case workbookcategory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wc.UpdatedAt = value.Time
			}
		case workbookcategory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wc.Name = value.String
			}
		case workbookcategory.FieldWorkbookID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_id", values[i])
			} else if value != nil {
				wc.WorkbookID = *value
			}
		default:
			wc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkbookCategory.
// This includes values selected through modifiers, order, etc.
func (wc *WorkbookCategory) Value(name string) (ent.Value, error) {
	return wc.selectValues.Get(name)
}

// QueryDescriptionProblems queries the "description_problems" edge of the WorkbookCategory entity.
func (wc *WorkbookCategory) QueryDescriptionProblems() *DescriptionProblemQuery {
	return NewWorkbookCategoryClient(wc.config).QueryDescriptionProblems(wc)
}

// QuerySelectionProblems queries the "selection_problems" edge of the WorkbookCategory entity.
func (wc *WorkbookCategory) QuerySelectionProblems() *SelectionProblemQuery {
	return NewWorkbookCategoryClient(wc.config).QuerySelectionProblems(wc)
}

// QueryTrueOrFalseProblems queries the "true_or_false_problems" edge of the WorkbookCategory entity.
func (wc *WorkbookCategory) QueryTrueOrFalseProblems() *TrueOrFalseProblemQuery {
	return NewWorkbookCategoryClient(wc.config).QueryTrueOrFalseProblems(wc)
}

// QueryWorkbook queries the "workbook" edge of the WorkbookCategory entity.
func (wc *WorkbookCategory) QueryWorkbook() *WorkbookQuery {
	return NewWorkbookCategoryClient(wc.config).QueryWorkbook(wc)
}

// QueryWorkbookCategoryDetails queries the "workbook_category_details" edge of the WorkbookCategory entity.
func (wc *WorkbookCategory) QueryWorkbookCategoryDetails() *WorkbookCategoryDetailQuery {
	return NewWorkbookCategoryClient(wc.config).QueryWorkbookCategoryDetails(wc)
}

// Update returns a builder for updating this WorkbookCategory.
// Note that you need to call WorkbookCategory.Unwrap() before calling this method if this WorkbookCategory
// was returned from a transaction, and the transaction was committed or rolled back.
func (wc *WorkbookCategory) Update() *WorkbookCategoryUpdateOne {
	return NewWorkbookCategoryClient(wc.config).UpdateOne(wc)
}

// Unwrap unwraps the WorkbookCategory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wc *WorkbookCategory) Unwrap() *WorkbookCategory {
	_tx, ok := wc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkbookCategory is not a transactional entity")
	}
	wc.config.driver = _tx.drv
	return wc
}

// String implements the fmt.Stringer.
func (wc *WorkbookCategory) String() string {
	var builder strings.Builder
	builder.WriteString("WorkbookCategory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wc.Name)
	builder.WriteString(", ")
	builder.WriteString("workbook_id=")
	builder.WriteString(fmt.Sprintf("%v", wc.WorkbookID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkbookCategories is a parsable slice of WorkbookCategory.
type WorkbookCategories []*WorkbookCategory
