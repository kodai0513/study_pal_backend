// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/answerdescription"
	"study-pal-backend/ent/problem"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// AnswerDescriptionCreate is the builder for creating a AnswerDescription entity.
type AnswerDescriptionCreate struct {
	config
	mutation *AnswerDescriptionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (adc *AnswerDescriptionCreate) SetCreatedAt(t time.Time) *AnswerDescriptionCreate {
	adc.mutation.SetCreatedAt(t)
	return adc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adc *AnswerDescriptionCreate) SetNillableCreatedAt(t *time.Time) *AnswerDescriptionCreate {
	if t != nil {
		adc.SetCreatedAt(*t)
	}
	return adc
}

// SetUpdatedAt sets the "updated_at" field.
func (adc *AnswerDescriptionCreate) SetUpdatedAt(t time.Time) *AnswerDescriptionCreate {
	adc.mutation.SetUpdatedAt(t)
	return adc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (adc *AnswerDescriptionCreate) SetNillableUpdatedAt(t *time.Time) *AnswerDescriptionCreate {
	if t != nil {
		adc.SetUpdatedAt(*t)
	}
	return adc
}

// SetName sets the "name" field.
func (adc *AnswerDescriptionCreate) SetName(s string) *AnswerDescriptionCreate {
	adc.mutation.SetName(s)
	return adc
}

// SetProblemID sets the "problem_id" field.
func (adc *AnswerDescriptionCreate) SetProblemID(u uuid.UUID) *AnswerDescriptionCreate {
	adc.mutation.SetProblemID(u)
	return adc
}

// SetID sets the "id" field.
func (adc *AnswerDescriptionCreate) SetID(u uuid.UUID) *AnswerDescriptionCreate {
	adc.mutation.SetID(u)
	return adc
}

// SetProblem sets the "problem" edge to the Problem entity.
func (adc *AnswerDescriptionCreate) SetProblem(p *Problem) *AnswerDescriptionCreate {
	return adc.SetProblemID(p.ID)
}

// Mutation returns the AnswerDescriptionMutation object of the builder.
func (adc *AnswerDescriptionCreate) Mutation() *AnswerDescriptionMutation {
	return adc.mutation
}

// Save creates the AnswerDescription in the database.
func (adc *AnswerDescriptionCreate) Save(ctx context.Context) (*AnswerDescription, error) {
	adc.defaults()
	return withHooks(ctx, adc.sqlSave, adc.mutation, adc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (adc *AnswerDescriptionCreate) SaveX(ctx context.Context) *AnswerDescription {
	v, err := adc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adc *AnswerDescriptionCreate) Exec(ctx context.Context) error {
	_, err := adc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adc *AnswerDescriptionCreate) ExecX(ctx context.Context) {
	if err := adc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adc *AnswerDescriptionCreate) defaults() {
	if _, ok := adc.mutation.CreatedAt(); !ok {
		v := answerdescription.DefaultCreatedAt()
		adc.mutation.SetCreatedAt(v)
	}
	if _, ok := adc.mutation.UpdatedAt(); !ok {
		v := answerdescription.DefaultUpdatedAt()
		adc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adc *AnswerDescriptionCreate) check() error {
	if _, ok := adc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AnswerDescription.created_at"`)}
	}
	if _, ok := adc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AnswerDescription.updated_at"`)}
	}
	if _, ok := adc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AnswerDescription.name"`)}
	}
	if v, ok := adc.mutation.Name(); ok {
		if err := answerdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnswerDescription.name": %w`, err)}
		}
	}
	if _, ok := adc.mutation.ProblemID(); !ok {
		return &ValidationError{Name: "problem_id", err: errors.New(`ent: missing required field "AnswerDescription.problem_id"`)}
	}
	if len(adc.mutation.ProblemIDs()) == 0 {
		return &ValidationError{Name: "problem", err: errors.New(`ent: missing required edge "AnswerDescription.problem"`)}
	}
	return nil
}

func (adc *AnswerDescriptionCreate) sqlSave(ctx context.Context) (*AnswerDescription, error) {
	if err := adc.check(); err != nil {
		return nil, err
	}
	_node, _spec := adc.createSpec()
	if err := sqlgraph.CreateNode(ctx, adc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	adc.mutation.id = &_node.ID
	adc.mutation.done = true
	return _node, nil
}

func (adc *AnswerDescriptionCreate) createSpec() (*AnswerDescription, *sqlgraph.CreateSpec) {
	var (
		_node = &AnswerDescription{config: adc.config}
		_spec = sqlgraph.NewCreateSpec(answerdescription.Table, sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeUUID))
	)
	if id, ok := adc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := adc.mutation.CreatedAt(); ok {
		_spec.SetField(answerdescription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := adc.mutation.UpdatedAt(); ok {
		_spec.SetField(answerdescription.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := adc.mutation.Name(); ok {
		_spec.SetField(answerdescription.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := adc.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   answerdescription.ProblemTable,
			Columns: []string{answerdescription.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProblemID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AnswerDescriptionCreateBulk is the builder for creating many AnswerDescription entities in bulk.
type AnswerDescriptionCreateBulk struct {
	config
	err      error
	builders []*AnswerDescriptionCreate
}

// Save creates the AnswerDescription entities in the database.
func (adcb *AnswerDescriptionCreateBulk) Save(ctx context.Context) ([]*AnswerDescription, error) {
	if adcb.err != nil {
		return nil, adcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(adcb.builders))
	nodes := make([]*AnswerDescription, len(adcb.builders))
	mutators := make([]Mutator, len(adcb.builders))
	for i := range adcb.builders {
		func(i int, root context.Context) {
			builder := adcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AnswerDescriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, adcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, adcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, adcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (adcb *AnswerDescriptionCreateBulk) SaveX(ctx context.Context) []*AnswerDescription {
	v, err := adcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (adcb *AnswerDescriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := adcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adcb *AnswerDescriptionCreateBulk) ExecX(ctx context.Context) {
	if err := adcb.Exec(ctx); err != nil {
		panic(err)
	}
}
