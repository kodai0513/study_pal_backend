// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"study-pal-backend/ent/answerdescription"
	"study-pal-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerDescriptionDelete is the builder for deleting a AnswerDescription entity.
type AnswerDescriptionDelete struct {
	config
	hooks    []Hook
	mutation *AnswerDescriptionMutation
}

// Where appends a list predicates to the AnswerDescriptionDelete builder.
func (add *AnswerDescriptionDelete) Where(ps ...predicate.AnswerDescription) *AnswerDescriptionDelete {
	add.mutation.Where(ps...)
	return add
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (add *AnswerDescriptionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, add.sqlExec, add.mutation, add.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (add *AnswerDescriptionDelete) ExecX(ctx context.Context) int {
	n, err := add.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (add *AnswerDescriptionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(answerdescription.Table, sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeUUID))
	if ps := add.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, add.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	add.mutation.done = true
	return affected, err
}

// AnswerDescriptionDeleteOne is the builder for deleting a single AnswerDescription entity.
type AnswerDescriptionDeleteOne struct {
	add *AnswerDescriptionDelete
}

// Where appends a list predicates to the AnswerDescriptionDelete builder.
func (addo *AnswerDescriptionDeleteOne) Where(ps ...predicate.AnswerDescription) *AnswerDescriptionDeleteOne {
	addo.add.mutation.Where(ps...)
	return addo
}

// Exec executes the deletion query.
func (addo *AnswerDescriptionDeleteOne) Exec(ctx context.Context) error {
	n, err := addo.add.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{answerdescription.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (addo *AnswerDescriptionDeleteOne) ExecX(ctx context.Context) {
	if err := addo.Exec(ctx); err != nil {
		panic(err)
	}
}
