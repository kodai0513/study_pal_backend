// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SelectionProblemAnswerUpdate is the builder for updating SelectionProblemAnswer entities.
type SelectionProblemAnswerUpdate struct {
	config
	hooks    []Hook
	mutation *SelectionProblemAnswerMutation
}

// Where appends a list predicates to the SelectionProblemAnswerUpdate builder.
func (spau *SelectionProblemAnswerUpdate) Where(ps ...predicate.SelectionProblemAnswer) *SelectionProblemAnswerUpdate {
	spau.mutation.Where(ps...)
	return spau
}

// SetCreatedAt sets the "created_at" field.
func (spau *SelectionProblemAnswerUpdate) SetCreatedAt(t time.Time) *SelectionProblemAnswerUpdate {
	spau.mutation.SetCreatedAt(t)
	return spau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spau *SelectionProblemAnswerUpdate) SetNillableCreatedAt(t *time.Time) *SelectionProblemAnswerUpdate {
	if t != nil {
		spau.SetCreatedAt(*t)
	}
	return spau
}

// SetUpdatedAt sets the "updated_at" field.
func (spau *SelectionProblemAnswerUpdate) SetUpdatedAt(t time.Time) *SelectionProblemAnswerUpdate {
	spau.mutation.SetUpdatedAt(t)
	return spau
}

// SetIsCorrect sets the "is_correct" field.
func (spau *SelectionProblemAnswerUpdate) SetIsCorrect(b bool) *SelectionProblemAnswerUpdate {
	spau.mutation.SetIsCorrect(b)
	return spau
}

// SetNillableIsCorrect sets the "is_correct" field if the given value is not nil.
func (spau *SelectionProblemAnswerUpdate) SetNillableIsCorrect(b *bool) *SelectionProblemAnswerUpdate {
	if b != nil {
		spau.SetIsCorrect(*b)
	}
	return spau
}

// SetSelectionProblemID sets the "selection_problem_id" field.
func (spau *SelectionProblemAnswerUpdate) SetSelectionProblemID(u uuid.UUID) *SelectionProblemAnswerUpdate {
	spau.mutation.SetSelectionProblemID(u)
	return spau
}

// SetNillableSelectionProblemID sets the "selection_problem_id" field if the given value is not nil.
func (spau *SelectionProblemAnswerUpdate) SetNillableSelectionProblemID(u *uuid.UUID) *SelectionProblemAnswerUpdate {
	if u != nil {
		spau.SetSelectionProblemID(*u)
	}
	return spau
}

// SetStatement sets the "statement" field.
func (spau *SelectionProblemAnswerUpdate) SetStatement(s string) *SelectionProblemAnswerUpdate {
	spau.mutation.SetStatement(s)
	return spau
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (spau *SelectionProblemAnswerUpdate) SetNillableStatement(s *string) *SelectionProblemAnswerUpdate {
	if s != nil {
		spau.SetStatement(*s)
	}
	return spau
}

// SetSelectionProblem sets the "selection_problem" edge to the SelectionProblem entity.
func (spau *SelectionProblemAnswerUpdate) SetSelectionProblem(s *SelectionProblem) *SelectionProblemAnswerUpdate {
	return spau.SetSelectionProblemID(s.ID)
}

// Mutation returns the SelectionProblemAnswerMutation object of the builder.
func (spau *SelectionProblemAnswerUpdate) Mutation() *SelectionProblemAnswerMutation {
	return spau.mutation
}

// ClearSelectionProblem clears the "selection_problem" edge to the SelectionProblem entity.
func (spau *SelectionProblemAnswerUpdate) ClearSelectionProblem() *SelectionProblemAnswerUpdate {
	spau.mutation.ClearSelectionProblem()
	return spau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spau *SelectionProblemAnswerUpdate) Save(ctx context.Context) (int, error) {
	spau.defaults()
	return withHooks(ctx, spau.sqlSave, spau.mutation, spau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spau *SelectionProblemAnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := spau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spau *SelectionProblemAnswerUpdate) Exec(ctx context.Context) error {
	_, err := spau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spau *SelectionProblemAnswerUpdate) ExecX(ctx context.Context) {
	if err := spau.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spau *SelectionProblemAnswerUpdate) defaults() {
	if _, ok := spau.mutation.UpdatedAt(); !ok {
		v := selectionproblemanswer.UpdateDefaultUpdatedAt()
		spau.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spau *SelectionProblemAnswerUpdate) check() error {
	if v, ok := spau.mutation.Statement(); ok {
		if err := selectionproblemanswer.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "SelectionProblemAnswer.statement": %w`, err)}
		}
	}
	if spau.mutation.SelectionProblemCleared() && len(spau.mutation.SelectionProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SelectionProblemAnswer.selection_problem"`)
	}
	return nil
}

func (spau *SelectionProblemAnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(selectionproblemanswer.Table, selectionproblemanswer.Columns, sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID))
	if ps := spau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spau.mutation.CreatedAt(); ok {
		_spec.SetField(selectionproblemanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := spau.mutation.UpdatedAt(); ok {
		_spec.SetField(selectionproblemanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spau.mutation.IsCorrect(); ok {
		_spec.SetField(selectionproblemanswer.FieldIsCorrect, field.TypeBool, value)
	}
	if value, ok := spau.mutation.Statement(); ok {
		_spec.SetField(selectionproblemanswer.FieldStatement, field.TypeString, value)
	}
	if spau.mutation.SelectionProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblemanswer.SelectionProblemTable,
			Columns: []string{selectionproblemanswer.SelectionProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spau.mutation.SelectionProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblemanswer.SelectionProblemTable,
			Columns: []string{selectionproblemanswer.SelectionProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{selectionproblemanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spau.mutation.done = true
	return n, nil
}

// SelectionProblemAnswerUpdateOne is the builder for updating a single SelectionProblemAnswer entity.
type SelectionProblemAnswerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SelectionProblemAnswerMutation
}

// SetCreatedAt sets the "created_at" field.
func (spauo *SelectionProblemAnswerUpdateOne) SetCreatedAt(t time.Time) *SelectionProblemAnswerUpdateOne {
	spauo.mutation.SetCreatedAt(t)
	return spauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spauo *SelectionProblemAnswerUpdateOne) SetNillableCreatedAt(t *time.Time) *SelectionProblemAnswerUpdateOne {
	if t != nil {
		spauo.SetCreatedAt(*t)
	}
	return spauo
}

// SetUpdatedAt sets the "updated_at" field.
func (spauo *SelectionProblemAnswerUpdateOne) SetUpdatedAt(t time.Time) *SelectionProblemAnswerUpdateOne {
	spauo.mutation.SetUpdatedAt(t)
	return spauo
}

// SetIsCorrect sets the "is_correct" field.
func (spauo *SelectionProblemAnswerUpdateOne) SetIsCorrect(b bool) *SelectionProblemAnswerUpdateOne {
	spauo.mutation.SetIsCorrect(b)
	return spauo
}

// SetNillableIsCorrect sets the "is_correct" field if the given value is not nil.
func (spauo *SelectionProblemAnswerUpdateOne) SetNillableIsCorrect(b *bool) *SelectionProblemAnswerUpdateOne {
	if b != nil {
		spauo.SetIsCorrect(*b)
	}
	return spauo
}

// SetSelectionProblemID sets the "selection_problem_id" field.
func (spauo *SelectionProblemAnswerUpdateOne) SetSelectionProblemID(u uuid.UUID) *SelectionProblemAnswerUpdateOne {
	spauo.mutation.SetSelectionProblemID(u)
	return spauo
}

// SetNillableSelectionProblemID sets the "selection_problem_id" field if the given value is not nil.
func (spauo *SelectionProblemAnswerUpdateOne) SetNillableSelectionProblemID(u *uuid.UUID) *SelectionProblemAnswerUpdateOne {
	if u != nil {
		spauo.SetSelectionProblemID(*u)
	}
	return spauo
}

// SetStatement sets the "statement" field.
func (spauo *SelectionProblemAnswerUpdateOne) SetStatement(s string) *SelectionProblemAnswerUpdateOne {
	spauo.mutation.SetStatement(s)
	return spauo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (spauo *SelectionProblemAnswerUpdateOne) SetNillableStatement(s *string) *SelectionProblemAnswerUpdateOne {
	if s != nil {
		spauo.SetStatement(*s)
	}
	return spauo
}

// SetSelectionProblem sets the "selection_problem" edge to the SelectionProblem entity.
func (spauo *SelectionProblemAnswerUpdateOne) SetSelectionProblem(s *SelectionProblem) *SelectionProblemAnswerUpdateOne {
	return spauo.SetSelectionProblemID(s.ID)
}

// Mutation returns the SelectionProblemAnswerMutation object of the builder.
func (spauo *SelectionProblemAnswerUpdateOne) Mutation() *SelectionProblemAnswerMutation {
	return spauo.mutation
}

// ClearSelectionProblem clears the "selection_problem" edge to the SelectionProblem entity.
func (spauo *SelectionProblemAnswerUpdateOne) ClearSelectionProblem() *SelectionProblemAnswerUpdateOne {
	spauo.mutation.ClearSelectionProblem()
	return spauo
}

// Where appends a list predicates to the SelectionProblemAnswerUpdate builder.
func (spauo *SelectionProblemAnswerUpdateOne) Where(ps ...predicate.SelectionProblemAnswer) *SelectionProblemAnswerUpdateOne {
	spauo.mutation.Where(ps...)
	return spauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spauo *SelectionProblemAnswerUpdateOne) Select(field string, fields ...string) *SelectionProblemAnswerUpdateOne {
	spauo.fields = append([]string{field}, fields...)
	return spauo
}

// Save executes the query and returns the updated SelectionProblemAnswer entity.
func (spauo *SelectionProblemAnswerUpdateOne) Save(ctx context.Context) (*SelectionProblemAnswer, error) {
	spauo.defaults()
	return withHooks(ctx, spauo.sqlSave, spauo.mutation, spauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spauo *SelectionProblemAnswerUpdateOne) SaveX(ctx context.Context) *SelectionProblemAnswer {
	node, err := spauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spauo *SelectionProblemAnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := spauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spauo *SelectionProblemAnswerUpdateOne) ExecX(ctx context.Context) {
	if err := spauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spauo *SelectionProblemAnswerUpdateOne) defaults() {
	if _, ok := spauo.mutation.UpdatedAt(); !ok {
		v := selectionproblemanswer.UpdateDefaultUpdatedAt()
		spauo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spauo *SelectionProblemAnswerUpdateOne) check() error {
	if v, ok := spauo.mutation.Statement(); ok {
		if err := selectionproblemanswer.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "SelectionProblemAnswer.statement": %w`, err)}
		}
	}
	if spauo.mutation.SelectionProblemCleared() && len(spauo.mutation.SelectionProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SelectionProblemAnswer.selection_problem"`)
	}
	return nil
}

func (spauo *SelectionProblemAnswerUpdateOne) sqlSave(ctx context.Context) (_node *SelectionProblemAnswer, err error) {
	if err := spauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(selectionproblemanswer.Table, selectionproblemanswer.Columns, sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID))
	id, ok := spauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SelectionProblemAnswer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, selectionproblemanswer.FieldID)
		for _, f := range fields {
			if !selectionproblemanswer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != selectionproblemanswer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spauo.mutation.CreatedAt(); ok {
		_spec.SetField(selectionproblemanswer.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := spauo.mutation.UpdatedAt(); ok {
		_spec.SetField(selectionproblemanswer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spauo.mutation.IsCorrect(); ok {
		_spec.SetField(selectionproblemanswer.FieldIsCorrect, field.TypeBool, value)
	}
	if value, ok := spauo.mutation.Statement(); ok {
		_spec.SetField(selectionproblemanswer.FieldStatement, field.TypeString, value)
	}
	if spauo.mutation.SelectionProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblemanswer.SelectionProblemTable,
			Columns: []string{selectionproblemanswer.SelectionProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spauo.mutation.SelectionProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblemanswer.SelectionProblemTable,
			Columns: []string{selectionproblemanswer.SelectionProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SelectionProblemAnswer{config: spauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{selectionproblemanswer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spauo.mutation.done = true
	return _node, nil
}
