// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbookcategoryclassification"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryClassificationQuery is the builder for querying WorkbookCategoryClassification entities.
type WorkbookCategoryClassificationQuery struct {
	config
	ctx          *QueryContext
	order        []workbookcategoryclassification.OrderOption
	inters       []Interceptor
	predicates   []predicate.WorkbookCategoryClassification
	withProblems *ProblemQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkbookCategoryClassificationQuery builder.
func (wccq *WorkbookCategoryClassificationQuery) Where(ps ...predicate.WorkbookCategoryClassification) *WorkbookCategoryClassificationQuery {
	wccq.predicates = append(wccq.predicates, ps...)
	return wccq
}

// Limit the number of records to be returned by this query.
func (wccq *WorkbookCategoryClassificationQuery) Limit(limit int) *WorkbookCategoryClassificationQuery {
	wccq.ctx.Limit = &limit
	return wccq
}

// Offset to start from.
func (wccq *WorkbookCategoryClassificationQuery) Offset(offset int) *WorkbookCategoryClassificationQuery {
	wccq.ctx.Offset = &offset
	return wccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wccq *WorkbookCategoryClassificationQuery) Unique(unique bool) *WorkbookCategoryClassificationQuery {
	wccq.ctx.Unique = &unique
	return wccq
}

// Order specifies how the records should be ordered.
func (wccq *WorkbookCategoryClassificationQuery) Order(o ...workbookcategoryclassification.OrderOption) *WorkbookCategoryClassificationQuery {
	wccq.order = append(wccq.order, o...)
	return wccq
}

// QueryProblems chains the current query on the "problems" edge.
func (wccq *WorkbookCategoryClassificationQuery) QueryProblems() *ProblemQuery {
	query := (&ProblemClient{config: wccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategoryclassification.Table, workbookcategoryclassification.FieldID, selector),
			sqlgraph.To(problem.Table, problem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbookcategoryclassification.ProblemsTable, workbookcategoryclassification.ProblemsColumn),
		)
		fromU = sqlgraph.SetNeighbors(wccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkbookCategoryClassification entity from the query.
// Returns a *NotFoundError when no WorkbookCategoryClassification was found.
func (wccq *WorkbookCategoryClassificationQuery) First(ctx context.Context) (*WorkbookCategoryClassification, error) {
	nodes, err := wccq.Limit(1).All(setContextOp(ctx, wccq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workbookcategoryclassification.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) FirstX(ctx context.Context) *WorkbookCategoryClassification {
	node, err := wccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkbookCategoryClassification ID from the query.
// Returns a *NotFoundError when no WorkbookCategoryClassification ID was found.
func (wccq *WorkbookCategoryClassificationQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wccq.Limit(1).IDs(setContextOp(ctx, wccq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workbookcategoryclassification.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkbookCategoryClassification entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkbookCategoryClassification entity is found.
// Returns a *NotFoundError when no WorkbookCategoryClassification entities are found.
func (wccq *WorkbookCategoryClassificationQuery) Only(ctx context.Context) (*WorkbookCategoryClassification, error) {
	nodes, err := wccq.Limit(2).All(setContextOp(ctx, wccq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workbookcategoryclassification.Label}
	default:
		return nil, &NotSingularError{workbookcategoryclassification.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) OnlyX(ctx context.Context) *WorkbookCategoryClassification {
	node, err := wccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkbookCategoryClassification ID in the query.
// Returns a *NotSingularError when more than one WorkbookCategoryClassification ID is found.
// Returns a *NotFoundError when no entities are found.
func (wccq *WorkbookCategoryClassificationQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wccq.Limit(2).IDs(setContextOp(ctx, wccq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workbookcategoryclassification.Label}
	default:
		err = &NotSingularError{workbookcategoryclassification.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkbookCategoryClassifications.
func (wccq *WorkbookCategoryClassificationQuery) All(ctx context.Context) ([]*WorkbookCategoryClassification, error) {
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryAll)
	if err := wccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkbookCategoryClassification, *WorkbookCategoryClassificationQuery]()
	return withInterceptors[[]*WorkbookCategoryClassification](ctx, wccq, qr, wccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) AllX(ctx context.Context) []*WorkbookCategoryClassification {
	nodes, err := wccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkbookCategoryClassification IDs.
func (wccq *WorkbookCategoryClassificationQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wccq.ctx.Unique == nil && wccq.path != nil {
		wccq.Unique(true)
	}
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryIDs)
	if err = wccq.Select(workbookcategoryclassification.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wccq *WorkbookCategoryClassificationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryCount)
	if err := wccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wccq, querierCount[*WorkbookCategoryClassificationQuery](), wccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) CountX(ctx context.Context) int {
	count, err := wccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wccq *WorkbookCategoryClassificationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryExist)
	switch _, err := wccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wccq *WorkbookCategoryClassificationQuery) ExistX(ctx context.Context) bool {
	exist, err := wccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkbookCategoryClassificationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wccq *WorkbookCategoryClassificationQuery) Clone() *WorkbookCategoryClassificationQuery {
	if wccq == nil {
		return nil
	}
	return &WorkbookCategoryClassificationQuery{
		config:       wccq.config,
		ctx:          wccq.ctx.Clone(),
		order:        append([]workbookcategoryclassification.OrderOption{}, wccq.order...),
		inters:       append([]Interceptor{}, wccq.inters...),
		predicates:   append([]predicate.WorkbookCategoryClassification{}, wccq.predicates...),
		withProblems: wccq.withProblems.Clone(),
		// clone intermediate query.
		sql:  wccq.sql.Clone(),
		path: wccq.path,
	}
}

// WithProblems tells the query-builder to eager-load the nodes that are connected to
// the "problems" edge. The optional arguments are used to configure the query builder of the edge.
func (wccq *WorkbookCategoryClassificationQuery) WithProblems(opts ...func(*ProblemQuery)) *WorkbookCategoryClassificationQuery {
	query := (&ProblemClient{config: wccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wccq.withProblems = query
	return wccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkbookCategoryClassification.Query().
//		GroupBy(workbookcategoryclassification.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wccq *WorkbookCategoryClassificationQuery) GroupBy(field string, fields ...string) *WorkbookCategoryClassificationGroupBy {
	wccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkbookCategoryClassificationGroupBy{build: wccq}
	grbuild.flds = &wccq.ctx.Fields
	grbuild.label = workbookcategoryclassification.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.WorkbookCategoryClassification.Query().
//		Select(workbookcategoryclassification.FieldCreatedAt).
//		Scan(ctx, &v)
func (wccq *WorkbookCategoryClassificationQuery) Select(fields ...string) *WorkbookCategoryClassificationSelect {
	wccq.ctx.Fields = append(wccq.ctx.Fields, fields...)
	sbuild := &WorkbookCategoryClassificationSelect{WorkbookCategoryClassificationQuery: wccq}
	sbuild.label = workbookcategoryclassification.Label
	sbuild.flds, sbuild.scan = &wccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkbookCategoryClassificationSelect configured with the given aggregations.
func (wccq *WorkbookCategoryClassificationQuery) Aggregate(fns ...AggregateFunc) *WorkbookCategoryClassificationSelect {
	return wccq.Select().Aggregate(fns...)
}

func (wccq *WorkbookCategoryClassificationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wccq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wccq); err != nil {
				return err
			}
		}
	}
	for _, f := range wccq.ctx.Fields {
		if !workbookcategoryclassification.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wccq.path != nil {
		prev, err := wccq.path(ctx)
		if err != nil {
			return err
		}
		wccq.sql = prev
	}
	return nil
}

func (wccq *WorkbookCategoryClassificationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkbookCategoryClassification, error) {
	var (
		nodes       = []*WorkbookCategoryClassification{}
		withFKs     = wccq.withFKs
		_spec       = wccq.querySpec()
		loadedTypes = [1]bool{
			wccq.withProblems != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategoryclassification.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkbookCategoryClassification).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkbookCategoryClassification{config: wccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wccq.withProblems; query != nil {
		if err := wccq.loadProblems(ctx, query, nodes,
			func(n *WorkbookCategoryClassification) { n.Edges.Problems = []*Problem{} },
			func(n *WorkbookCategoryClassification, e *Problem) { n.Edges.Problems = append(n.Edges.Problems, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wccq *WorkbookCategoryClassificationQuery) loadProblems(ctx context.Context, query *ProblemQuery, nodes []*WorkbookCategoryClassification, init func(*WorkbookCategoryClassification), assign func(*WorkbookCategoryClassification, *Problem)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*WorkbookCategoryClassification)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(problem.FieldWorkbookCategoryClassificationID)
	}
	query.Where(predicate.Problem(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(workbookcategoryclassification.ProblemsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.WorkbookCategoryClassificationID
		if fk == nil {
			return fmt.Errorf(`foreign-key "workbook_category_classification_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workbook_category_classification_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (wccq *WorkbookCategoryClassificationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wccq.querySpec()
	_spec.Node.Columns = wccq.ctx.Fields
	if len(wccq.ctx.Fields) > 0 {
		_spec.Unique = wccq.ctx.Unique != nil && *wccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wccq.driver, _spec)
}

func (wccq *WorkbookCategoryClassificationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workbookcategoryclassification.Table, workbookcategoryclassification.Columns, sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID))
	_spec.From = wccq.sql
	if unique := wccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wccq.path != nil {
		_spec.Unique = true
	}
	if fields := wccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategoryclassification.FieldID)
		for i := range fields {
			if fields[i] != workbookcategoryclassification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wccq *WorkbookCategoryClassificationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wccq.driver.Dialect())
	t1 := builder.Table(workbookcategoryclassification.Table)
	columns := wccq.ctx.Fields
	if len(columns) == 0 {
		columns = workbookcategoryclassification.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wccq.sql != nil {
		selector = wccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wccq.ctx.Unique != nil && *wccq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wccq.predicates {
		p(selector)
	}
	for _, p := range wccq.order {
		p(selector)
	}
	if offset := wccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkbookCategoryClassificationGroupBy is the group-by builder for WorkbookCategoryClassification entities.
type WorkbookCategoryClassificationGroupBy struct {
	selector
	build *WorkbookCategoryClassificationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wccgb *WorkbookCategoryClassificationGroupBy) Aggregate(fns ...AggregateFunc) *WorkbookCategoryClassificationGroupBy {
	wccgb.fns = append(wccgb.fns, fns...)
	return wccgb
}

// Scan applies the selector query and scans the result into the given value.
func (wccgb *WorkbookCategoryClassificationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wccgb.build.ctx, ent.OpQueryGroupBy)
	if err := wccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkbookCategoryClassificationQuery, *WorkbookCategoryClassificationGroupBy](ctx, wccgb.build, wccgb, wccgb.build.inters, v)
}

func (wccgb *WorkbookCategoryClassificationGroupBy) sqlScan(ctx context.Context, root *WorkbookCategoryClassificationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wccgb.fns))
	for _, fn := range wccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wccgb.flds)+len(wccgb.fns))
		for _, f := range *wccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkbookCategoryClassificationSelect is the builder for selecting fields of WorkbookCategoryClassification entities.
type WorkbookCategoryClassificationSelect struct {
	*WorkbookCategoryClassificationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wccs *WorkbookCategoryClassificationSelect) Aggregate(fns ...AggregateFunc) *WorkbookCategoryClassificationSelect {
	wccs.fns = append(wccs.fns, fns...)
	return wccs
}

// Scan applies the selector query and scans the result into the given value.
func (wccs *WorkbookCategoryClassificationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wccs.ctx, ent.OpQuerySelect)
	if err := wccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkbookCategoryClassificationQuery, *WorkbookCategoryClassificationSelect](ctx, wccs.WorkbookCategoryClassificationQuery, wccs, wccs.inters, v)
}

func (wccs *WorkbookCategoryClassificationSelect) sqlScan(ctx context.Context, root *WorkbookCategoryClassificationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wccs.fns))
	for _, fn := range wccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
