// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SelectionProblemUpdate is the builder for updating SelectionProblem entities.
type SelectionProblemUpdate struct {
	config
	hooks    []Hook
	mutation *SelectionProblemMutation
}

// Where appends a list predicates to the SelectionProblemUpdate builder.
func (spu *SelectionProblemUpdate) Where(ps ...predicate.SelectionProblem) *SelectionProblemUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetCreatedAt sets the "created_at" field.
func (spu *SelectionProblemUpdate) SetCreatedAt(t time.Time) *SelectionProblemUpdate {
	spu.mutation.SetCreatedAt(t)
	return spu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spu *SelectionProblemUpdate) SetNillableCreatedAt(t *time.Time) *SelectionProblemUpdate {
	if t != nil {
		spu.SetCreatedAt(*t)
	}
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SelectionProblemUpdate) SetUpdatedAt(t time.Time) *SelectionProblemUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetStatement sets the "statement" field.
func (spu *SelectionProblemUpdate) SetStatement(s string) *SelectionProblemUpdate {
	spu.mutation.SetStatement(s)
	return spu
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (spu *SelectionProblemUpdate) SetNillableStatement(s *string) *SelectionProblemUpdate {
	if s != nil {
		spu.SetStatement(*s)
	}
	return spu
}

// SetWorkbookID sets the "workbook_id" field.
func (spu *SelectionProblemUpdate) SetWorkbookID(u uuid.UUID) *SelectionProblemUpdate {
	spu.mutation.SetWorkbookID(u)
	return spu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (spu *SelectionProblemUpdate) SetNillableWorkbookID(u *uuid.UUID) *SelectionProblemUpdate {
	if u != nil {
		spu.SetWorkbookID(*u)
	}
	return spu
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (spu *SelectionProblemUpdate) SetWorkbookCategoryID(u uuid.UUID) *SelectionProblemUpdate {
	spu.mutation.SetWorkbookCategoryID(u)
	return spu
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (spu *SelectionProblemUpdate) SetNillableWorkbookCategoryID(u *uuid.UUID) *SelectionProblemUpdate {
	if u != nil {
		spu.SetWorkbookCategoryID(*u)
	}
	return spu
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (spu *SelectionProblemUpdate) ClearWorkbookCategoryID() *SelectionProblemUpdate {
	spu.mutation.ClearWorkbookCategoryID()
	return spu
}

// AddSelectionProblemAnswerIDs adds the "selection_problem_answers" edge to the SelectionProblemAnswer entity by IDs.
func (spu *SelectionProblemUpdate) AddSelectionProblemAnswerIDs(ids ...uuid.UUID) *SelectionProblemUpdate {
	spu.mutation.AddSelectionProblemAnswerIDs(ids...)
	return spu
}

// AddSelectionProblemAnswers adds the "selection_problem_answers" edges to the SelectionProblemAnswer entity.
func (spu *SelectionProblemUpdate) AddSelectionProblemAnswers(s ...*SelectionProblemAnswer) *SelectionProblemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.AddSelectionProblemAnswerIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (spu *SelectionProblemUpdate) SetWorkbook(w *Workbook) *SelectionProblemUpdate {
	return spu.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (spu *SelectionProblemUpdate) SetWorkbookCategory(w *WorkbookCategory) *SelectionProblemUpdate {
	return spu.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the SelectionProblemMutation object of the builder.
func (spu *SelectionProblemUpdate) Mutation() *SelectionProblemMutation {
	return spu.mutation
}

// ClearSelectionProblemAnswers clears all "selection_problem_answers" edges to the SelectionProblemAnswer entity.
func (spu *SelectionProblemUpdate) ClearSelectionProblemAnswers() *SelectionProblemUpdate {
	spu.mutation.ClearSelectionProblemAnswers()
	return spu
}

// RemoveSelectionProblemAnswerIDs removes the "selection_problem_answers" edge to SelectionProblemAnswer entities by IDs.
func (spu *SelectionProblemUpdate) RemoveSelectionProblemAnswerIDs(ids ...uuid.UUID) *SelectionProblemUpdate {
	spu.mutation.RemoveSelectionProblemAnswerIDs(ids...)
	return spu
}

// RemoveSelectionProblemAnswers removes "selection_problem_answers" edges to SelectionProblemAnswer entities.
func (spu *SelectionProblemUpdate) RemoveSelectionProblemAnswers(s ...*SelectionProblemAnswer) *SelectionProblemUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spu.RemoveSelectionProblemAnswerIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (spu *SelectionProblemUpdate) ClearWorkbook() *SelectionProblemUpdate {
	spu.mutation.ClearWorkbook()
	return spu
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (spu *SelectionProblemUpdate) ClearWorkbookCategory() *SelectionProblemUpdate {
	spu.mutation.ClearWorkbookCategory()
	return spu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SelectionProblemUpdate) Save(ctx context.Context) (int, error) {
	spu.defaults()
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SelectionProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SelectionProblemUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SelectionProblemUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SelectionProblemUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := selectionproblem.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SelectionProblemUpdate) check() error {
	if v, ok := spu.mutation.Statement(); ok {
		if err := selectionproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "SelectionProblem.statement": %w`, err)}
		}
	}
	if spu.mutation.WorkbookCleared() && len(spu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SelectionProblem.workbook"`)
	}
	return nil
}

func (spu *SelectionProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(selectionproblem.Table, selectionproblem.Columns, sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.CreatedAt(); ok {
		_spec.SetField(selectionproblem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(selectionproblem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spu.mutation.Statement(); ok {
		_spec.SetField(selectionproblem.FieldStatement, field.TypeString, value)
	}
	if spu.mutation.SelectionProblemAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   selectionproblem.SelectionProblemAnswersTable,
			Columns: []string{selectionproblem.SelectionProblemAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.RemovedSelectionProblemAnswersIDs(); len(nodes) > 0 && !spu.mutation.SelectionProblemAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   selectionproblem.SelectionProblemAnswersTable,
			Columns: []string{selectionproblem.SelectionProblemAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.SelectionProblemAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   selectionproblem.SelectionProblemAnswersTable,
			Columns: []string{selectionproblem.SelectionProblemAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookTable,
			Columns: []string{selectionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookTable,
			Columns: []string{selectionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spu.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookCategoryTable,
			Columns: []string{selectionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spu.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookCategoryTable,
			Columns: []string{selectionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{selectionproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SelectionProblemUpdateOne is the builder for updating a single SelectionProblem entity.
type SelectionProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SelectionProblemMutation
}

// SetCreatedAt sets the "created_at" field.
func (spuo *SelectionProblemUpdateOne) SetCreatedAt(t time.Time) *SelectionProblemUpdateOne {
	spuo.mutation.SetCreatedAt(t)
	return spuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spuo *SelectionProblemUpdateOne) SetNillableCreatedAt(t *time.Time) *SelectionProblemUpdateOne {
	if t != nil {
		spuo.SetCreatedAt(*t)
	}
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SelectionProblemUpdateOne) SetUpdatedAt(t time.Time) *SelectionProblemUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetStatement sets the "statement" field.
func (spuo *SelectionProblemUpdateOne) SetStatement(s string) *SelectionProblemUpdateOne {
	spuo.mutation.SetStatement(s)
	return spuo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (spuo *SelectionProblemUpdateOne) SetNillableStatement(s *string) *SelectionProblemUpdateOne {
	if s != nil {
		spuo.SetStatement(*s)
	}
	return spuo
}

// SetWorkbookID sets the "workbook_id" field.
func (spuo *SelectionProblemUpdateOne) SetWorkbookID(u uuid.UUID) *SelectionProblemUpdateOne {
	spuo.mutation.SetWorkbookID(u)
	return spuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (spuo *SelectionProblemUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *SelectionProblemUpdateOne {
	if u != nil {
		spuo.SetWorkbookID(*u)
	}
	return spuo
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (spuo *SelectionProblemUpdateOne) SetWorkbookCategoryID(u uuid.UUID) *SelectionProblemUpdateOne {
	spuo.mutation.SetWorkbookCategoryID(u)
	return spuo
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (spuo *SelectionProblemUpdateOne) SetNillableWorkbookCategoryID(u *uuid.UUID) *SelectionProblemUpdateOne {
	if u != nil {
		spuo.SetWorkbookCategoryID(*u)
	}
	return spuo
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (spuo *SelectionProblemUpdateOne) ClearWorkbookCategoryID() *SelectionProblemUpdateOne {
	spuo.mutation.ClearWorkbookCategoryID()
	return spuo
}

// AddSelectionProblemAnswerIDs adds the "selection_problem_answers" edge to the SelectionProblemAnswer entity by IDs.
func (spuo *SelectionProblemUpdateOne) AddSelectionProblemAnswerIDs(ids ...uuid.UUID) *SelectionProblemUpdateOne {
	spuo.mutation.AddSelectionProblemAnswerIDs(ids...)
	return spuo
}

// AddSelectionProblemAnswers adds the "selection_problem_answers" edges to the SelectionProblemAnswer entity.
func (spuo *SelectionProblemUpdateOne) AddSelectionProblemAnswers(s ...*SelectionProblemAnswer) *SelectionProblemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.AddSelectionProblemAnswerIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (spuo *SelectionProblemUpdateOne) SetWorkbook(w *Workbook) *SelectionProblemUpdateOne {
	return spuo.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (spuo *SelectionProblemUpdateOne) SetWorkbookCategory(w *WorkbookCategory) *SelectionProblemUpdateOne {
	return spuo.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the SelectionProblemMutation object of the builder.
func (spuo *SelectionProblemUpdateOne) Mutation() *SelectionProblemMutation {
	return spuo.mutation
}

// ClearSelectionProblemAnswers clears all "selection_problem_answers" edges to the SelectionProblemAnswer entity.
func (spuo *SelectionProblemUpdateOne) ClearSelectionProblemAnswers() *SelectionProblemUpdateOne {
	spuo.mutation.ClearSelectionProblemAnswers()
	return spuo
}

// RemoveSelectionProblemAnswerIDs removes the "selection_problem_answers" edge to SelectionProblemAnswer entities by IDs.
func (spuo *SelectionProblemUpdateOne) RemoveSelectionProblemAnswerIDs(ids ...uuid.UUID) *SelectionProblemUpdateOne {
	spuo.mutation.RemoveSelectionProblemAnswerIDs(ids...)
	return spuo
}

// RemoveSelectionProblemAnswers removes "selection_problem_answers" edges to SelectionProblemAnswer entities.
func (spuo *SelectionProblemUpdateOne) RemoveSelectionProblemAnswers(s ...*SelectionProblemAnswer) *SelectionProblemUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spuo.RemoveSelectionProblemAnswerIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (spuo *SelectionProblemUpdateOne) ClearWorkbook() *SelectionProblemUpdateOne {
	spuo.mutation.ClearWorkbook()
	return spuo
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (spuo *SelectionProblemUpdateOne) ClearWorkbookCategory() *SelectionProblemUpdateOne {
	spuo.mutation.ClearWorkbookCategory()
	return spuo
}

// Where appends a list predicates to the SelectionProblemUpdate builder.
func (spuo *SelectionProblemUpdateOne) Where(ps ...predicate.SelectionProblem) *SelectionProblemUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SelectionProblemUpdateOne) Select(field string, fields ...string) *SelectionProblemUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SelectionProblem entity.
func (spuo *SelectionProblemUpdateOne) Save(ctx context.Context) (*SelectionProblem, error) {
	spuo.defaults()
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SelectionProblemUpdateOne) SaveX(ctx context.Context) *SelectionProblem {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SelectionProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SelectionProblemUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SelectionProblemUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := selectionproblem.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SelectionProblemUpdateOne) check() error {
	if v, ok := spuo.mutation.Statement(); ok {
		if err := selectionproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "SelectionProblem.statement": %w`, err)}
		}
	}
	if spuo.mutation.WorkbookCleared() && len(spuo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "SelectionProblem.workbook"`)
	}
	return nil
}

func (spuo *SelectionProblemUpdateOne) sqlSave(ctx context.Context) (_node *SelectionProblem, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(selectionproblem.Table, selectionproblem.Columns, sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SelectionProblem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, selectionproblem.FieldID)
		for _, f := range fields {
			if !selectionproblem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != selectionproblem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.CreatedAt(); ok {
		_spec.SetField(selectionproblem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(selectionproblem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.Statement(); ok {
		_spec.SetField(selectionproblem.FieldStatement, field.TypeString, value)
	}
	if spuo.mutation.SelectionProblemAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   selectionproblem.SelectionProblemAnswersTable,
			Columns: []string{selectionproblem.SelectionProblemAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.RemovedSelectionProblemAnswersIDs(); len(nodes) > 0 && !spuo.mutation.SelectionProblemAnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   selectionproblem.SelectionProblemAnswersTable,
			Columns: []string{selectionproblem.SelectionProblemAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.SelectionProblemAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   selectionproblem.SelectionProblemAnswersTable,
			Columns: []string{selectionproblem.SelectionProblemAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookTable,
			Columns: []string{selectionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookTable,
			Columns: []string{selectionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if spuo.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookCategoryTable,
			Columns: []string{selectionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := spuo.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookCategoryTable,
			Columns: []string{selectionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SelectionProblem{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{selectionproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
