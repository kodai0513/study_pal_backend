// Code generated by ent, DO NOT EDIT.

package workbookmember

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workbookmember type in the database.
	Label = "workbook_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldMemberID holds the string denoting the member_id field in the database.
	FieldMemberID = "member_id"
	// FieldWorkbookID holds the string denoting the workbook_id field in the database.
	FieldWorkbookID = "workbook_id"
	// EdgeRole holds the string denoting the role edge name in mutations.
	EdgeRole = "role"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// EdgeWorkbook holds the string denoting the workbook edge name in mutations.
	EdgeWorkbook = "workbook"
	// Table holds the table name of the workbookmember in the database.
	Table = "workbook_members"
	// RoleTable is the table that holds the role relation/edge.
	RoleTable = "workbook_members"
	// RoleInverseTable is the table name for the Role entity.
	// It exists in this package in order to avoid circular dependency with the "role" package.
	RoleInverseTable = "roles"
	// RoleColumn is the table column denoting the role relation/edge.
	RoleColumn = "role_id"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "workbook_members"
	// MemberInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MemberInverseTable = "users"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "member_id"
	// WorkbookTable is the table that holds the workbook relation/edge.
	WorkbookTable = "workbook_members"
	// WorkbookInverseTable is the table name for the Workbook entity.
	// It exists in this package in order to avoid circular dependency with the "workbook" package.
	WorkbookInverseTable = "workbooks"
	// WorkbookColumn is the table column denoting the workbook relation/edge.
	WorkbookColumn = "workbook_id"
)

// Columns holds all SQL columns for workbookmember fields.
var Columns = []string{
	FieldID,
	FieldRoleID,
	FieldMemberID,
	FieldWorkbookID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WorkbookMember queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByMemberID orders the results by the member_id field.
func ByMemberID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemberID, opts...).ToFunc()
}

// ByWorkbookID orders the results by the workbook_id field.
func ByWorkbookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookID, opts...).ToFunc()
}

// ByRoleField orders the results by role field.
func ByRoleField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoleStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkbookField orders the results by workbook field.
func ByWorkbookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookStep(), sql.OrderByField(field, opts...))
	}
}
func newRoleStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoleInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoleTable, RoleColumn),
	)
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
	)
}
func newWorkbookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkbookTable, WorkbookColumn),
	)
}
