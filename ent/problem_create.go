// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/answerdescription"
	"study-pal-backend/ent/answermultichoices"
	"study-pal-backend/ent/answertruth"
	"study-pal-backend/ent/answertype"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategorydetail"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProblemCreate is the builder for creating a Problem entity.
type ProblemCreate struct {
	config
	mutation *ProblemMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *ProblemCreate) SetCreatedAt(t time.Time) *ProblemCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *ProblemCreate) SetNillableCreatedAt(t *time.Time) *ProblemCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *ProblemCreate) SetUpdatedAt(t time.Time) *ProblemCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *ProblemCreate) SetNillableUpdatedAt(t *time.Time) *ProblemCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetAnswerTypeID sets the "answer_type_id" field.
func (pc *ProblemCreate) SetAnswerTypeID(u uuid.UUID) *ProblemCreate {
	pc.mutation.SetAnswerTypeID(u)
	return pc
}

// SetStatement sets the "statement" field.
func (pc *ProblemCreate) SetStatement(s string) *ProblemCreate {
	pc.mutation.SetStatement(s)
	return pc
}

// SetWorkbookID sets the "workbook_id" field.
func (pc *ProblemCreate) SetWorkbookID(u uuid.UUID) *ProblemCreate {
	pc.mutation.SetWorkbookID(u)
	return pc
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (pc *ProblemCreate) SetWorkbookCategoryID(u uuid.UUID) *ProblemCreate {
	pc.mutation.SetWorkbookCategoryID(u)
	return pc
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (pc *ProblemCreate) SetNillableWorkbookCategoryID(u *uuid.UUID) *ProblemCreate {
	if u != nil {
		pc.SetWorkbookCategoryID(*u)
	}
	return pc
}

// SetWorkbookCategoryDetailID sets the "workbook_category_detail_id" field.
func (pc *ProblemCreate) SetWorkbookCategoryDetailID(u uuid.UUID) *ProblemCreate {
	pc.mutation.SetWorkbookCategoryDetailID(u)
	return pc
}

// SetNillableWorkbookCategoryDetailID sets the "workbook_category_detail_id" field if the given value is not nil.
func (pc *ProblemCreate) SetNillableWorkbookCategoryDetailID(u *uuid.UUID) *ProblemCreate {
	if u != nil {
		pc.SetWorkbookCategoryDetailID(*u)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProblemCreate) SetID(u uuid.UUID) *ProblemCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetAnswerType sets the "answer_type" edge to the AnswerType entity.
func (pc *ProblemCreate) SetAnswerType(a *AnswerType) *ProblemCreate {
	return pc.SetAnswerTypeID(a.ID)
}

// SetAnswerDescriptionsID sets the "answer_descriptions" edge to the AnswerDescription entity by ID.
func (pc *ProblemCreate) SetAnswerDescriptionsID(id uuid.UUID) *ProblemCreate {
	pc.mutation.SetAnswerDescriptionsID(id)
	return pc
}

// SetNillableAnswerDescriptionsID sets the "answer_descriptions" edge to the AnswerDescription entity by ID if the given value is not nil.
func (pc *ProblemCreate) SetNillableAnswerDescriptionsID(id *uuid.UUID) *ProblemCreate {
	if id != nil {
		pc = pc.SetAnswerDescriptionsID(*id)
	}
	return pc
}

// SetAnswerDescriptions sets the "answer_descriptions" edge to the AnswerDescription entity.
func (pc *ProblemCreate) SetAnswerDescriptions(a *AnswerDescription) *ProblemCreate {
	return pc.SetAnswerDescriptionsID(a.ID)
}

// AddAnswerMultiChoiceIDs adds the "answer_multi_choices" edge to the AnswerMultiChoices entity by IDs.
func (pc *ProblemCreate) AddAnswerMultiChoiceIDs(ids ...uuid.UUID) *ProblemCreate {
	pc.mutation.AddAnswerMultiChoiceIDs(ids...)
	return pc
}

// AddAnswerMultiChoices adds the "answer_multi_choices" edges to the AnswerMultiChoices entity.
func (pc *ProblemCreate) AddAnswerMultiChoices(a ...*AnswerMultiChoices) *ProblemCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAnswerMultiChoiceIDs(ids...)
}

// SetAnswerTruthsID sets the "answer_truths" edge to the AnswerTruth entity by ID.
func (pc *ProblemCreate) SetAnswerTruthsID(id uuid.UUID) *ProblemCreate {
	pc.mutation.SetAnswerTruthsID(id)
	return pc
}

// SetNillableAnswerTruthsID sets the "answer_truths" edge to the AnswerTruth entity by ID if the given value is not nil.
func (pc *ProblemCreate) SetNillableAnswerTruthsID(id *uuid.UUID) *ProblemCreate {
	if id != nil {
		pc = pc.SetAnswerTruthsID(*id)
	}
	return pc
}

// SetAnswerTruths sets the "answer_truths" edge to the AnswerTruth entity.
func (pc *ProblemCreate) SetAnswerTruths(a *AnswerTruth) *ProblemCreate {
	return pc.SetAnswerTruthsID(a.ID)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (pc *ProblemCreate) SetWorkbook(w *Workbook) *ProblemCreate {
	return pc.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (pc *ProblemCreate) SetWorkbookCategory(w *WorkbookCategory) *ProblemCreate {
	return pc.SetWorkbookCategoryID(w.ID)
}

// SetWorkbookCategoryDetail sets the "workbook_category_detail" edge to the WorkbookCategoryDetail entity.
func (pc *ProblemCreate) SetWorkbookCategoryDetail(w *WorkbookCategoryDetail) *ProblemCreate {
	return pc.SetWorkbookCategoryDetailID(w.ID)
}

// Mutation returns the ProblemMutation object of the builder.
func (pc *ProblemCreate) Mutation() *ProblemMutation {
	return pc.mutation
}

// Save creates the Problem in the database.
func (pc *ProblemCreate) Save(ctx context.Context) (*Problem, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProblemCreate) SaveX(ctx context.Context) *Problem {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProblemCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProblemCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProblemCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := problem.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := problem.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProblemCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Problem.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Problem.updated_at"`)}
	}
	if _, ok := pc.mutation.AnswerTypeID(); !ok {
		return &ValidationError{Name: "answer_type_id", err: errors.New(`ent: missing required field "Problem.answer_type_id"`)}
	}
	if _, ok := pc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "Problem.statement"`)}
	}
	if v, ok := pc.mutation.Statement(); ok {
		if err := problem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "Problem.statement": %w`, err)}
		}
	}
	if _, ok := pc.mutation.WorkbookID(); !ok {
		return &ValidationError{Name: "workbook_id", err: errors.New(`ent: missing required field "Problem.workbook_id"`)}
	}
	if len(pc.mutation.AnswerTypeIDs()) == 0 {
		return &ValidationError{Name: "answer_type", err: errors.New(`ent: missing required edge "Problem.answer_type"`)}
	}
	if len(pc.mutation.WorkbookIDs()) == 0 {
		return &ValidationError{Name: "workbook", err: errors.New(`ent: missing required edge "Problem.workbook"`)}
	}
	return nil
}

func (pc *ProblemCreate) sqlSave(ctx context.Context) (*Problem, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProblemCreate) createSpec() (*Problem, *sqlgraph.CreateSpec) {
	var (
		_node = &Problem{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(problem.Table, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(problem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(problem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.Statement(); ok {
		_spec.SetField(problem.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if nodes := pc.mutation.AnswerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.AnswerTypeTable,
			Columns: []string{problem.AnswerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertype.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AnswerTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AnswerDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   problem.AnswerDescriptionsTable,
			Columns: []string{problem.AnswerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AnswerMultiChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerMultiChoicesTable,
			Columns: []string{problem.AnswerMultiChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AnswerTruthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   problem.AnswerTruthsTable,
			Columns: []string{problem.AnswerTruthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookTable,
			Columns: []string{problem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookCategoryTable,
			Columns: []string{problem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookCategoryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.WorkbookCategoryDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookCategoryDetailTable,
			Columns: []string{problem.WorkbookCategoryDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategorydetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookCategoryDetailID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProblemCreateBulk is the builder for creating many Problem entities in bulk.
type ProblemCreateBulk struct {
	config
	err      error
	builders []*ProblemCreate
}

// Save creates the Problem entities in the database.
func (pcb *ProblemCreateBulk) Save(ctx context.Context) ([]*Problem, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Problem, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProblemCreateBulk) SaveX(ctx context.Context) []*Problem {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProblemCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
