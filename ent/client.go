// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"study-pal-backend/ent/migrate"

	"study-pal-backend/ent/article"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/permission"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategoryclosure"
	"study-pal-backend/ent/workbookmember"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Article is the client for interacting with the Article builders.
	Article *ArticleClient
	// DescriptionProblem is the client for interacting with the DescriptionProblem builders.
	DescriptionProblem *DescriptionProblemClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// SelectionProblem is the client for interacting with the SelectionProblem builders.
	SelectionProblem *SelectionProblemClient
	// SelectionProblemAnswer is the client for interacting with the SelectionProblemAnswer builders.
	SelectionProblemAnswer *SelectionProblemAnswerClient
	// TrueOrFalseProblem is the client for interacting with the TrueOrFalseProblem builders.
	TrueOrFalseProblem *TrueOrFalseProblemClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Workbook is the client for interacting with the Workbook builders.
	Workbook *WorkbookClient
	// WorkbookCategory is the client for interacting with the WorkbookCategory builders.
	WorkbookCategory *WorkbookCategoryClient
	// WorkbookCategoryClosure is the client for interacting with the WorkbookCategoryClosure builders.
	WorkbookCategoryClosure *WorkbookCategoryClosureClient
	// WorkbookMember is the client for interacting with the WorkbookMember builders.
	WorkbookMember *WorkbookMemberClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Article = NewArticleClient(c.config)
	c.DescriptionProblem = NewDescriptionProblemClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.SelectionProblem = NewSelectionProblemClient(c.config)
	c.SelectionProblemAnswer = NewSelectionProblemAnswerClient(c.config)
	c.TrueOrFalseProblem = NewTrueOrFalseProblemClient(c.config)
	c.User = NewUserClient(c.config)
	c.Workbook = NewWorkbookClient(c.config)
	c.WorkbookCategory = NewWorkbookCategoryClient(c.config)
	c.WorkbookCategoryClosure = NewWorkbookCategoryClosureClient(c.config)
	c.WorkbookMember = NewWorkbookMemberClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Article:                 NewArticleClient(cfg),
		DescriptionProblem:      NewDescriptionProblemClient(cfg),
		Permission:              NewPermissionClient(cfg),
		Role:                    NewRoleClient(cfg),
		SelectionProblem:        NewSelectionProblemClient(cfg),
		SelectionProblemAnswer:  NewSelectionProblemAnswerClient(cfg),
		TrueOrFalseProblem:      NewTrueOrFalseProblemClient(cfg),
		User:                    NewUserClient(cfg),
		Workbook:                NewWorkbookClient(cfg),
		WorkbookCategory:        NewWorkbookCategoryClient(cfg),
		WorkbookCategoryClosure: NewWorkbookCategoryClosureClient(cfg),
		WorkbookMember:          NewWorkbookMemberClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                     ctx,
		config:                  cfg,
		Article:                 NewArticleClient(cfg),
		DescriptionProblem:      NewDescriptionProblemClient(cfg),
		Permission:              NewPermissionClient(cfg),
		Role:                    NewRoleClient(cfg),
		SelectionProblem:        NewSelectionProblemClient(cfg),
		SelectionProblemAnswer:  NewSelectionProblemAnswerClient(cfg),
		TrueOrFalseProblem:      NewTrueOrFalseProblemClient(cfg),
		User:                    NewUserClient(cfg),
		Workbook:                NewWorkbookClient(cfg),
		WorkbookCategory:        NewWorkbookCategoryClient(cfg),
		WorkbookCategoryClosure: NewWorkbookCategoryClosureClient(cfg),
		WorkbookMember:          NewWorkbookMemberClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Article.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Article, c.DescriptionProblem, c.Permission, c.Role, c.SelectionProblem,
		c.SelectionProblemAnswer, c.TrueOrFalseProblem, c.User, c.Workbook,
		c.WorkbookCategory, c.WorkbookCategoryClosure, c.WorkbookMember,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Article, c.DescriptionProblem, c.Permission, c.Role, c.SelectionProblem,
		c.SelectionProblemAnswer, c.TrueOrFalseProblem, c.User, c.Workbook,
		c.WorkbookCategory, c.WorkbookCategoryClosure, c.WorkbookMember,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ArticleMutation:
		return c.Article.mutate(ctx, m)
	case *DescriptionProblemMutation:
		return c.DescriptionProblem.mutate(ctx, m)
	case *PermissionMutation:
		return c.Permission.mutate(ctx, m)
	case *RoleMutation:
		return c.Role.mutate(ctx, m)
	case *SelectionProblemMutation:
		return c.SelectionProblem.mutate(ctx, m)
	case *SelectionProblemAnswerMutation:
		return c.SelectionProblemAnswer.mutate(ctx, m)
	case *TrueOrFalseProblemMutation:
		return c.TrueOrFalseProblem.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WorkbookMutation:
		return c.Workbook.mutate(ctx, m)
	case *WorkbookCategoryMutation:
		return c.WorkbookCategory.mutate(ctx, m)
	case *WorkbookCategoryClosureMutation:
		return c.WorkbookCategoryClosure.mutate(ctx, m)
	case *WorkbookMemberMutation:
		return c.WorkbookMember.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ArticleClient is a client for the Article schema.
type ArticleClient struct {
	config
}

// NewArticleClient returns a client for the Article from the given config.
func NewArticleClient(c config) *ArticleClient {
	return &ArticleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `article.Hooks(f(g(h())))`.
func (c *ArticleClient) Use(hooks ...Hook) {
	c.hooks.Article = append(c.hooks.Article, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `article.Intercept(f(g(h())))`.
func (c *ArticleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Article = append(c.inters.Article, interceptors...)
}

// Create returns a builder for creating a Article entity.
func (c *ArticleClient) Create() *ArticleCreate {
	mutation := newArticleMutation(c.config, OpCreate)
	return &ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Article entities.
func (c *ArticleClient) CreateBulk(builders ...*ArticleCreate) *ArticleCreateBulk {
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ArticleClient) MapCreateBulk(slice any, setFunc func(*ArticleCreate, int)) *ArticleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ArticleCreateBulk{err: fmt.Errorf("calling to ArticleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ArticleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ArticleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Article.
func (c *ArticleClient) Update() *ArticleUpdate {
	mutation := newArticleMutation(c.config, OpUpdate)
	return &ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArticleClient) UpdateOne(a *Article) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticle(a))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArticleClient) UpdateOneID(id uuid.UUID) *ArticleUpdateOne {
	mutation := newArticleMutation(c.config, OpUpdateOne, withArticleID(id))
	return &ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Article.
func (c *ArticleClient) Delete() *ArticleDelete {
	mutation := newArticleMutation(c.config, OpDelete)
	return &ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArticleClient) DeleteOne(a *Article) *ArticleDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArticleClient) DeleteOneID(id uuid.UUID) *ArticleDeleteOne {
	builder := c.Delete().Where(article.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArticleDeleteOne{builder}
}

// Query returns a query builder for Article.
func (c *ArticleClient) Query() *ArticleQuery {
	return &ArticleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArticle},
		inters: c.Interceptors(),
	}
}

// Get returns a Article entity by its id.
func (c *ArticleClient) Get(ctx context.Context, id uuid.UUID) (*Article, error) {
	return c.Query().Where(article.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArticleClient) GetX(ctx context.Context, id uuid.UUID) *Article {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPost queries the post edge of a Article.
func (c *ArticleClient) QueryPost(a *Article) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(article.Table, article.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, article.PostTable, article.PostColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ArticleClient) Hooks() []Hook {
	return c.hooks.Article
}

// Interceptors returns the client interceptors.
func (c *ArticleClient) Interceptors() []Interceptor {
	return c.inters.Article
}

func (c *ArticleClient) mutate(ctx context.Context, m *ArticleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArticleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArticleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArticleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArticleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Article mutation op: %q", m.Op())
	}
}

// DescriptionProblemClient is a client for the DescriptionProblem schema.
type DescriptionProblemClient struct {
	config
}

// NewDescriptionProblemClient returns a client for the DescriptionProblem from the given config.
func NewDescriptionProblemClient(c config) *DescriptionProblemClient {
	return &DescriptionProblemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `descriptionproblem.Hooks(f(g(h())))`.
func (c *DescriptionProblemClient) Use(hooks ...Hook) {
	c.hooks.DescriptionProblem = append(c.hooks.DescriptionProblem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `descriptionproblem.Intercept(f(g(h())))`.
func (c *DescriptionProblemClient) Intercept(interceptors ...Interceptor) {
	c.inters.DescriptionProblem = append(c.inters.DescriptionProblem, interceptors...)
}

// Create returns a builder for creating a DescriptionProblem entity.
func (c *DescriptionProblemClient) Create() *DescriptionProblemCreate {
	mutation := newDescriptionProblemMutation(c.config, OpCreate)
	return &DescriptionProblemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DescriptionProblem entities.
func (c *DescriptionProblemClient) CreateBulk(builders ...*DescriptionProblemCreate) *DescriptionProblemCreateBulk {
	return &DescriptionProblemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DescriptionProblemClient) MapCreateBulk(slice any, setFunc func(*DescriptionProblemCreate, int)) *DescriptionProblemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DescriptionProblemCreateBulk{err: fmt.Errorf("calling to DescriptionProblemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DescriptionProblemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DescriptionProblemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DescriptionProblem.
func (c *DescriptionProblemClient) Update() *DescriptionProblemUpdate {
	mutation := newDescriptionProblemMutation(c.config, OpUpdate)
	return &DescriptionProblemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DescriptionProblemClient) UpdateOne(dp *DescriptionProblem) *DescriptionProblemUpdateOne {
	mutation := newDescriptionProblemMutation(c.config, OpUpdateOne, withDescriptionProblem(dp))
	return &DescriptionProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DescriptionProblemClient) UpdateOneID(id uuid.UUID) *DescriptionProblemUpdateOne {
	mutation := newDescriptionProblemMutation(c.config, OpUpdateOne, withDescriptionProblemID(id))
	return &DescriptionProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DescriptionProblem.
func (c *DescriptionProblemClient) Delete() *DescriptionProblemDelete {
	mutation := newDescriptionProblemMutation(c.config, OpDelete)
	return &DescriptionProblemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DescriptionProblemClient) DeleteOne(dp *DescriptionProblem) *DescriptionProblemDeleteOne {
	return c.DeleteOneID(dp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DescriptionProblemClient) DeleteOneID(id uuid.UUID) *DescriptionProblemDeleteOne {
	builder := c.Delete().Where(descriptionproblem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DescriptionProblemDeleteOne{builder}
}

// Query returns a query builder for DescriptionProblem.
func (c *DescriptionProblemClient) Query() *DescriptionProblemQuery {
	return &DescriptionProblemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDescriptionProblem},
		inters: c.Interceptors(),
	}
}

// Get returns a DescriptionProblem entity by its id.
func (c *DescriptionProblemClient) Get(ctx context.Context, id uuid.UUID) (*DescriptionProblem, error) {
	return c.Query().Where(descriptionproblem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DescriptionProblemClient) GetX(ctx context.Context, id uuid.UUID) *DescriptionProblem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkbook queries the workbook edge of a DescriptionProblem.
func (c *DescriptionProblemClient) QueryWorkbook(dp *DescriptionProblem) *WorkbookQuery {
	query := (&WorkbookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(descriptionproblem.Table, descriptionproblem.FieldID, id),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, descriptionproblem.WorkbookTable, descriptionproblem.WorkbookColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbookCategory queries the workbook_category edge of a DescriptionProblem.
func (c *DescriptionProblemClient) QueryWorkbookCategory(dp *DescriptionProblem) *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := dp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(descriptionproblem.Table, descriptionproblem.FieldID, id),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, descriptionproblem.WorkbookCategoryTable, descriptionproblem.WorkbookCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(dp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DescriptionProblemClient) Hooks() []Hook {
	return c.hooks.DescriptionProblem
}

// Interceptors returns the client interceptors.
func (c *DescriptionProblemClient) Interceptors() []Interceptor {
	return c.inters.DescriptionProblem
}

func (c *DescriptionProblemClient) mutate(ctx context.Context, m *DescriptionProblemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DescriptionProblemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DescriptionProblemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DescriptionProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DescriptionProblemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DescriptionProblem mutation op: %q", m.Op())
	}
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `permission.Intercept(f(g(h())))`.
func (c *PermissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Permission = append(c.inters.Permission, interceptors...)
}

// Create returns a builder for creating a Permission entity.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PermissionClient) MapCreateBulk(slice any, setFunc func(*PermissionCreate, int)) *PermissionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PermissionCreateBulk{err: fmt.Errorf("calling to PermissionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PermissionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id uuid.UUID) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PermissionClient) DeleteOneID(id uuid.UUID) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePermission},
		inters: c.Interceptors(),
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id uuid.UUID) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id uuid.UUID) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a Permission.
func (c *PermissionClient) QueryRoles(pe *Permission) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pe.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(permission.Table, permission.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, permission.RolesTable, permission.RolesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pe.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	return c.hooks.Permission
}

// Interceptors returns the client interceptors.
func (c *PermissionClient) Interceptors() []Interceptor {
	return c.inters.Permission
}

func (c *PermissionClient) mutate(ctx context.Context, m *PermissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Permission mutation op: %q", m.Op())
	}
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `role.Intercept(f(g(h())))`.
func (c *RoleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Role = append(c.inters.Role, interceptors...)
}

// Create returns a builder for creating a Role entity.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RoleClient) MapCreateBulk(slice any, setFunc func(*RoleCreate, int)) *RoleCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RoleCreateBulk{err: fmt.Errorf("calling to RoleClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RoleCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id uuid.UUID) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RoleClient) DeleteOneID(id uuid.UUID) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRole},
		inters: c.Interceptors(),
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id uuid.UUID) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id uuid.UUID) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkbookMembers queries the workbook_members edge of a Role.
func (c *RoleClient) QueryWorkbookMembers(r *Role) *WorkbookMemberQuery {
	query := (&WorkbookMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(workbookmember.Table, workbookmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, role.WorkbookMembersTable, role.WorkbookMembersColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPermissions queries the permissions edge of a Role.
func (c *RoleClient) QueryPermissions(r *Role) *PermissionQuery {
	query := (&PermissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(role.Table, role.FieldID, id),
			sqlgraph.To(permission.Table, permission.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, role.PermissionsTable, role.PermissionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	return c.hooks.Role
}

// Interceptors returns the client interceptors.
func (c *RoleClient) Interceptors() []Interceptor {
	return c.inters.Role
}

func (c *RoleClient) mutate(ctx context.Context, m *RoleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RoleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RoleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Role mutation op: %q", m.Op())
	}
}

// SelectionProblemClient is a client for the SelectionProblem schema.
type SelectionProblemClient struct {
	config
}

// NewSelectionProblemClient returns a client for the SelectionProblem from the given config.
func NewSelectionProblemClient(c config) *SelectionProblemClient {
	return &SelectionProblemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `selectionproblem.Hooks(f(g(h())))`.
func (c *SelectionProblemClient) Use(hooks ...Hook) {
	c.hooks.SelectionProblem = append(c.hooks.SelectionProblem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `selectionproblem.Intercept(f(g(h())))`.
func (c *SelectionProblemClient) Intercept(interceptors ...Interceptor) {
	c.inters.SelectionProblem = append(c.inters.SelectionProblem, interceptors...)
}

// Create returns a builder for creating a SelectionProblem entity.
func (c *SelectionProblemClient) Create() *SelectionProblemCreate {
	mutation := newSelectionProblemMutation(c.config, OpCreate)
	return &SelectionProblemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SelectionProblem entities.
func (c *SelectionProblemClient) CreateBulk(builders ...*SelectionProblemCreate) *SelectionProblemCreateBulk {
	return &SelectionProblemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SelectionProblemClient) MapCreateBulk(slice any, setFunc func(*SelectionProblemCreate, int)) *SelectionProblemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SelectionProblemCreateBulk{err: fmt.Errorf("calling to SelectionProblemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SelectionProblemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SelectionProblemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SelectionProblem.
func (c *SelectionProblemClient) Update() *SelectionProblemUpdate {
	mutation := newSelectionProblemMutation(c.config, OpUpdate)
	return &SelectionProblemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SelectionProblemClient) UpdateOne(sp *SelectionProblem) *SelectionProblemUpdateOne {
	mutation := newSelectionProblemMutation(c.config, OpUpdateOne, withSelectionProblem(sp))
	return &SelectionProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SelectionProblemClient) UpdateOneID(id uuid.UUID) *SelectionProblemUpdateOne {
	mutation := newSelectionProblemMutation(c.config, OpUpdateOne, withSelectionProblemID(id))
	return &SelectionProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SelectionProblem.
func (c *SelectionProblemClient) Delete() *SelectionProblemDelete {
	mutation := newSelectionProblemMutation(c.config, OpDelete)
	return &SelectionProblemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SelectionProblemClient) DeleteOne(sp *SelectionProblem) *SelectionProblemDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SelectionProblemClient) DeleteOneID(id uuid.UUID) *SelectionProblemDeleteOne {
	builder := c.Delete().Where(selectionproblem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SelectionProblemDeleteOne{builder}
}

// Query returns a query builder for SelectionProblem.
func (c *SelectionProblemClient) Query() *SelectionProblemQuery {
	return &SelectionProblemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSelectionProblem},
		inters: c.Interceptors(),
	}
}

// Get returns a SelectionProblem entity by its id.
func (c *SelectionProblemClient) Get(ctx context.Context, id uuid.UUID) (*SelectionProblem, error) {
	return c.Query().Where(selectionproblem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SelectionProblemClient) GetX(ctx context.Context, id uuid.UUID) *SelectionProblem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySelectionProblemAnswers queries the selection_problem_answers edge of a SelectionProblem.
func (c *SelectionProblemClient) QuerySelectionProblemAnswers(sp *SelectionProblem) *SelectionProblemAnswerQuery {
	query := (&SelectionProblemAnswerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(selectionproblem.Table, selectionproblem.FieldID, id),
			sqlgraph.To(selectionproblemanswer.Table, selectionproblemanswer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, selectionproblem.SelectionProblemAnswersTable, selectionproblem.SelectionProblemAnswersColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbook queries the workbook edge of a SelectionProblem.
func (c *SelectionProblemClient) QueryWorkbook(sp *SelectionProblem) *WorkbookQuery {
	query := (&WorkbookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(selectionproblem.Table, selectionproblem.FieldID, id),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, selectionproblem.WorkbookTable, selectionproblem.WorkbookColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbookCategory queries the workbook_category edge of a SelectionProblem.
func (c *SelectionProblemClient) QueryWorkbookCategory(sp *SelectionProblem) *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(selectionproblem.Table, selectionproblem.FieldID, id),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, selectionproblem.WorkbookCategoryTable, selectionproblem.WorkbookCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(sp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SelectionProblemClient) Hooks() []Hook {
	return c.hooks.SelectionProblem
}

// Interceptors returns the client interceptors.
func (c *SelectionProblemClient) Interceptors() []Interceptor {
	return c.inters.SelectionProblem
}

func (c *SelectionProblemClient) mutate(ctx context.Context, m *SelectionProblemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SelectionProblemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SelectionProblemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SelectionProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SelectionProblemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SelectionProblem mutation op: %q", m.Op())
	}
}

// SelectionProblemAnswerClient is a client for the SelectionProblemAnswer schema.
type SelectionProblemAnswerClient struct {
	config
}

// NewSelectionProblemAnswerClient returns a client for the SelectionProblemAnswer from the given config.
func NewSelectionProblemAnswerClient(c config) *SelectionProblemAnswerClient {
	return &SelectionProblemAnswerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `selectionproblemanswer.Hooks(f(g(h())))`.
func (c *SelectionProblemAnswerClient) Use(hooks ...Hook) {
	c.hooks.SelectionProblemAnswer = append(c.hooks.SelectionProblemAnswer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `selectionproblemanswer.Intercept(f(g(h())))`.
func (c *SelectionProblemAnswerClient) Intercept(interceptors ...Interceptor) {
	c.inters.SelectionProblemAnswer = append(c.inters.SelectionProblemAnswer, interceptors...)
}

// Create returns a builder for creating a SelectionProblemAnswer entity.
func (c *SelectionProblemAnswerClient) Create() *SelectionProblemAnswerCreate {
	mutation := newSelectionProblemAnswerMutation(c.config, OpCreate)
	return &SelectionProblemAnswerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SelectionProblemAnswer entities.
func (c *SelectionProblemAnswerClient) CreateBulk(builders ...*SelectionProblemAnswerCreate) *SelectionProblemAnswerCreateBulk {
	return &SelectionProblemAnswerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SelectionProblemAnswerClient) MapCreateBulk(slice any, setFunc func(*SelectionProblemAnswerCreate, int)) *SelectionProblemAnswerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SelectionProblemAnswerCreateBulk{err: fmt.Errorf("calling to SelectionProblemAnswerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SelectionProblemAnswerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SelectionProblemAnswerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SelectionProblemAnswer.
func (c *SelectionProblemAnswerClient) Update() *SelectionProblemAnswerUpdate {
	mutation := newSelectionProblemAnswerMutation(c.config, OpUpdate)
	return &SelectionProblemAnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SelectionProblemAnswerClient) UpdateOne(spa *SelectionProblemAnswer) *SelectionProblemAnswerUpdateOne {
	mutation := newSelectionProblemAnswerMutation(c.config, OpUpdateOne, withSelectionProblemAnswer(spa))
	return &SelectionProblemAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SelectionProblemAnswerClient) UpdateOneID(id uuid.UUID) *SelectionProblemAnswerUpdateOne {
	mutation := newSelectionProblemAnswerMutation(c.config, OpUpdateOne, withSelectionProblemAnswerID(id))
	return &SelectionProblemAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SelectionProblemAnswer.
func (c *SelectionProblemAnswerClient) Delete() *SelectionProblemAnswerDelete {
	mutation := newSelectionProblemAnswerMutation(c.config, OpDelete)
	return &SelectionProblemAnswerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SelectionProblemAnswerClient) DeleteOne(spa *SelectionProblemAnswer) *SelectionProblemAnswerDeleteOne {
	return c.DeleteOneID(spa.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SelectionProblemAnswerClient) DeleteOneID(id uuid.UUID) *SelectionProblemAnswerDeleteOne {
	builder := c.Delete().Where(selectionproblemanswer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SelectionProblemAnswerDeleteOne{builder}
}

// Query returns a query builder for SelectionProblemAnswer.
func (c *SelectionProblemAnswerClient) Query() *SelectionProblemAnswerQuery {
	return &SelectionProblemAnswerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSelectionProblemAnswer},
		inters: c.Interceptors(),
	}
}

// Get returns a SelectionProblemAnswer entity by its id.
func (c *SelectionProblemAnswerClient) Get(ctx context.Context, id uuid.UUID) (*SelectionProblemAnswer, error) {
	return c.Query().Where(selectionproblemanswer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SelectionProblemAnswerClient) GetX(ctx context.Context, id uuid.UUID) *SelectionProblemAnswer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySelectionProblem queries the selection_problem edge of a SelectionProblemAnswer.
func (c *SelectionProblemAnswerClient) QuerySelectionProblem(spa *SelectionProblemAnswer) *SelectionProblemQuery {
	query := (&SelectionProblemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := spa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(selectionproblemanswer.Table, selectionproblemanswer.FieldID, id),
			sqlgraph.To(selectionproblem.Table, selectionproblem.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, selectionproblemanswer.SelectionProblemTable, selectionproblemanswer.SelectionProblemColumn),
		)
		fromV = sqlgraph.Neighbors(spa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SelectionProblemAnswerClient) Hooks() []Hook {
	return c.hooks.SelectionProblemAnswer
}

// Interceptors returns the client interceptors.
func (c *SelectionProblemAnswerClient) Interceptors() []Interceptor {
	return c.inters.SelectionProblemAnswer
}

func (c *SelectionProblemAnswerClient) mutate(ctx context.Context, m *SelectionProblemAnswerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SelectionProblemAnswerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SelectionProblemAnswerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SelectionProblemAnswerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SelectionProblemAnswerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SelectionProblemAnswer mutation op: %q", m.Op())
	}
}

// TrueOrFalseProblemClient is a client for the TrueOrFalseProblem schema.
type TrueOrFalseProblemClient struct {
	config
}

// NewTrueOrFalseProblemClient returns a client for the TrueOrFalseProblem from the given config.
func NewTrueOrFalseProblemClient(c config) *TrueOrFalseProblemClient {
	return &TrueOrFalseProblemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `trueorfalseproblem.Hooks(f(g(h())))`.
func (c *TrueOrFalseProblemClient) Use(hooks ...Hook) {
	c.hooks.TrueOrFalseProblem = append(c.hooks.TrueOrFalseProblem, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `trueorfalseproblem.Intercept(f(g(h())))`.
func (c *TrueOrFalseProblemClient) Intercept(interceptors ...Interceptor) {
	c.inters.TrueOrFalseProblem = append(c.inters.TrueOrFalseProblem, interceptors...)
}

// Create returns a builder for creating a TrueOrFalseProblem entity.
func (c *TrueOrFalseProblemClient) Create() *TrueOrFalseProblemCreate {
	mutation := newTrueOrFalseProblemMutation(c.config, OpCreate)
	return &TrueOrFalseProblemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TrueOrFalseProblem entities.
func (c *TrueOrFalseProblemClient) CreateBulk(builders ...*TrueOrFalseProblemCreate) *TrueOrFalseProblemCreateBulk {
	return &TrueOrFalseProblemCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TrueOrFalseProblemClient) MapCreateBulk(slice any, setFunc func(*TrueOrFalseProblemCreate, int)) *TrueOrFalseProblemCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TrueOrFalseProblemCreateBulk{err: fmt.Errorf("calling to TrueOrFalseProblemClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TrueOrFalseProblemCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TrueOrFalseProblemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TrueOrFalseProblem.
func (c *TrueOrFalseProblemClient) Update() *TrueOrFalseProblemUpdate {
	mutation := newTrueOrFalseProblemMutation(c.config, OpUpdate)
	return &TrueOrFalseProblemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrueOrFalseProblemClient) UpdateOne(tofp *TrueOrFalseProblem) *TrueOrFalseProblemUpdateOne {
	mutation := newTrueOrFalseProblemMutation(c.config, OpUpdateOne, withTrueOrFalseProblem(tofp))
	return &TrueOrFalseProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrueOrFalseProblemClient) UpdateOneID(id uuid.UUID) *TrueOrFalseProblemUpdateOne {
	mutation := newTrueOrFalseProblemMutation(c.config, OpUpdateOne, withTrueOrFalseProblemID(id))
	return &TrueOrFalseProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TrueOrFalseProblem.
func (c *TrueOrFalseProblemClient) Delete() *TrueOrFalseProblemDelete {
	mutation := newTrueOrFalseProblemMutation(c.config, OpDelete)
	return &TrueOrFalseProblemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TrueOrFalseProblemClient) DeleteOne(tofp *TrueOrFalseProblem) *TrueOrFalseProblemDeleteOne {
	return c.DeleteOneID(tofp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TrueOrFalseProblemClient) DeleteOneID(id uuid.UUID) *TrueOrFalseProblemDeleteOne {
	builder := c.Delete().Where(trueorfalseproblem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrueOrFalseProblemDeleteOne{builder}
}

// Query returns a query builder for TrueOrFalseProblem.
func (c *TrueOrFalseProblemClient) Query() *TrueOrFalseProblemQuery {
	return &TrueOrFalseProblemQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTrueOrFalseProblem},
		inters: c.Interceptors(),
	}
}

// Get returns a TrueOrFalseProblem entity by its id.
func (c *TrueOrFalseProblemClient) Get(ctx context.Context, id uuid.UUID) (*TrueOrFalseProblem, error) {
	return c.Query().Where(trueorfalseproblem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrueOrFalseProblemClient) GetX(ctx context.Context, id uuid.UUID) *TrueOrFalseProblem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkbook queries the workbook edge of a TrueOrFalseProblem.
func (c *TrueOrFalseProblemClient) QueryWorkbook(tofp *TrueOrFalseProblem) *WorkbookQuery {
	query := (&WorkbookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tofp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trueorfalseproblem.Table, trueorfalseproblem.FieldID, id),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trueorfalseproblem.WorkbookTable, trueorfalseproblem.WorkbookColumn),
		)
		fromV = sqlgraph.Neighbors(tofp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbookCategory queries the workbook_category edge of a TrueOrFalseProblem.
func (c *TrueOrFalseProblemClient) QueryWorkbookCategory(tofp *TrueOrFalseProblem) *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tofp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(trueorfalseproblem.Table, trueorfalseproblem.FieldID, id),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trueorfalseproblem.WorkbookCategoryTable, trueorfalseproblem.WorkbookCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(tofp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrueOrFalseProblemClient) Hooks() []Hook {
	return c.hooks.TrueOrFalseProblem
}

// Interceptors returns the client interceptors.
func (c *TrueOrFalseProblemClient) Interceptors() []Interceptor {
	return c.inters.TrueOrFalseProblem
}

func (c *TrueOrFalseProblemClient) mutate(ctx context.Context, m *TrueOrFalseProblemMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TrueOrFalseProblemCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TrueOrFalseProblemUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TrueOrFalseProblemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TrueOrFalseProblemDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TrueOrFalseProblem mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryArticles queries the articles edge of a User.
func (c *UserClient) QueryArticles(u *User) *ArticleQuery {
	query := (&ArticleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(article.Table, article.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ArticlesTable, user.ArticlesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbooks queries the workbooks edge of a User.
func (c *UserClient) QueryWorkbooks(u *User) *WorkbookQuery {
	query := (&WorkbookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WorkbooksTable, user.WorkbooksColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbookMembers queries the workbook_members edge of a User.
func (c *UserClient) QueryWorkbookMembers(u *User) *WorkbookMemberQuery {
	query := (&WorkbookMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(workbookmember.Table, workbookmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WorkbookMembersTable, user.WorkbookMembersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WorkbookClient is a client for the Workbook schema.
type WorkbookClient struct {
	config
}

// NewWorkbookClient returns a client for the Workbook from the given config.
func NewWorkbookClient(c config) *WorkbookClient {
	return &WorkbookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workbook.Hooks(f(g(h())))`.
func (c *WorkbookClient) Use(hooks ...Hook) {
	c.hooks.Workbook = append(c.hooks.Workbook, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workbook.Intercept(f(g(h())))`.
func (c *WorkbookClient) Intercept(interceptors ...Interceptor) {
	c.inters.Workbook = append(c.inters.Workbook, interceptors...)
}

// Create returns a builder for creating a Workbook entity.
func (c *WorkbookClient) Create() *WorkbookCreate {
	mutation := newWorkbookMutation(c.config, OpCreate)
	return &WorkbookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Workbook entities.
func (c *WorkbookClient) CreateBulk(builders ...*WorkbookCreate) *WorkbookCreateBulk {
	return &WorkbookCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkbookClient) MapCreateBulk(slice any, setFunc func(*WorkbookCreate, int)) *WorkbookCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkbookCreateBulk{err: fmt.Errorf("calling to WorkbookClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkbookCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkbookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Workbook.
func (c *WorkbookClient) Update() *WorkbookUpdate {
	mutation := newWorkbookMutation(c.config, OpUpdate)
	return &WorkbookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkbookClient) UpdateOne(w *Workbook) *WorkbookUpdateOne {
	mutation := newWorkbookMutation(c.config, OpUpdateOne, withWorkbook(w))
	return &WorkbookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkbookClient) UpdateOneID(id uuid.UUID) *WorkbookUpdateOne {
	mutation := newWorkbookMutation(c.config, OpUpdateOne, withWorkbookID(id))
	return &WorkbookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Workbook.
func (c *WorkbookClient) Delete() *WorkbookDelete {
	mutation := newWorkbookMutation(c.config, OpDelete)
	return &WorkbookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkbookClient) DeleteOne(w *Workbook) *WorkbookDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkbookClient) DeleteOneID(id uuid.UUID) *WorkbookDeleteOne {
	builder := c.Delete().Where(workbook.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkbookDeleteOne{builder}
}

// Query returns a query builder for Workbook.
func (c *WorkbookClient) Query() *WorkbookQuery {
	return &WorkbookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkbook},
		inters: c.Interceptors(),
	}
}

// Get returns a Workbook entity by its id.
func (c *WorkbookClient) Get(ctx context.Context, id uuid.UUID) (*Workbook, error) {
	return c.Query().Where(workbook.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkbookClient) GetX(ctx context.Context, id uuid.UUID) *Workbook {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescriptionProblems queries the description_problems edge of a Workbook.
func (c *WorkbookClient) QueryDescriptionProblems(w *Workbook) *DescriptionProblemQuery {
	query := (&DescriptionProblemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbook.Table, workbook.FieldID, id),
			sqlgraph.To(descriptionproblem.Table, descriptionproblem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbook.DescriptionProblemsTable, workbook.DescriptionProblemsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySelectionProblems queries the selection_problems edge of a Workbook.
func (c *WorkbookClient) QuerySelectionProblems(w *Workbook) *SelectionProblemQuery {
	query := (&SelectionProblemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbook.Table, workbook.FieldID, id),
			sqlgraph.To(selectionproblem.Table, selectionproblem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbook.SelectionProblemsTable, workbook.SelectionProblemsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrueOrFalseProblems queries the true_or_false_problems edge of a Workbook.
func (c *WorkbookClient) QueryTrueOrFalseProblems(w *Workbook) *TrueOrFalseProblemQuery {
	query := (&TrueOrFalseProblemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbook.Table, workbook.FieldID, id),
			sqlgraph.To(trueorfalseproblem.Table, trueorfalseproblem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbook.TrueOrFalseProblemsTable, workbook.TrueOrFalseProblemsColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Workbook.
func (c *WorkbookClient) QueryUser(w *Workbook) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbook.Table, workbook.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbook.UserTable, workbook.UserColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbookCategories queries the workbook_categories edge of a Workbook.
func (c *WorkbookClient) QueryWorkbookCategories(w *Workbook) *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbook.Table, workbook.FieldID, id),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbook.WorkbookCategoriesTable, workbook.WorkbookCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbookMembers queries the workbook_members edge of a Workbook.
func (c *WorkbookClient) QueryWorkbookMembers(w *Workbook) *WorkbookMemberQuery {
	query := (&WorkbookMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := w.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbook.Table, workbook.FieldID, id),
			sqlgraph.To(workbookmember.Table, workbookmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbook.WorkbookMembersTable, workbook.WorkbookMembersColumn),
		)
		fromV = sqlgraph.Neighbors(w.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkbookClient) Hooks() []Hook {
	return c.hooks.Workbook
}

// Interceptors returns the client interceptors.
func (c *WorkbookClient) Interceptors() []Interceptor {
	return c.inters.Workbook
}

func (c *WorkbookClient) mutate(ctx context.Context, m *WorkbookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkbookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkbookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkbookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkbookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Workbook mutation op: %q", m.Op())
	}
}

// WorkbookCategoryClient is a client for the WorkbookCategory schema.
type WorkbookCategoryClient struct {
	config
}

// NewWorkbookCategoryClient returns a client for the WorkbookCategory from the given config.
func NewWorkbookCategoryClient(c config) *WorkbookCategoryClient {
	return &WorkbookCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workbookcategory.Hooks(f(g(h())))`.
func (c *WorkbookCategoryClient) Use(hooks ...Hook) {
	c.hooks.WorkbookCategory = append(c.hooks.WorkbookCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workbookcategory.Intercept(f(g(h())))`.
func (c *WorkbookCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkbookCategory = append(c.inters.WorkbookCategory, interceptors...)
}

// Create returns a builder for creating a WorkbookCategory entity.
func (c *WorkbookCategoryClient) Create() *WorkbookCategoryCreate {
	mutation := newWorkbookCategoryMutation(c.config, OpCreate)
	return &WorkbookCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkbookCategory entities.
func (c *WorkbookCategoryClient) CreateBulk(builders ...*WorkbookCategoryCreate) *WorkbookCategoryCreateBulk {
	return &WorkbookCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkbookCategoryClient) MapCreateBulk(slice any, setFunc func(*WorkbookCategoryCreate, int)) *WorkbookCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkbookCategoryCreateBulk{err: fmt.Errorf("calling to WorkbookCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkbookCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkbookCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkbookCategory.
func (c *WorkbookCategoryClient) Update() *WorkbookCategoryUpdate {
	mutation := newWorkbookCategoryMutation(c.config, OpUpdate)
	return &WorkbookCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkbookCategoryClient) UpdateOne(wc *WorkbookCategory) *WorkbookCategoryUpdateOne {
	mutation := newWorkbookCategoryMutation(c.config, OpUpdateOne, withWorkbookCategory(wc))
	return &WorkbookCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkbookCategoryClient) UpdateOneID(id uuid.UUID) *WorkbookCategoryUpdateOne {
	mutation := newWorkbookCategoryMutation(c.config, OpUpdateOne, withWorkbookCategoryID(id))
	return &WorkbookCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkbookCategory.
func (c *WorkbookCategoryClient) Delete() *WorkbookCategoryDelete {
	mutation := newWorkbookCategoryMutation(c.config, OpDelete)
	return &WorkbookCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkbookCategoryClient) DeleteOne(wc *WorkbookCategory) *WorkbookCategoryDeleteOne {
	return c.DeleteOneID(wc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkbookCategoryClient) DeleteOneID(id uuid.UUID) *WorkbookCategoryDeleteOne {
	builder := c.Delete().Where(workbookcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkbookCategoryDeleteOne{builder}
}

// Query returns a query builder for WorkbookCategory.
func (c *WorkbookCategoryClient) Query() *WorkbookCategoryQuery {
	return &WorkbookCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkbookCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkbookCategory entity by its id.
func (c *WorkbookCategoryClient) Get(ctx context.Context, id uuid.UUID) (*WorkbookCategory, error) {
	return c.Query().Where(workbookcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkbookCategoryClient) GetX(ctx context.Context, id uuid.UUID) *WorkbookCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDescriptionProblems queries the description_problems edge of a WorkbookCategory.
func (c *WorkbookCategoryClient) QueryDescriptionProblems(wc *WorkbookCategory) *DescriptionProblemQuery {
	query := (&DescriptionProblemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategory.Table, workbookcategory.FieldID, id),
			sqlgraph.To(descriptionproblem.Table, descriptionproblem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbookcategory.DescriptionProblemsTable, workbookcategory.DescriptionProblemsColumn),
		)
		fromV = sqlgraph.Neighbors(wc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySelectionProblems queries the selection_problems edge of a WorkbookCategory.
func (c *WorkbookCategoryClient) QuerySelectionProblems(wc *WorkbookCategory) *SelectionProblemQuery {
	query := (&SelectionProblemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategory.Table, workbookcategory.FieldID, id),
			sqlgraph.To(selectionproblem.Table, selectionproblem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbookcategory.SelectionProblemsTable, workbookcategory.SelectionProblemsColumn),
		)
		fromV = sqlgraph.Neighbors(wc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTrueOrFalseProblems queries the true_or_false_problems edge of a WorkbookCategory.
func (c *WorkbookCategoryClient) QueryTrueOrFalseProblems(wc *WorkbookCategory) *TrueOrFalseProblemQuery {
	query := (&TrueOrFalseProblemClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategory.Table, workbookcategory.FieldID, id),
			sqlgraph.To(trueorfalseproblem.Table, trueorfalseproblem.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workbookcategory.TrueOrFalseProblemsTable, workbookcategory.TrueOrFalseProblemsColumn),
		)
		fromV = sqlgraph.Neighbors(wc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbook queries the workbook edge of a WorkbookCategory.
func (c *WorkbookCategoryClient) QueryWorkbook(wc *WorkbookCategory) *WorkbookQuery {
	query := (&WorkbookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategory.Table, workbookcategory.FieldID, id),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbookcategory.WorkbookTable, workbookcategory.WorkbookColumn),
		)
		fromV = sqlgraph.Neighbors(wc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkbookCategoryClient) Hooks() []Hook {
	return c.hooks.WorkbookCategory
}

// Interceptors returns the client interceptors.
func (c *WorkbookCategoryClient) Interceptors() []Interceptor {
	return c.inters.WorkbookCategory
}

func (c *WorkbookCategoryClient) mutate(ctx context.Context, m *WorkbookCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkbookCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkbookCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkbookCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkbookCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkbookCategory mutation op: %q", m.Op())
	}
}

// WorkbookCategoryClosureClient is a client for the WorkbookCategoryClosure schema.
type WorkbookCategoryClosureClient struct {
	config
}

// NewWorkbookCategoryClosureClient returns a client for the WorkbookCategoryClosure from the given config.
func NewWorkbookCategoryClosureClient(c config) *WorkbookCategoryClosureClient {
	return &WorkbookCategoryClosureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workbookcategoryclosure.Hooks(f(g(h())))`.
func (c *WorkbookCategoryClosureClient) Use(hooks ...Hook) {
	c.hooks.WorkbookCategoryClosure = append(c.hooks.WorkbookCategoryClosure, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workbookcategoryclosure.Intercept(f(g(h())))`.
func (c *WorkbookCategoryClosureClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkbookCategoryClosure = append(c.inters.WorkbookCategoryClosure, interceptors...)
}

// Create returns a builder for creating a WorkbookCategoryClosure entity.
func (c *WorkbookCategoryClosureClient) Create() *WorkbookCategoryClosureCreate {
	mutation := newWorkbookCategoryClosureMutation(c.config, OpCreate)
	return &WorkbookCategoryClosureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkbookCategoryClosure entities.
func (c *WorkbookCategoryClosureClient) CreateBulk(builders ...*WorkbookCategoryClosureCreate) *WorkbookCategoryClosureCreateBulk {
	return &WorkbookCategoryClosureCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkbookCategoryClosureClient) MapCreateBulk(slice any, setFunc func(*WorkbookCategoryClosureCreate, int)) *WorkbookCategoryClosureCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkbookCategoryClosureCreateBulk{err: fmt.Errorf("calling to WorkbookCategoryClosureClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkbookCategoryClosureCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkbookCategoryClosureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkbookCategoryClosure.
func (c *WorkbookCategoryClosureClient) Update() *WorkbookCategoryClosureUpdate {
	mutation := newWorkbookCategoryClosureMutation(c.config, OpUpdate)
	return &WorkbookCategoryClosureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkbookCategoryClosureClient) UpdateOne(wcc *WorkbookCategoryClosure) *WorkbookCategoryClosureUpdateOne {
	mutation := newWorkbookCategoryClosureMutation(c.config, OpUpdateOne, withWorkbookCategoryClosure(wcc))
	return &WorkbookCategoryClosureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkbookCategoryClosureClient) UpdateOneID(id uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	mutation := newWorkbookCategoryClosureMutation(c.config, OpUpdateOne, withWorkbookCategoryClosureID(id))
	return &WorkbookCategoryClosureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkbookCategoryClosure.
func (c *WorkbookCategoryClosureClient) Delete() *WorkbookCategoryClosureDelete {
	mutation := newWorkbookCategoryClosureMutation(c.config, OpDelete)
	return &WorkbookCategoryClosureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkbookCategoryClosureClient) DeleteOne(wcc *WorkbookCategoryClosure) *WorkbookCategoryClosureDeleteOne {
	return c.DeleteOneID(wcc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkbookCategoryClosureClient) DeleteOneID(id uuid.UUID) *WorkbookCategoryClosureDeleteOne {
	builder := c.Delete().Where(workbookcategoryclosure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkbookCategoryClosureDeleteOne{builder}
}

// Query returns a query builder for WorkbookCategoryClosure.
func (c *WorkbookCategoryClosureClient) Query() *WorkbookCategoryClosureQuery {
	return &WorkbookCategoryClosureQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkbookCategoryClosure},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkbookCategoryClosure entity by its id.
func (c *WorkbookCategoryClosureClient) Get(ctx context.Context, id uuid.UUID) (*WorkbookCategoryClosure, error) {
	return c.Query().Where(workbookcategoryclosure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkbookCategoryClosureClient) GetX(ctx context.Context, id uuid.UUID) *WorkbookCategoryClosure {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryChildCategory queries the child_category edge of a WorkbookCategoryClosure.
func (c *WorkbookCategoryClosureClient) QueryChildCategory(wcc *WorkbookCategoryClosure) *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wcc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategoryclosure.Table, workbookcategoryclosure.FieldID, id),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workbookcategoryclosure.ChildCategoryTable, workbookcategoryclosure.ChildCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(wcc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryParentCategory queries the parent_category edge of a WorkbookCategoryClosure.
func (c *WorkbookCategoryClosureClient) QueryParentCategory(wcc *WorkbookCategoryClosure) *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wcc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategoryclosure.Table, workbookcategoryclosure.FieldID, id),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workbookcategoryclosure.ParentCategoryTable, workbookcategoryclosure.ParentCategoryColumn),
		)
		fromV = sqlgraph.Neighbors(wcc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkbookCategoryClosureClient) Hooks() []Hook {
	return c.hooks.WorkbookCategoryClosure
}

// Interceptors returns the client interceptors.
func (c *WorkbookCategoryClosureClient) Interceptors() []Interceptor {
	return c.inters.WorkbookCategoryClosure
}

func (c *WorkbookCategoryClosureClient) mutate(ctx context.Context, m *WorkbookCategoryClosureMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkbookCategoryClosureCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkbookCategoryClosureUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkbookCategoryClosureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkbookCategoryClosureDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkbookCategoryClosure mutation op: %q", m.Op())
	}
}

// WorkbookMemberClient is a client for the WorkbookMember schema.
type WorkbookMemberClient struct {
	config
}

// NewWorkbookMemberClient returns a client for the WorkbookMember from the given config.
func NewWorkbookMemberClient(c config) *WorkbookMemberClient {
	return &WorkbookMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workbookmember.Hooks(f(g(h())))`.
func (c *WorkbookMemberClient) Use(hooks ...Hook) {
	c.hooks.WorkbookMember = append(c.hooks.WorkbookMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workbookmember.Intercept(f(g(h())))`.
func (c *WorkbookMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkbookMember = append(c.inters.WorkbookMember, interceptors...)
}

// Create returns a builder for creating a WorkbookMember entity.
func (c *WorkbookMemberClient) Create() *WorkbookMemberCreate {
	mutation := newWorkbookMemberMutation(c.config, OpCreate)
	return &WorkbookMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkbookMember entities.
func (c *WorkbookMemberClient) CreateBulk(builders ...*WorkbookMemberCreate) *WorkbookMemberCreateBulk {
	return &WorkbookMemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkbookMemberClient) MapCreateBulk(slice any, setFunc func(*WorkbookMemberCreate, int)) *WorkbookMemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkbookMemberCreateBulk{err: fmt.Errorf("calling to WorkbookMemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkbookMemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkbookMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkbookMember.
func (c *WorkbookMemberClient) Update() *WorkbookMemberUpdate {
	mutation := newWorkbookMemberMutation(c.config, OpUpdate)
	return &WorkbookMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkbookMemberClient) UpdateOne(wm *WorkbookMember) *WorkbookMemberUpdateOne {
	mutation := newWorkbookMemberMutation(c.config, OpUpdateOne, withWorkbookMember(wm))
	return &WorkbookMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkbookMemberClient) UpdateOneID(id uuid.UUID) *WorkbookMemberUpdateOne {
	mutation := newWorkbookMemberMutation(c.config, OpUpdateOne, withWorkbookMemberID(id))
	return &WorkbookMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkbookMember.
func (c *WorkbookMemberClient) Delete() *WorkbookMemberDelete {
	mutation := newWorkbookMemberMutation(c.config, OpDelete)
	return &WorkbookMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkbookMemberClient) DeleteOne(wm *WorkbookMember) *WorkbookMemberDeleteOne {
	return c.DeleteOneID(wm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkbookMemberClient) DeleteOneID(id uuid.UUID) *WorkbookMemberDeleteOne {
	builder := c.Delete().Where(workbookmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkbookMemberDeleteOne{builder}
}

// Query returns a query builder for WorkbookMember.
func (c *WorkbookMemberClient) Query() *WorkbookMemberQuery {
	return &WorkbookMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkbookMember},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkbookMember entity by its id.
func (c *WorkbookMemberClient) Get(ctx context.Context, id uuid.UUID) (*WorkbookMember, error) {
	return c.Query().Where(workbookmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkbookMemberClient) GetX(ctx context.Context, id uuid.UUID) *WorkbookMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRole queries the role edge of a WorkbookMember.
func (c *WorkbookMemberClient) QueryRole(wm *WorkbookMember) *RoleQuery {
	query := (&RoleClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookmember.Table, workbookmember.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbookmember.RoleTable, workbookmember.RoleColumn),
		)
		fromV = sqlgraph.Neighbors(wm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a WorkbookMember.
func (c *WorkbookMemberClient) QueryUser(wm *WorkbookMember) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookmember.Table, workbookmember.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbookmember.UserTable, workbookmember.UserColumn),
		)
		fromV = sqlgraph.Neighbors(wm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkbook queries the workbook edge of a WorkbookMember.
func (c *WorkbookMemberClient) QueryWorkbook(wm *WorkbookMember) *WorkbookQuery {
	query := (&WorkbookClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookmember.Table, workbookmember.FieldID, id),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbookmember.WorkbookTable, workbookmember.WorkbookColumn),
		)
		fromV = sqlgraph.Neighbors(wm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkbookMemberClient) Hooks() []Hook {
	return c.hooks.WorkbookMember
}

// Interceptors returns the client interceptors.
func (c *WorkbookMemberClient) Interceptors() []Interceptor {
	return c.inters.WorkbookMember
}

func (c *WorkbookMemberClient) mutate(ctx context.Context, m *WorkbookMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkbookMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkbookMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkbookMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkbookMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkbookMember mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Article, DescriptionProblem, Permission, Role, SelectionProblem,
		SelectionProblemAnswer, TrueOrFalseProblem, User, Workbook, WorkbookCategory,
		WorkbookCategoryClosure, WorkbookMember []ent.Hook
	}
	inters struct {
		Article, DescriptionProblem, Permission, Role, SelectionProblem,
		SelectionProblemAnswer, TrueOrFalseProblem, User, Workbook, WorkbookCategory,
		WorkbookCategoryClosure, WorkbookMember []ent.Interceptor
	}
)
