// Code generated by ent, DO NOT EDIT.

package workbookcategorydetail

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workbookcategorydetail type in the database.
	Label = "workbook_category_detail"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldWorkbookCategoryID holds the string denoting the workbook_category_id field in the database.
	FieldWorkbookCategoryID = "workbook_category_id"
	// EdgeDescriptionProblems holds the string denoting the description_problems edge name in mutations.
	EdgeDescriptionProblems = "description_problems"
	// EdgeSelectionProblems holds the string denoting the selection_problems edge name in mutations.
	EdgeSelectionProblems = "selection_problems"
	// EdgeTrueOrFalseProblems holds the string denoting the true_or_false_problems edge name in mutations.
	EdgeTrueOrFalseProblems = "true_or_false_problems"
	// Table holds the table name of the workbookcategorydetail in the database.
	Table = "workbook_category_details"
	// DescriptionProblemsTable is the table that holds the description_problems relation/edge.
	DescriptionProblemsTable = "description_problems"
	// DescriptionProblemsInverseTable is the table name for the DescriptionProblem entity.
	// It exists in this package in order to avoid circular dependency with the "descriptionproblem" package.
	DescriptionProblemsInverseTable = "description_problems"
	// DescriptionProblemsColumn is the table column denoting the description_problems relation/edge.
	DescriptionProblemsColumn = "workbook_category_detail_id"
	// SelectionProblemsTable is the table that holds the selection_problems relation/edge.
	SelectionProblemsTable = "selection_problems"
	// SelectionProblemsInverseTable is the table name for the SelectionProblem entity.
	// It exists in this package in order to avoid circular dependency with the "selectionproblem" package.
	SelectionProblemsInverseTable = "selection_problems"
	// SelectionProblemsColumn is the table column denoting the selection_problems relation/edge.
	SelectionProblemsColumn = "workbook_category_detail_id"
	// TrueOrFalseProblemsTable is the table that holds the true_or_false_problems relation/edge.
	TrueOrFalseProblemsTable = "true_or_false_problems"
	// TrueOrFalseProblemsInverseTable is the table name for the TrueOrFalseProblem entity.
	// It exists in this package in order to avoid circular dependency with the "trueorfalseproblem" package.
	TrueOrFalseProblemsInverseTable = "true_or_false_problems"
	// TrueOrFalseProblemsColumn is the table column denoting the true_or_false_problems relation/edge.
	TrueOrFalseProblemsColumn = "workbook_category_detail_id"
)

// Columns holds all SQL columns for workbookcategorydetail fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldWorkbookCategoryID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workbook_category_details"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"workbook_category_workbook_category_details",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// OrderOption defines the ordering options for the WorkbookCategoryDetail queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByWorkbookCategoryID orders the results by the workbook_category_id field.
func ByWorkbookCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookCategoryID, opts...).ToFunc()
}

// ByDescriptionProblemsCount orders the results by description_problems count.
func ByDescriptionProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDescriptionProblemsStep(), opts...)
	}
}

// ByDescriptionProblems orders the results by description_problems terms.
func ByDescriptionProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDescriptionProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySelectionProblemsCount orders the results by selection_problems count.
func BySelectionProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSelectionProblemsStep(), opts...)
	}
}

// BySelectionProblems orders the results by selection_problems terms.
func BySelectionProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectionProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrueOrFalseProblemsCount orders the results by true_or_false_problems count.
func ByTrueOrFalseProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrueOrFalseProblemsStep(), opts...)
	}
}

// ByTrueOrFalseProblems orders the results by true_or_false_problems terms.
func ByTrueOrFalseProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrueOrFalseProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDescriptionProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DescriptionProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DescriptionProblemsTable, DescriptionProblemsColumn),
	)
}
func newSelectionProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectionProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SelectionProblemsTable, SelectionProblemsColumn),
	)
}
func newTrueOrFalseProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrueOrFalseProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrueOrFalseProblemsTable, TrueOrFalseProblemsColumn),
	)
}
