// Code generated by ent, DO NOT EDIT.

package ent

import (
	"study-pal-backend/ent/article"
	"study-pal-backend/ent/articlelike"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/permission"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/schema"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategoryclosure"
	"study-pal-backend/ent/workbookmember"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	articleMixin := schema.Article{}.Mixin()
	articleMixinFields1 := articleMixin[1].Fields()
	_ = articleMixinFields1
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescCreatedAt is the schema descriptor for created_at field.
	articleDescCreatedAt := articleMixinFields1[0].Descriptor()
	// article.DefaultCreatedAt holds the default value on creation for the created_at field.
	article.DefaultCreatedAt = articleDescCreatedAt.Default.(func() time.Time)
	// articleDescUpdatedAt is the schema descriptor for updated_at field.
	articleDescUpdatedAt := articleMixinFields1[1].Descriptor()
	// article.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	article.DefaultUpdatedAt = articleDescUpdatedAt.Default.(func() time.Time)
	// article.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	article.UpdateDefaultUpdatedAt = articleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// articleDescDescription is the schema descriptor for description field.
	articleDescDescription := articleFields[1].Descriptor()
	// article.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	article.DescriptionValidator = func() func(string) error {
		validators := articleDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	articlelikeMixin := schema.ArticleLike{}.Mixin()
	articlelikeMixinFields1 := articlelikeMixin[1].Fields()
	_ = articlelikeMixinFields1
	articlelikeFields := schema.ArticleLike{}.Fields()
	_ = articlelikeFields
	// articlelikeDescCreatedAt is the schema descriptor for created_at field.
	articlelikeDescCreatedAt := articlelikeMixinFields1[0].Descriptor()
	// articlelike.DefaultCreatedAt holds the default value on creation for the created_at field.
	articlelike.DefaultCreatedAt = articlelikeDescCreatedAt.Default.(func() time.Time)
	// articlelikeDescUpdatedAt is the schema descriptor for updated_at field.
	articlelikeDescUpdatedAt := articlelikeMixinFields1[1].Descriptor()
	// articlelike.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	articlelike.DefaultUpdatedAt = articlelikeDescUpdatedAt.Default.(func() time.Time)
	// articlelike.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	articlelike.UpdateDefaultUpdatedAt = articlelikeDescUpdatedAt.UpdateDefault.(func() time.Time)
	descriptionproblemMixin := schema.DescriptionProblem{}.Mixin()
	descriptionproblemMixinFields1 := descriptionproblemMixin[1].Fields()
	_ = descriptionproblemMixinFields1
	descriptionproblemFields := schema.DescriptionProblem{}.Fields()
	_ = descriptionproblemFields
	// descriptionproblemDescCreatedAt is the schema descriptor for created_at field.
	descriptionproblemDescCreatedAt := descriptionproblemMixinFields1[0].Descriptor()
	// descriptionproblem.DefaultCreatedAt holds the default value on creation for the created_at field.
	descriptionproblem.DefaultCreatedAt = descriptionproblemDescCreatedAt.Default.(func() time.Time)
	// descriptionproblemDescUpdatedAt is the schema descriptor for updated_at field.
	descriptionproblemDescUpdatedAt := descriptionproblemMixinFields1[1].Descriptor()
	// descriptionproblem.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	descriptionproblem.DefaultUpdatedAt = descriptionproblemDescUpdatedAt.Default.(func() time.Time)
	// descriptionproblem.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	descriptionproblem.UpdateDefaultUpdatedAt = descriptionproblemDescUpdatedAt.UpdateDefault.(func() time.Time)
	// descriptionproblemDescCorrectStatement is the schema descriptor for correct_statement field.
	descriptionproblemDescCorrectStatement := descriptionproblemFields[0].Descriptor()
	// descriptionproblem.CorrectStatementValidator is a validator for the "correct_statement" field. It is called by the builders before save.
	descriptionproblem.CorrectStatementValidator = func() func(string) error {
		validators := descriptionproblemDescCorrectStatement.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(correct_statement string) error {
			for _, fn := range fns {
				if err := fn(correct_statement); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// descriptionproblemDescStatement is the schema descriptor for statement field.
	descriptionproblemDescStatement := descriptionproblemFields[1].Descriptor()
	// descriptionproblem.StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	descriptionproblem.StatementValidator = func() func(string) error {
		validators := descriptionproblemDescStatement.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(statement string) error {
			for _, fn := range fns {
				if err := fn(statement); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	permissionMixin := schema.Permission{}.Mixin()
	permissionMixinFields1 := permissionMixin[1].Fields()
	_ = permissionMixinFields1
	permissionFields := schema.Permission{}.Fields()
	_ = permissionFields
	// permissionDescCreatedAt is the schema descriptor for created_at field.
	permissionDescCreatedAt := permissionMixinFields1[0].Descriptor()
	// permission.DefaultCreatedAt holds the default value on creation for the created_at field.
	permission.DefaultCreatedAt = permissionDescCreatedAt.Default.(func() time.Time)
	// permissionDescUpdatedAt is the schema descriptor for updated_at field.
	permissionDescUpdatedAt := permissionMixinFields1[1].Descriptor()
	// permission.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	permission.DefaultUpdatedAt = permissionDescUpdatedAt.Default.(func() time.Time)
	// permission.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	permission.UpdateDefaultUpdatedAt = permissionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// permissionDescName is the schema descriptor for name field.
	permissionDescName := permissionFields[0].Descriptor()
	// permission.NameValidator is a validator for the "name" field. It is called by the builders before save.
	permission.NameValidator = func() func(string) error {
		validators := permissionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	roleMixin := schema.Role{}.Mixin()
	roleMixinFields1 := roleMixin[1].Fields()
	_ = roleMixinFields1
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleMixinFields1[0].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	// roleDescUpdatedAt is the schema descriptor for updated_at field.
	roleDescUpdatedAt := roleMixinFields1[1].Descriptor()
	// role.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	role.DefaultUpdatedAt = roleDescUpdatedAt.Default.(func() time.Time)
	// role.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	role.UpdateDefaultUpdatedAt = roleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[0].Descriptor()
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = func() func(string) error {
		validators := roleDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	selectionproblemMixin := schema.SelectionProblem{}.Mixin()
	selectionproblemMixinFields1 := selectionproblemMixin[1].Fields()
	_ = selectionproblemMixinFields1
	selectionproblemFields := schema.SelectionProblem{}.Fields()
	_ = selectionproblemFields
	// selectionproblemDescCreatedAt is the schema descriptor for created_at field.
	selectionproblemDescCreatedAt := selectionproblemMixinFields1[0].Descriptor()
	// selectionproblem.DefaultCreatedAt holds the default value on creation for the created_at field.
	selectionproblem.DefaultCreatedAt = selectionproblemDescCreatedAt.Default.(func() time.Time)
	// selectionproblemDescUpdatedAt is the schema descriptor for updated_at field.
	selectionproblemDescUpdatedAt := selectionproblemMixinFields1[1].Descriptor()
	// selectionproblem.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	selectionproblem.DefaultUpdatedAt = selectionproblemDescUpdatedAt.Default.(func() time.Time)
	// selectionproblem.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	selectionproblem.UpdateDefaultUpdatedAt = selectionproblemDescUpdatedAt.UpdateDefault.(func() time.Time)
	// selectionproblemDescStatement is the schema descriptor for statement field.
	selectionproblemDescStatement := selectionproblemFields[0].Descriptor()
	// selectionproblem.StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	selectionproblem.StatementValidator = func() func(string) error {
		validators := selectionproblemDescStatement.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(statement string) error {
			for _, fn := range fns {
				if err := fn(statement); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	selectionproblemanswerMixin := schema.SelectionProblemAnswer{}.Mixin()
	selectionproblemanswerMixinFields1 := selectionproblemanswerMixin[1].Fields()
	_ = selectionproblemanswerMixinFields1
	selectionproblemanswerFields := schema.SelectionProblemAnswer{}.Fields()
	_ = selectionproblemanswerFields
	// selectionproblemanswerDescCreatedAt is the schema descriptor for created_at field.
	selectionproblemanswerDescCreatedAt := selectionproblemanswerMixinFields1[0].Descriptor()
	// selectionproblemanswer.DefaultCreatedAt holds the default value on creation for the created_at field.
	selectionproblemanswer.DefaultCreatedAt = selectionproblemanswerDescCreatedAt.Default.(func() time.Time)
	// selectionproblemanswerDescUpdatedAt is the schema descriptor for updated_at field.
	selectionproblemanswerDescUpdatedAt := selectionproblemanswerMixinFields1[1].Descriptor()
	// selectionproblemanswer.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	selectionproblemanswer.DefaultUpdatedAt = selectionproblemanswerDescUpdatedAt.Default.(func() time.Time)
	// selectionproblemanswer.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	selectionproblemanswer.UpdateDefaultUpdatedAt = selectionproblemanswerDescUpdatedAt.UpdateDefault.(func() time.Time)
	// selectionproblemanswerDescStatement is the schema descriptor for statement field.
	selectionproblemanswerDescStatement := selectionproblemanswerFields[2].Descriptor()
	// selectionproblemanswer.StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	selectionproblemanswer.StatementValidator = func() func(string) error {
		validators := selectionproblemanswerDescStatement.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(statement string) error {
			for _, fn := range fns {
				if err := fn(statement); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	trueorfalseproblemMixin := schema.TrueOrFalseProblem{}.Mixin()
	trueorfalseproblemMixinFields1 := trueorfalseproblemMixin[1].Fields()
	_ = trueorfalseproblemMixinFields1
	trueorfalseproblemFields := schema.TrueOrFalseProblem{}.Fields()
	_ = trueorfalseproblemFields
	// trueorfalseproblemDescCreatedAt is the schema descriptor for created_at field.
	trueorfalseproblemDescCreatedAt := trueorfalseproblemMixinFields1[0].Descriptor()
	// trueorfalseproblem.DefaultCreatedAt holds the default value on creation for the created_at field.
	trueorfalseproblem.DefaultCreatedAt = trueorfalseproblemDescCreatedAt.Default.(func() time.Time)
	// trueorfalseproblemDescUpdatedAt is the schema descriptor for updated_at field.
	trueorfalseproblemDescUpdatedAt := trueorfalseproblemMixinFields1[1].Descriptor()
	// trueorfalseproblem.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	trueorfalseproblem.DefaultUpdatedAt = trueorfalseproblemDescUpdatedAt.Default.(func() time.Time)
	// trueorfalseproblem.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	trueorfalseproblem.UpdateDefaultUpdatedAt = trueorfalseproblemDescUpdatedAt.UpdateDefault.(func() time.Time)
	// trueorfalseproblemDescStatement is the schema descriptor for statement field.
	trueorfalseproblemDescStatement := trueorfalseproblemFields[1].Descriptor()
	// trueorfalseproblem.StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	trueorfalseproblem.StatementValidator = func() func(string) error {
		validators := trueorfalseproblemDescStatement.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(statement string) error {
			for _, fn := range fns {
				if err := fn(statement); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinFields1 := userMixin[1].Fields()
	_ = userMixinFields1
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields1[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields1[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescNickName is the schema descriptor for nick_name field.
	userDescNickName := userFields[2].Descriptor()
	// user.NickNameValidator is a validator for the "nick_name" field. It is called by the builders before save.
	user.NickNameValidator = func() func(string) error {
		validators := userDescNickName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(nick_name string) error {
			for _, fn := range fns {
				if err := fn(nick_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	workbookMixin := schema.Workbook{}.Mixin()
	workbookMixinFields1 := workbookMixin[1].Fields()
	_ = workbookMixinFields1
	workbookFields := schema.Workbook{}.Fields()
	_ = workbookFields
	// workbookDescCreatedAt is the schema descriptor for created_at field.
	workbookDescCreatedAt := workbookMixinFields1[0].Descriptor()
	// workbook.DefaultCreatedAt holds the default value on creation for the created_at field.
	workbook.DefaultCreatedAt = workbookDescCreatedAt.Default.(func() time.Time)
	// workbookDescUpdatedAt is the schema descriptor for updated_at field.
	workbookDescUpdatedAt := workbookMixinFields1[1].Descriptor()
	// workbook.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workbook.DefaultUpdatedAt = workbookDescUpdatedAt.Default.(func() time.Time)
	// workbook.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workbook.UpdateDefaultUpdatedAt = workbookDescUpdatedAt.UpdateDefault.(func() time.Time)
	// workbookDescDescription is the schema descriptor for description field.
	workbookDescDescription := workbookFields[1].Descriptor()
	// workbook.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	workbook.DescriptionValidator = workbookDescDescription.Validators[0].(func(string) error)
	// workbookDescIsPublic is the schema descriptor for is_public field.
	workbookDescIsPublic := workbookFields[2].Descriptor()
	// workbook.DefaultIsPublic holds the default value on creation for the is_public field.
	workbook.DefaultIsPublic = workbookDescIsPublic.Default.(bool)
	// workbookDescTitle is the schema descriptor for title field.
	workbookDescTitle := workbookFields[3].Descriptor()
	// workbook.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	workbook.TitleValidator = func() func(string) error {
		validators := workbookDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	workbookcategoryMixin := schema.WorkbookCategory{}.Mixin()
	workbookcategoryMixinFields1 := workbookcategoryMixin[1].Fields()
	_ = workbookcategoryMixinFields1
	workbookcategoryFields := schema.WorkbookCategory{}.Fields()
	_ = workbookcategoryFields
	// workbookcategoryDescCreatedAt is the schema descriptor for created_at field.
	workbookcategoryDescCreatedAt := workbookcategoryMixinFields1[0].Descriptor()
	// workbookcategory.DefaultCreatedAt holds the default value on creation for the created_at field.
	workbookcategory.DefaultCreatedAt = workbookcategoryDescCreatedAt.Default.(func() time.Time)
	// workbookcategoryDescUpdatedAt is the schema descriptor for updated_at field.
	workbookcategoryDescUpdatedAt := workbookcategoryMixinFields1[1].Descriptor()
	// workbookcategory.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workbookcategory.DefaultUpdatedAt = workbookcategoryDescUpdatedAt.Default.(func() time.Time)
	// workbookcategory.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workbookcategory.UpdateDefaultUpdatedAt = workbookcategoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// workbookcategoryDescName is the schema descriptor for name field.
	workbookcategoryDescName := workbookcategoryFields[0].Descriptor()
	// workbookcategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	workbookcategory.NameValidator = func() func(string) error {
		validators := workbookcategoryDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	workbookcategoryclosureMixin := schema.WorkbookCategoryClosure{}.Mixin()
	workbookcategoryclosureMixinFields1 := workbookcategoryclosureMixin[1].Fields()
	_ = workbookcategoryclosureMixinFields1
	workbookcategoryclosureFields := schema.WorkbookCategoryClosure{}.Fields()
	_ = workbookcategoryclosureFields
	// workbookcategoryclosureDescCreatedAt is the schema descriptor for created_at field.
	workbookcategoryclosureDescCreatedAt := workbookcategoryclosureMixinFields1[0].Descriptor()
	// workbookcategoryclosure.DefaultCreatedAt holds the default value on creation for the created_at field.
	workbookcategoryclosure.DefaultCreatedAt = workbookcategoryclosureDescCreatedAt.Default.(func() time.Time)
	// workbookcategoryclosureDescUpdatedAt is the schema descriptor for updated_at field.
	workbookcategoryclosureDescUpdatedAt := workbookcategoryclosureMixinFields1[1].Descriptor()
	// workbookcategoryclosure.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workbookcategoryclosure.DefaultUpdatedAt = workbookcategoryclosureDescUpdatedAt.Default.(func() time.Time)
	// workbookcategoryclosure.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workbookcategoryclosure.UpdateDefaultUpdatedAt = workbookcategoryclosureDescUpdatedAt.UpdateDefault.(func() time.Time)
	workbookmemberMixin := schema.WorkbookMember{}.Mixin()
	workbookmemberMixinFields1 := workbookmemberMixin[1].Fields()
	_ = workbookmemberMixinFields1
	workbookmemberFields := schema.WorkbookMember{}.Fields()
	_ = workbookmemberFields
	// workbookmemberDescCreatedAt is the schema descriptor for created_at field.
	workbookmemberDescCreatedAt := workbookmemberMixinFields1[0].Descriptor()
	// workbookmember.DefaultCreatedAt holds the default value on creation for the created_at field.
	workbookmember.DefaultCreatedAt = workbookmemberDescCreatedAt.Default.(func() time.Time)
	// workbookmemberDescUpdatedAt is the schema descriptor for updated_at field.
	workbookmemberDescUpdatedAt := workbookmemberMixinFields1[1].Descriptor()
	// workbookmember.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workbookmember.DefaultUpdatedAt = workbookmemberDescUpdatedAt.Default.(func() time.Time)
	// workbookmember.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workbookmember.UpdateDefaultUpdatedAt = workbookmemberDescUpdatedAt.UpdateDefault.(func() time.Time)
}
