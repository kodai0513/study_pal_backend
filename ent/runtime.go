// Code generated by ent, DO NOT EDIT.

package ent

import (
	"study-pal-backend/ent/answerdescription"
	"study-pal-backend/ent/answermultichoices"
	"study-pal-backend/ent/answertruth"
	"study-pal-backend/ent/answertype"
	"study-pal-backend/ent/article"
	"study-pal-backend/ent/permission"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/schema"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookmember"
	"time"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	answerdescriptionMixin := schema.AnswerDescription{}.Mixin()
	answerdescriptionMixinFields0 := answerdescriptionMixin[0].Fields()
	_ = answerdescriptionMixinFields0
	answerdescriptionFields := schema.AnswerDescription{}.Fields()
	_ = answerdescriptionFields
	// answerdescriptionDescCreatedAt is the schema descriptor for created_at field.
	answerdescriptionDescCreatedAt := answerdescriptionMixinFields0[0].Descriptor()
	// answerdescription.DefaultCreatedAt holds the default value on creation for the created_at field.
	answerdescription.DefaultCreatedAt = answerdescriptionDescCreatedAt.Default.(func() time.Time)
	// answerdescriptionDescUpdatedAt is the schema descriptor for updated_at field.
	answerdescriptionDescUpdatedAt := answerdescriptionMixinFields0[1].Descriptor()
	// answerdescription.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	answerdescription.DefaultUpdatedAt = answerdescriptionDescUpdatedAt.Default.(func() time.Time)
	// answerdescription.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	answerdescription.UpdateDefaultUpdatedAt = answerdescriptionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// answerdescriptionDescName is the schema descriptor for name field.
	answerdescriptionDescName := answerdescriptionFields[0].Descriptor()
	// answerdescription.NameValidator is a validator for the "name" field. It is called by the builders before save.
	answerdescription.NameValidator = func() func(string) error {
		validators := answerdescriptionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	answermultichoicesMixin := schema.AnswerMultiChoices{}.Mixin()
	answermultichoicesMixinFields0 := answermultichoicesMixin[0].Fields()
	_ = answermultichoicesMixinFields0
	answermultichoicesFields := schema.AnswerMultiChoices{}.Fields()
	_ = answermultichoicesFields
	// answermultichoicesDescCreatedAt is the schema descriptor for created_at field.
	answermultichoicesDescCreatedAt := answermultichoicesMixinFields0[0].Descriptor()
	// answermultichoices.DefaultCreatedAt holds the default value on creation for the created_at field.
	answermultichoices.DefaultCreatedAt = answermultichoicesDescCreatedAt.Default.(func() time.Time)
	// answermultichoicesDescUpdatedAt is the schema descriptor for updated_at field.
	answermultichoicesDescUpdatedAt := answermultichoicesMixinFields0[1].Descriptor()
	// answermultichoices.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	answermultichoices.DefaultUpdatedAt = answermultichoicesDescUpdatedAt.Default.(func() time.Time)
	// answermultichoices.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	answermultichoices.UpdateDefaultUpdatedAt = answermultichoicesDescUpdatedAt.UpdateDefault.(func() time.Time)
	// answermultichoicesDescName is the schema descriptor for name field.
	answermultichoicesDescName := answermultichoicesFields[0].Descriptor()
	// answermultichoices.NameValidator is a validator for the "name" field. It is called by the builders before save.
	answermultichoices.NameValidator = func() func(string) error {
		validators := answermultichoicesDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	answertruthMixin := schema.AnswerTruth{}.Mixin()
	answertruthMixinFields0 := answertruthMixin[0].Fields()
	_ = answertruthMixinFields0
	answertruthFields := schema.AnswerTruth{}.Fields()
	_ = answertruthFields
	// answertruthDescCreatedAt is the schema descriptor for created_at field.
	answertruthDescCreatedAt := answertruthMixinFields0[0].Descriptor()
	// answertruth.DefaultCreatedAt holds the default value on creation for the created_at field.
	answertruth.DefaultCreatedAt = answertruthDescCreatedAt.Default.(func() time.Time)
	// answertruthDescUpdatedAt is the schema descriptor for updated_at field.
	answertruthDescUpdatedAt := answertruthMixinFields0[1].Descriptor()
	// answertruth.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	answertruth.DefaultUpdatedAt = answertruthDescUpdatedAt.Default.(func() time.Time)
	// answertruth.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	answertruth.UpdateDefaultUpdatedAt = answertruthDescUpdatedAt.UpdateDefault.(func() time.Time)
	answertypeMixin := schema.AnswerType{}.Mixin()
	answertypeMixinFields0 := answertypeMixin[0].Fields()
	_ = answertypeMixinFields0
	answertypeFields := schema.AnswerType{}.Fields()
	_ = answertypeFields
	// answertypeDescCreatedAt is the schema descriptor for created_at field.
	answertypeDescCreatedAt := answertypeMixinFields0[0].Descriptor()
	// answertype.DefaultCreatedAt holds the default value on creation for the created_at field.
	answertype.DefaultCreatedAt = answertypeDescCreatedAt.Default.(func() time.Time)
	// answertypeDescUpdatedAt is the schema descriptor for updated_at field.
	answertypeDescUpdatedAt := answertypeMixinFields0[1].Descriptor()
	// answertype.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	answertype.DefaultUpdatedAt = answertypeDescUpdatedAt.Default.(func() time.Time)
	// answertype.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	answertype.UpdateDefaultUpdatedAt = answertypeDescUpdatedAt.UpdateDefault.(func() time.Time)
	// answertypeDescName is the schema descriptor for name field.
	answertypeDescName := answertypeFields[0].Descriptor()
	// answertype.NameValidator is a validator for the "name" field. It is called by the builders before save.
	answertype.NameValidator = func() func(string) error {
		validators := answertypeDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	articleMixin := schema.Article{}.Mixin()
	articleMixinFields0 := articleMixin[0].Fields()
	_ = articleMixinFields0
	articleFields := schema.Article{}.Fields()
	_ = articleFields
	// articleDescCreatedAt is the schema descriptor for created_at field.
	articleDescCreatedAt := articleMixinFields0[0].Descriptor()
	// article.DefaultCreatedAt holds the default value on creation for the created_at field.
	article.DefaultCreatedAt = articleDescCreatedAt.Default.(func() time.Time)
	// articleDescUpdatedAt is the schema descriptor for updated_at field.
	articleDescUpdatedAt := articleMixinFields0[1].Descriptor()
	// article.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	article.DefaultUpdatedAt = articleDescUpdatedAt.Default.(func() time.Time)
	// article.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	article.UpdateDefaultUpdatedAt = articleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// articleDescDescription is the schema descriptor for description field.
	articleDescDescription := articleFields[0].Descriptor()
	// article.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	article.DescriptionValidator = func() func(string) error {
		validators := articleDescDescription.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(description string) error {
			for _, fn := range fns {
				if err := fn(description); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	permissionMixin := schema.Permission{}.Mixin()
	permissionMixinFields0 := permissionMixin[0].Fields()
	_ = permissionMixinFields0
	permissionFields := schema.Permission{}.Fields()
	_ = permissionFields
	// permissionDescCreatedAt is the schema descriptor for created_at field.
	permissionDescCreatedAt := permissionMixinFields0[0].Descriptor()
	// permission.DefaultCreatedAt holds the default value on creation for the created_at field.
	permission.DefaultCreatedAt = permissionDescCreatedAt.Default.(func() time.Time)
	// permissionDescUpdatedAt is the schema descriptor for updated_at field.
	permissionDescUpdatedAt := permissionMixinFields0[1].Descriptor()
	// permission.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	permission.DefaultUpdatedAt = permissionDescUpdatedAt.Default.(func() time.Time)
	// permission.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	permission.UpdateDefaultUpdatedAt = permissionDescUpdatedAt.UpdateDefault.(func() time.Time)
	// permissionDescName is the schema descriptor for name field.
	permissionDescName := permissionFields[0].Descriptor()
	// permission.NameValidator is a validator for the "name" field. It is called by the builders before save.
	permission.NameValidator = func() func(string) error {
		validators := permissionDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	problemMixin := schema.Problem{}.Mixin()
	problemMixinFields0 := problemMixin[0].Fields()
	_ = problemMixinFields0
	problemFields := schema.Problem{}.Fields()
	_ = problemFields
	// problemDescCreatedAt is the schema descriptor for created_at field.
	problemDescCreatedAt := problemMixinFields0[0].Descriptor()
	// problem.DefaultCreatedAt holds the default value on creation for the created_at field.
	problem.DefaultCreatedAt = problemDescCreatedAt.Default.(func() time.Time)
	// problemDescUpdatedAt is the schema descriptor for updated_at field.
	problemDescUpdatedAt := problemMixinFields0[1].Descriptor()
	// problem.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	problem.DefaultUpdatedAt = problemDescUpdatedAt.Default.(func() time.Time)
	// problem.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	problem.UpdateDefaultUpdatedAt = problemDescUpdatedAt.UpdateDefault.(func() time.Time)
	// problemDescStatement is the schema descriptor for statement field.
	problemDescStatement := problemFields[1].Descriptor()
	// problem.StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	problem.StatementValidator = func() func(string) error {
		validators := problemDescStatement.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(statement string) error {
			for _, fn := range fns {
				if err := fn(statement); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	roleMixin := schema.Role{}.Mixin()
	roleMixinFields0 := roleMixin[0].Fields()
	_ = roleMixinFields0
	roleFields := schema.Role{}.Fields()
	_ = roleFields
	// roleDescCreatedAt is the schema descriptor for created_at field.
	roleDescCreatedAt := roleMixinFields0[0].Descriptor()
	// role.DefaultCreatedAt holds the default value on creation for the created_at field.
	role.DefaultCreatedAt = roleDescCreatedAt.Default.(func() time.Time)
	// roleDescUpdatedAt is the schema descriptor for updated_at field.
	roleDescUpdatedAt := roleMixinFields0[1].Descriptor()
	// role.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	role.DefaultUpdatedAt = roleDescUpdatedAt.Default.(func() time.Time)
	// role.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	role.UpdateDefaultUpdatedAt = roleDescUpdatedAt.UpdateDefault.(func() time.Time)
	// roleDescName is the schema descriptor for name field.
	roleDescName := roleFields[0].Descriptor()
	// role.NameValidator is a validator for the "name" field. It is called by the builders before save.
	role.NameValidator = func() func(string) error {
		validators := roleDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userMixin := schema.User{}.Mixin()
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescNickName is the schema descriptor for nick_name field.
	userDescNickName := userFields[2].Descriptor()
	// user.NickNameValidator is a validator for the "nick_name" field. It is called by the builders before save.
	user.NickNameValidator = func() func(string) error {
		validators := userDescNickName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(nick_name string) error {
			for _, fn := range fns {
				if err := fn(nick_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	workbookMixin := schema.Workbook{}.Mixin()
	workbookMixinFields0 := workbookMixin[0].Fields()
	_ = workbookMixinFields0
	workbookFields := schema.Workbook{}.Fields()
	_ = workbookFields
	// workbookDescCreatedAt is the schema descriptor for created_at field.
	workbookDescCreatedAt := workbookMixinFields0[0].Descriptor()
	// workbook.DefaultCreatedAt holds the default value on creation for the created_at field.
	workbook.DefaultCreatedAt = workbookDescCreatedAt.Default.(func() time.Time)
	// workbookDescUpdatedAt is the schema descriptor for updated_at field.
	workbookDescUpdatedAt := workbookMixinFields0[1].Descriptor()
	// workbook.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workbook.DefaultUpdatedAt = workbookDescUpdatedAt.Default.(func() time.Time)
	// workbook.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workbook.UpdateDefaultUpdatedAt = workbookDescUpdatedAt.UpdateDefault.(func() time.Time)
	// workbookDescDescription is the schema descriptor for description field.
	workbookDescDescription := workbookFields[1].Descriptor()
	// workbook.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	workbook.DescriptionValidator = workbookDescDescription.Validators[0].(func(string) error)
	// workbookDescTitle is the schema descriptor for title field.
	workbookDescTitle := workbookFields[2].Descriptor()
	// workbook.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	workbook.TitleValidator = func() func(string) error {
		validators := workbookDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	workbookcategoryMixin := schema.WorkbookCategory{}.Mixin()
	workbookcategoryMixinFields0 := workbookcategoryMixin[0].Fields()
	_ = workbookcategoryMixinFields0
	workbookcategoryFields := schema.WorkbookCategory{}.Fields()
	_ = workbookcategoryFields
	// workbookcategoryDescCreatedAt is the schema descriptor for created_at field.
	workbookcategoryDescCreatedAt := workbookcategoryMixinFields0[0].Descriptor()
	// workbookcategory.DefaultCreatedAt holds the default value on creation for the created_at field.
	workbookcategory.DefaultCreatedAt = workbookcategoryDescCreatedAt.Default.(func() time.Time)
	// workbookcategoryDescUpdatedAt is the schema descriptor for updated_at field.
	workbookcategoryDescUpdatedAt := workbookcategoryMixinFields0[1].Descriptor()
	// workbookcategory.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workbookcategory.DefaultUpdatedAt = workbookcategoryDescUpdatedAt.Default.(func() time.Time)
	// workbookcategory.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workbookcategory.UpdateDefaultUpdatedAt = workbookcategoryDescUpdatedAt.UpdateDefault.(func() time.Time)
	// workbookcategoryDescName is the schema descriptor for name field.
	workbookcategoryDescName := workbookcategoryFields[0].Descriptor()
	// workbookcategory.NameValidator is a validator for the "name" field. It is called by the builders before save.
	workbookcategory.NameValidator = func() func(string) error {
		validators := workbookcategoryDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	workbookmemberMixin := schema.WorkbookMember{}.Mixin()
	workbookmemberMixinFields0 := workbookmemberMixin[0].Fields()
	_ = workbookmemberMixinFields0
	workbookmemberFields := schema.WorkbookMember{}.Fields()
	_ = workbookmemberFields
	// workbookmemberDescCreatedAt is the schema descriptor for created_at field.
	workbookmemberDescCreatedAt := workbookmemberMixinFields0[0].Descriptor()
	// workbookmember.DefaultCreatedAt holds the default value on creation for the created_at field.
	workbookmember.DefaultCreatedAt = workbookmemberDescCreatedAt.Default.(func() time.Time)
	// workbookmemberDescUpdatedAt is the schema descriptor for updated_at field.
	workbookmemberDescUpdatedAt := workbookmemberMixinFields0[1].Descriptor()
	// workbookmember.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	workbookmember.DefaultUpdatedAt = workbookmemberDescUpdatedAt.Default.(func() time.Time)
	// workbookmember.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	workbookmember.UpdateDefaultUpdatedAt = workbookmemberDescUpdatedAt.UpdateDefault.(func() time.Time)
}
