// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TrueOrFalseProblemUpdate is the builder for updating TrueOrFalseProblem entities.
type TrueOrFalseProblemUpdate struct {
	config
	hooks    []Hook
	mutation *TrueOrFalseProblemMutation
}

// Where appends a list predicates to the TrueOrFalseProblemUpdate builder.
func (tofpu *TrueOrFalseProblemUpdate) Where(ps ...predicate.TrueOrFalseProblem) *TrueOrFalseProblemUpdate {
	tofpu.mutation.Where(ps...)
	return tofpu
}

// SetCreatedAt sets the "created_at" field.
func (tofpu *TrueOrFalseProblemUpdate) SetCreatedAt(t time.Time) *TrueOrFalseProblemUpdate {
	tofpu.mutation.SetCreatedAt(t)
	return tofpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tofpu *TrueOrFalseProblemUpdate) SetNillableCreatedAt(t *time.Time) *TrueOrFalseProblemUpdate {
	if t != nil {
		tofpu.SetCreatedAt(*t)
	}
	return tofpu
}

// SetUpdatedAt sets the "updated_at" field.
func (tofpu *TrueOrFalseProblemUpdate) SetUpdatedAt(t time.Time) *TrueOrFalseProblemUpdate {
	tofpu.mutation.SetUpdatedAt(t)
	return tofpu
}

// SetIsCorrect sets the "is_correct" field.
func (tofpu *TrueOrFalseProblemUpdate) SetIsCorrect(b bool) *TrueOrFalseProblemUpdate {
	tofpu.mutation.SetIsCorrect(b)
	return tofpu
}

// SetNillableIsCorrect sets the "is_correct" field if the given value is not nil.
func (tofpu *TrueOrFalseProblemUpdate) SetNillableIsCorrect(b *bool) *TrueOrFalseProblemUpdate {
	if b != nil {
		tofpu.SetIsCorrect(*b)
	}
	return tofpu
}

// SetStatement sets the "statement" field.
func (tofpu *TrueOrFalseProblemUpdate) SetStatement(s string) *TrueOrFalseProblemUpdate {
	tofpu.mutation.SetStatement(s)
	return tofpu
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (tofpu *TrueOrFalseProblemUpdate) SetNillableStatement(s *string) *TrueOrFalseProblemUpdate {
	if s != nil {
		tofpu.SetStatement(*s)
	}
	return tofpu
}

// SetWorkbookID sets the "workbook_id" field.
func (tofpu *TrueOrFalseProblemUpdate) SetWorkbookID(u uuid.UUID) *TrueOrFalseProblemUpdate {
	tofpu.mutation.SetWorkbookID(u)
	return tofpu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (tofpu *TrueOrFalseProblemUpdate) SetNillableWorkbookID(u *uuid.UUID) *TrueOrFalseProblemUpdate {
	if u != nil {
		tofpu.SetWorkbookID(*u)
	}
	return tofpu
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (tofpu *TrueOrFalseProblemUpdate) SetWorkbookCategoryID(u uuid.UUID) *TrueOrFalseProblemUpdate {
	tofpu.mutation.SetWorkbookCategoryID(u)
	return tofpu
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (tofpu *TrueOrFalseProblemUpdate) SetNillableWorkbookCategoryID(u *uuid.UUID) *TrueOrFalseProblemUpdate {
	if u != nil {
		tofpu.SetWorkbookCategoryID(*u)
	}
	return tofpu
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (tofpu *TrueOrFalseProblemUpdate) ClearWorkbookCategoryID() *TrueOrFalseProblemUpdate {
	tofpu.mutation.ClearWorkbookCategoryID()
	return tofpu
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (tofpu *TrueOrFalseProblemUpdate) SetWorkbook(w *Workbook) *TrueOrFalseProblemUpdate {
	return tofpu.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (tofpu *TrueOrFalseProblemUpdate) SetWorkbookCategory(w *WorkbookCategory) *TrueOrFalseProblemUpdate {
	return tofpu.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the TrueOrFalseProblemMutation object of the builder.
func (tofpu *TrueOrFalseProblemUpdate) Mutation() *TrueOrFalseProblemMutation {
	return tofpu.mutation
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (tofpu *TrueOrFalseProblemUpdate) ClearWorkbook() *TrueOrFalseProblemUpdate {
	tofpu.mutation.ClearWorkbook()
	return tofpu
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (tofpu *TrueOrFalseProblemUpdate) ClearWorkbookCategory() *TrueOrFalseProblemUpdate {
	tofpu.mutation.ClearWorkbookCategory()
	return tofpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tofpu *TrueOrFalseProblemUpdate) Save(ctx context.Context) (int, error) {
	tofpu.defaults()
	return withHooks(ctx, tofpu.sqlSave, tofpu.mutation, tofpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tofpu *TrueOrFalseProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := tofpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tofpu *TrueOrFalseProblemUpdate) Exec(ctx context.Context) error {
	_, err := tofpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tofpu *TrueOrFalseProblemUpdate) ExecX(ctx context.Context) {
	if err := tofpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tofpu *TrueOrFalseProblemUpdate) defaults() {
	if _, ok := tofpu.mutation.UpdatedAt(); !ok {
		v := trueorfalseproblem.UpdateDefaultUpdatedAt()
		tofpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tofpu *TrueOrFalseProblemUpdate) check() error {
	if v, ok := tofpu.mutation.Statement(); ok {
		if err := trueorfalseproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "TrueOrFalseProblem.statement": %w`, err)}
		}
	}
	if tofpu.mutation.WorkbookCleared() && len(tofpu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrueOrFalseProblem.workbook"`)
	}
	return nil
}

func (tofpu *TrueOrFalseProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tofpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trueorfalseproblem.Table, trueorfalseproblem.Columns, sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID))
	if ps := tofpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tofpu.mutation.CreatedAt(); ok {
		_spec.SetField(trueorfalseproblem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tofpu.mutation.UpdatedAt(); ok {
		_spec.SetField(trueorfalseproblem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tofpu.mutation.IsCorrect(); ok {
		_spec.SetField(trueorfalseproblem.FieldIsCorrect, field.TypeBool, value)
	}
	if value, ok := tofpu.mutation.Statement(); ok {
		_spec.SetField(trueorfalseproblem.FieldStatement, field.TypeString, value)
	}
	if tofpu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookTable,
			Columns: []string{trueorfalseproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tofpu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookTable,
			Columns: []string{trueorfalseproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tofpu.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookCategoryTable,
			Columns: []string{trueorfalseproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tofpu.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookCategoryTable,
			Columns: []string{trueorfalseproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tofpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trueorfalseproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tofpu.mutation.done = true
	return n, nil
}

// TrueOrFalseProblemUpdateOne is the builder for updating a single TrueOrFalseProblem entity.
type TrueOrFalseProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TrueOrFalseProblemMutation
}

// SetCreatedAt sets the "created_at" field.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetCreatedAt(t time.Time) *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.SetCreatedAt(t)
	return tofpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetNillableCreatedAt(t *time.Time) *TrueOrFalseProblemUpdateOne {
	if t != nil {
		tofpuo.SetCreatedAt(*t)
	}
	return tofpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetUpdatedAt(t time.Time) *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.SetUpdatedAt(t)
	return tofpuo
}

// SetIsCorrect sets the "is_correct" field.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetIsCorrect(b bool) *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.SetIsCorrect(b)
	return tofpuo
}

// SetNillableIsCorrect sets the "is_correct" field if the given value is not nil.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetNillableIsCorrect(b *bool) *TrueOrFalseProblemUpdateOne {
	if b != nil {
		tofpuo.SetIsCorrect(*b)
	}
	return tofpuo
}

// SetStatement sets the "statement" field.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetStatement(s string) *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.SetStatement(s)
	return tofpuo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetNillableStatement(s *string) *TrueOrFalseProblemUpdateOne {
	if s != nil {
		tofpuo.SetStatement(*s)
	}
	return tofpuo
}

// SetWorkbookID sets the "workbook_id" field.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetWorkbookID(u uuid.UUID) *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.SetWorkbookID(u)
	return tofpuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *TrueOrFalseProblemUpdateOne {
	if u != nil {
		tofpuo.SetWorkbookID(*u)
	}
	return tofpuo
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetWorkbookCategoryID(u uuid.UUID) *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.SetWorkbookCategoryID(u)
	return tofpuo
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetNillableWorkbookCategoryID(u *uuid.UUID) *TrueOrFalseProblemUpdateOne {
	if u != nil {
		tofpuo.SetWorkbookCategoryID(*u)
	}
	return tofpuo
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (tofpuo *TrueOrFalseProblemUpdateOne) ClearWorkbookCategoryID() *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.ClearWorkbookCategoryID()
	return tofpuo
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetWorkbook(w *Workbook) *TrueOrFalseProblemUpdateOne {
	return tofpuo.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (tofpuo *TrueOrFalseProblemUpdateOne) SetWorkbookCategory(w *WorkbookCategory) *TrueOrFalseProblemUpdateOne {
	return tofpuo.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the TrueOrFalseProblemMutation object of the builder.
func (tofpuo *TrueOrFalseProblemUpdateOne) Mutation() *TrueOrFalseProblemMutation {
	return tofpuo.mutation
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (tofpuo *TrueOrFalseProblemUpdateOne) ClearWorkbook() *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.ClearWorkbook()
	return tofpuo
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (tofpuo *TrueOrFalseProblemUpdateOne) ClearWorkbookCategory() *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.ClearWorkbookCategory()
	return tofpuo
}

// Where appends a list predicates to the TrueOrFalseProblemUpdate builder.
func (tofpuo *TrueOrFalseProblemUpdateOne) Where(ps ...predicate.TrueOrFalseProblem) *TrueOrFalseProblemUpdateOne {
	tofpuo.mutation.Where(ps...)
	return tofpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tofpuo *TrueOrFalseProblemUpdateOne) Select(field string, fields ...string) *TrueOrFalseProblemUpdateOne {
	tofpuo.fields = append([]string{field}, fields...)
	return tofpuo
}

// Save executes the query and returns the updated TrueOrFalseProblem entity.
func (tofpuo *TrueOrFalseProblemUpdateOne) Save(ctx context.Context) (*TrueOrFalseProblem, error) {
	tofpuo.defaults()
	return withHooks(ctx, tofpuo.sqlSave, tofpuo.mutation, tofpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tofpuo *TrueOrFalseProblemUpdateOne) SaveX(ctx context.Context) *TrueOrFalseProblem {
	node, err := tofpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tofpuo *TrueOrFalseProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := tofpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tofpuo *TrueOrFalseProblemUpdateOne) ExecX(ctx context.Context) {
	if err := tofpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tofpuo *TrueOrFalseProblemUpdateOne) defaults() {
	if _, ok := tofpuo.mutation.UpdatedAt(); !ok {
		v := trueorfalseproblem.UpdateDefaultUpdatedAt()
		tofpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tofpuo *TrueOrFalseProblemUpdateOne) check() error {
	if v, ok := tofpuo.mutation.Statement(); ok {
		if err := trueorfalseproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "TrueOrFalseProblem.statement": %w`, err)}
		}
	}
	if tofpuo.mutation.WorkbookCleared() && len(tofpuo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TrueOrFalseProblem.workbook"`)
	}
	return nil
}

func (tofpuo *TrueOrFalseProblemUpdateOne) sqlSave(ctx context.Context) (_node *TrueOrFalseProblem, err error) {
	if err := tofpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trueorfalseproblem.Table, trueorfalseproblem.Columns, sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID))
	id, ok := tofpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TrueOrFalseProblem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tofpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trueorfalseproblem.FieldID)
		for _, f := range fields {
			if !trueorfalseproblem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != trueorfalseproblem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tofpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tofpuo.mutation.CreatedAt(); ok {
		_spec.SetField(trueorfalseproblem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tofpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trueorfalseproblem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tofpuo.mutation.IsCorrect(); ok {
		_spec.SetField(trueorfalseproblem.FieldIsCorrect, field.TypeBool, value)
	}
	if value, ok := tofpuo.mutation.Statement(); ok {
		_spec.SetField(trueorfalseproblem.FieldStatement, field.TypeString, value)
	}
	if tofpuo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookTable,
			Columns: []string{trueorfalseproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tofpuo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookTable,
			Columns: []string{trueorfalseproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tofpuo.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookCategoryTable,
			Columns: []string{trueorfalseproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tofpuo.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookCategoryTable,
			Columns: []string{trueorfalseproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TrueOrFalseProblem{config: tofpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tofpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trueorfalseproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tofpuo.mutation.done = true
	return _node, nil
}
