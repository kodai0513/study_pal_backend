// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/answertype"
	"study-pal-backend/ent/problem"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Problem is the model entity for the Problem schema.
type Problem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AnswerTypeID holds the value of the "answer_type_id" field.
	AnswerTypeID int `json:"answer_type_id,omitempty"`
	// Statement holds the value of the "statement" field.
	Statement string `json:"statement,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProblemQuery when eager-loading is set.
	Edges                      ProblemEdges `json:"edges"`
	workbook_category_problems *int
	selectValues               sql.SelectValues
}

// ProblemEdges holds the relations/edges for other nodes in the graph.
type ProblemEdges struct {
	// AnswerType holds the value of the answer_type edge.
	AnswerType *AnswerType `json:"answer_type,omitempty"`
	// AnswerDescriptions holds the value of the answer_descriptions edge.
	AnswerDescriptions []*AnswerDescription `json:"answer_descriptions,omitempty"`
	// AnswerMultiChoices holds the value of the answer_multi_choices edge.
	AnswerMultiChoices []*AnswerMultiChoices `json:"answer_multi_choices,omitempty"`
	// AnswerTruths holds the value of the answer_truths edge.
	AnswerTruths []*AnswerTruth `json:"answer_truths,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AnswerTypeOrErr returns the AnswerType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProblemEdges) AnswerTypeOrErr() (*AnswerType, error) {
	if e.AnswerType != nil {
		return e.AnswerType, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: answertype.Label}
	}
	return nil, &NotLoadedError{edge: "answer_type"}
}

// AnswerDescriptionsOrErr returns the AnswerDescriptions value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemEdges) AnswerDescriptionsOrErr() ([]*AnswerDescription, error) {
	if e.loadedTypes[1] {
		return e.AnswerDescriptions, nil
	}
	return nil, &NotLoadedError{edge: "answer_descriptions"}
}

// AnswerMultiChoicesOrErr returns the AnswerMultiChoices value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemEdges) AnswerMultiChoicesOrErr() ([]*AnswerMultiChoices, error) {
	if e.loadedTypes[2] {
		return e.AnswerMultiChoices, nil
	}
	return nil, &NotLoadedError{edge: "answer_multi_choices"}
}

// AnswerTruthsOrErr returns the AnswerTruths value or an error if the edge
// was not loaded in eager-loading.
func (e ProblemEdges) AnswerTruthsOrErr() ([]*AnswerTruth, error) {
	if e.loadedTypes[3] {
		return e.AnswerTruths, nil
	}
	return nil, &NotLoadedError{edge: "answer_truths"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Problem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case problem.FieldID, problem.FieldAnswerTypeID:
			values[i] = new(sql.NullInt64)
		case problem.FieldStatement:
			values[i] = new(sql.NullString)
		case problem.ForeignKeys[0]: // workbook_category_problems
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Problem fields.
func (pr *Problem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case problem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case problem.FieldAnswerTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field answer_type_id", values[i])
			} else if value.Valid {
				pr.AnswerTypeID = int(value.Int64)
			}
		case problem.FieldStatement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statement", values[i])
			} else if value.Valid {
				pr.Statement = value.String
			}
		case problem.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workbook_category_problems", value)
			} else if value.Valid {
				pr.workbook_category_problems = new(int)
				*pr.workbook_category_problems = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Problem.
// This includes values selected through modifiers, order, etc.
func (pr *Problem) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryAnswerType queries the "answer_type" edge of the Problem entity.
func (pr *Problem) QueryAnswerType() *AnswerTypeQuery {
	return NewProblemClient(pr.config).QueryAnswerType(pr)
}

// QueryAnswerDescriptions queries the "answer_descriptions" edge of the Problem entity.
func (pr *Problem) QueryAnswerDescriptions() *AnswerDescriptionQuery {
	return NewProblemClient(pr.config).QueryAnswerDescriptions(pr)
}

// QueryAnswerMultiChoices queries the "answer_multi_choices" edge of the Problem entity.
func (pr *Problem) QueryAnswerMultiChoices() *AnswerMultiChoicesQuery {
	return NewProblemClient(pr.config).QueryAnswerMultiChoices(pr)
}

// QueryAnswerTruths queries the "answer_truths" edge of the Problem entity.
func (pr *Problem) QueryAnswerTruths() *AnswerTruthQuery {
	return NewProblemClient(pr.config).QueryAnswerTruths(pr)
}

// Update returns a builder for updating this Problem.
// Note that you need to call Problem.Unwrap() before calling this method if this Problem
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Problem) Update() *ProblemUpdateOne {
	return NewProblemClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Problem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Problem) Unwrap() *Problem {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Problem is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Problem) String() string {
	var builder strings.Builder
	builder.WriteString("Problem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("answer_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pr.AnswerTypeID))
	builder.WriteString(", ")
	builder.WriteString("statement=")
	builder.WriteString(pr.Statement)
	builder.WriteByte(')')
	return builder.String()
}

// Problems is a parsable slice of Problem.
type Problems []*Problem
