// Code generated by ent, DO NOT EDIT.

package selectionproblemanswer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the selectionproblemanswer type in the database.
	Label = "selection_problem_answer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldIsCorrect holds the string denoting the is_correct field in the database.
	FieldIsCorrect = "is_correct"
	// FieldSelectionProblemID holds the string denoting the selection_problem_id field in the database.
	FieldSelectionProblemID = "selection_problem_id"
	// FieldStatement holds the string denoting the statement field in the database.
	FieldStatement = "statement"
	// EdgeSelectionProblem holds the string denoting the selection_problem edge name in mutations.
	EdgeSelectionProblem = "selection_problem"
	// Table holds the table name of the selectionproblemanswer in the database.
	Table = "selection_problem_answers"
	// SelectionProblemTable is the table that holds the selection_problem relation/edge.
	SelectionProblemTable = "selection_problem_answers"
	// SelectionProblemInverseTable is the table name for the SelectionProblem entity.
	// It exists in this package in order to avoid circular dependency with the "selectionproblem" package.
	SelectionProblemInverseTable = "selection_problems"
	// SelectionProblemColumn is the table column denoting the selection_problem relation/edge.
	SelectionProblemColumn = "selection_problem_id"
)

// Columns holds all SQL columns for selectionproblemanswer fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldIsCorrect,
	FieldSelectionProblemID,
	FieldStatement,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	StatementValidator func(string) error
)

// OrderOption defines the ordering options for the SelectionProblemAnswer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByIsCorrect orders the results by the is_correct field.
func ByIsCorrect(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCorrect, opts...).ToFunc()
}

// BySelectionProblemID orders the results by the selection_problem_id field.
func BySelectionProblemID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectionProblemID, opts...).ToFunc()
}

// ByStatement orders the results by the statement field.
func ByStatement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatement, opts...).ToFunc()
}

// BySelectionProblemField orders the results by selection_problem field.
func BySelectionProblemField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectionProblemStep(), sql.OrderByField(field, opts...))
	}
}
func newSelectionProblemStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectionProblemInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SelectionProblemTable, SelectionProblemColumn),
	)
}
