// Code generated by ent, DO NOT EDIT.

package selectionproblem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the selectionproblem type in the database.
	Label = "selection_problem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldStatement holds the string denoting the statement field in the database.
	FieldStatement = "statement"
	// FieldWorkbookID holds the string denoting the workbook_id field in the database.
	FieldWorkbookID = "workbook_id"
	// FieldWorkbookCategoryID holds the string denoting the workbook_category_id field in the database.
	FieldWorkbookCategoryID = "workbook_category_id"
	// FieldWorkbookCategoryDetailID holds the string denoting the workbook_category_detail_id field in the database.
	FieldWorkbookCategoryDetailID = "workbook_category_detail_id"
	// EdgeSelectionProblemAnswers holds the string denoting the selection_problem_answers edge name in mutations.
	EdgeSelectionProblemAnswers = "selection_problem_answers"
	// EdgeWorkbook holds the string denoting the workbook edge name in mutations.
	EdgeWorkbook = "workbook"
	// EdgeWorkbookCategory holds the string denoting the workbook_category edge name in mutations.
	EdgeWorkbookCategory = "workbook_category"
	// EdgeWorkbookCategoryDetail holds the string denoting the workbook_category_detail edge name in mutations.
	EdgeWorkbookCategoryDetail = "workbook_category_detail"
	// Table holds the table name of the selectionproblem in the database.
	Table = "selection_problems"
	// SelectionProblemAnswersTable is the table that holds the selection_problem_answers relation/edge.
	SelectionProblemAnswersTable = "selection_problem_answers"
	// SelectionProblemAnswersInverseTable is the table name for the SelectionProblemAnswer entity.
	// It exists in this package in order to avoid circular dependency with the "selectionproblemanswer" package.
	SelectionProblemAnswersInverseTable = "selection_problem_answers"
	// SelectionProblemAnswersColumn is the table column denoting the selection_problem_answers relation/edge.
	SelectionProblemAnswersColumn = "selection_problem_id"
	// WorkbookTable is the table that holds the workbook relation/edge.
	WorkbookTable = "selection_problems"
	// WorkbookInverseTable is the table name for the Workbook entity.
	// It exists in this package in order to avoid circular dependency with the "workbook" package.
	WorkbookInverseTable = "workbooks"
	// WorkbookColumn is the table column denoting the workbook relation/edge.
	WorkbookColumn = "workbook_id"
	// WorkbookCategoryTable is the table that holds the workbook_category relation/edge.
	WorkbookCategoryTable = "selection_problems"
	// WorkbookCategoryInverseTable is the table name for the WorkbookCategory entity.
	// It exists in this package in order to avoid circular dependency with the "workbookcategory" package.
	WorkbookCategoryInverseTable = "workbook_categories"
	// WorkbookCategoryColumn is the table column denoting the workbook_category relation/edge.
	WorkbookCategoryColumn = "workbook_category_id"
	// WorkbookCategoryDetailTable is the table that holds the workbook_category_detail relation/edge.
	WorkbookCategoryDetailTable = "selection_problems"
	// WorkbookCategoryDetailInverseTable is the table name for the WorkbookCategoryDetail entity.
	// It exists in this package in order to avoid circular dependency with the "workbookcategorydetail" package.
	WorkbookCategoryDetailInverseTable = "workbook_category_details"
	// WorkbookCategoryDetailColumn is the table column denoting the workbook_category_detail relation/edge.
	WorkbookCategoryDetailColumn = "workbook_category_detail_id"
)

// Columns holds all SQL columns for selectionproblem fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldStatement,
	FieldWorkbookID,
	FieldWorkbookCategoryID,
	FieldWorkbookCategoryDetailID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	StatementValidator func(string) error
)

// OrderOption defines the ordering options for the SelectionProblem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStatement orders the results by the statement field.
func ByStatement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatement, opts...).ToFunc()
}

// ByWorkbookID orders the results by the workbook_id field.
func ByWorkbookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookID, opts...).ToFunc()
}

// ByWorkbookCategoryID orders the results by the workbook_category_id field.
func ByWorkbookCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookCategoryID, opts...).ToFunc()
}

// ByWorkbookCategoryDetailID orders the results by the workbook_category_detail_id field.
func ByWorkbookCategoryDetailID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookCategoryDetailID, opts...).ToFunc()
}

// BySelectionProblemAnswersCount orders the results by selection_problem_answers count.
func BySelectionProblemAnswersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSelectionProblemAnswersStep(), opts...)
	}
}

// BySelectionProblemAnswers orders the results by selection_problem_answers terms.
func BySelectionProblemAnswers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectionProblemAnswersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkbookField orders the results by workbook field.
func ByWorkbookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkbookCategoryField orders the results by workbook_category field.
func ByWorkbookCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookCategoryStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkbookCategoryDetailField orders the results by workbook_category_detail field.
func ByWorkbookCategoryDetailField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookCategoryDetailStep(), sql.OrderByField(field, opts...))
	}
}
func newSelectionProblemAnswersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectionProblemAnswersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SelectionProblemAnswersTable, SelectionProblemAnswersColumn),
	)
}
func newWorkbookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkbookTable, WorkbookColumn),
	)
}
func newWorkbookCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkbookCategoryTable, WorkbookCategoryColumn),
	)
}
func newWorkbookCategoryDetailStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookCategoryDetailInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkbookCategoryDetailTable, WorkbookCategoryDetailColumn),
	)
}
