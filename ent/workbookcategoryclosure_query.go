// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategoryclosure"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryClosureQuery is the builder for querying WorkbookCategoryClosure entities.
type WorkbookCategoryClosureQuery struct {
	config
	ctx                *QueryContext
	order              []workbookcategoryclosure.OrderOption
	inters             []Interceptor
	predicates         []predicate.WorkbookCategoryClosure
	withChildCategory  *WorkbookCategoryQuery
	withParentCategory *WorkbookCategoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkbookCategoryClosureQuery builder.
func (wccq *WorkbookCategoryClosureQuery) Where(ps ...predicate.WorkbookCategoryClosure) *WorkbookCategoryClosureQuery {
	wccq.predicates = append(wccq.predicates, ps...)
	return wccq
}

// Limit the number of records to be returned by this query.
func (wccq *WorkbookCategoryClosureQuery) Limit(limit int) *WorkbookCategoryClosureQuery {
	wccq.ctx.Limit = &limit
	return wccq
}

// Offset to start from.
func (wccq *WorkbookCategoryClosureQuery) Offset(offset int) *WorkbookCategoryClosureQuery {
	wccq.ctx.Offset = &offset
	return wccq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wccq *WorkbookCategoryClosureQuery) Unique(unique bool) *WorkbookCategoryClosureQuery {
	wccq.ctx.Unique = &unique
	return wccq
}

// Order specifies how the records should be ordered.
func (wccq *WorkbookCategoryClosureQuery) Order(o ...workbookcategoryclosure.OrderOption) *WorkbookCategoryClosureQuery {
	wccq.order = append(wccq.order, o...)
	return wccq
}

// QueryChildCategory chains the current query on the "child_category" edge.
func (wccq *WorkbookCategoryClosureQuery) QueryChildCategory() *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: wccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategoryclosure.Table, workbookcategoryclosure.FieldID, selector),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workbookcategoryclosure.ChildCategoryTable, workbookcategoryclosure.ChildCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(wccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentCategory chains the current query on the "parent_category" edge.
func (wccq *WorkbookCategoryClosureQuery) QueryParentCategory() *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: wccq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wccq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wccq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookcategoryclosure.Table, workbookcategoryclosure.FieldID, selector),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workbookcategoryclosure.ParentCategoryTable, workbookcategoryclosure.ParentCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(wccq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkbookCategoryClosure entity from the query.
// Returns a *NotFoundError when no WorkbookCategoryClosure was found.
func (wccq *WorkbookCategoryClosureQuery) First(ctx context.Context) (*WorkbookCategoryClosure, error) {
	nodes, err := wccq.Limit(1).All(setContextOp(ctx, wccq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workbookcategoryclosure.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) FirstX(ctx context.Context) *WorkbookCategoryClosure {
	node, err := wccq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkbookCategoryClosure ID from the query.
// Returns a *NotFoundError when no WorkbookCategoryClosure ID was found.
func (wccq *WorkbookCategoryClosureQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wccq.Limit(1).IDs(setContextOp(ctx, wccq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workbookcategoryclosure.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := wccq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkbookCategoryClosure entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkbookCategoryClosure entity is found.
// Returns a *NotFoundError when no WorkbookCategoryClosure entities are found.
func (wccq *WorkbookCategoryClosureQuery) Only(ctx context.Context) (*WorkbookCategoryClosure, error) {
	nodes, err := wccq.Limit(2).All(setContextOp(ctx, wccq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workbookcategoryclosure.Label}
	default:
		return nil, &NotSingularError{workbookcategoryclosure.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) OnlyX(ctx context.Context) *WorkbookCategoryClosure {
	node, err := wccq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkbookCategoryClosure ID in the query.
// Returns a *NotSingularError when more than one WorkbookCategoryClosure ID is found.
// Returns a *NotFoundError when no entities are found.
func (wccq *WorkbookCategoryClosureQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = wccq.Limit(2).IDs(setContextOp(ctx, wccq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workbookcategoryclosure.Label}
	default:
		err = &NotSingularError{workbookcategoryclosure.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := wccq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkbookCategoryClosures.
func (wccq *WorkbookCategoryClosureQuery) All(ctx context.Context) ([]*WorkbookCategoryClosure, error) {
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryAll)
	if err := wccq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkbookCategoryClosure, *WorkbookCategoryClosureQuery]()
	return withInterceptors[[]*WorkbookCategoryClosure](ctx, wccq, qr, wccq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) AllX(ctx context.Context) []*WorkbookCategoryClosure {
	nodes, err := wccq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkbookCategoryClosure IDs.
func (wccq *WorkbookCategoryClosureQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if wccq.ctx.Unique == nil && wccq.path != nil {
		wccq.Unique(true)
	}
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryIDs)
	if err = wccq.Select(workbookcategoryclosure.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := wccq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wccq *WorkbookCategoryClosureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryCount)
	if err := wccq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wccq, querierCount[*WorkbookCategoryClosureQuery](), wccq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) CountX(ctx context.Context) int {
	count, err := wccq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wccq *WorkbookCategoryClosureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wccq.ctx, ent.OpQueryExist)
	switch _, err := wccq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wccq *WorkbookCategoryClosureQuery) ExistX(ctx context.Context) bool {
	exist, err := wccq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkbookCategoryClosureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wccq *WorkbookCategoryClosureQuery) Clone() *WorkbookCategoryClosureQuery {
	if wccq == nil {
		return nil
	}
	return &WorkbookCategoryClosureQuery{
		config:             wccq.config,
		ctx:                wccq.ctx.Clone(),
		order:              append([]workbookcategoryclosure.OrderOption{}, wccq.order...),
		inters:             append([]Interceptor{}, wccq.inters...),
		predicates:         append([]predicate.WorkbookCategoryClosure{}, wccq.predicates...),
		withChildCategory:  wccq.withChildCategory.Clone(),
		withParentCategory: wccq.withParentCategory.Clone(),
		// clone intermediate query.
		sql:  wccq.sql.Clone(),
		path: wccq.path,
	}
}

// WithChildCategory tells the query-builder to eager-load the nodes that are connected to
// the "child_category" edge. The optional arguments are used to configure the query builder of the edge.
func (wccq *WorkbookCategoryClosureQuery) WithChildCategory(opts ...func(*WorkbookCategoryQuery)) *WorkbookCategoryClosureQuery {
	query := (&WorkbookCategoryClient{config: wccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wccq.withChildCategory = query
	return wccq
}

// WithParentCategory tells the query-builder to eager-load the nodes that are connected to
// the "parent_category" edge. The optional arguments are used to configure the query builder of the edge.
func (wccq *WorkbookCategoryClosureQuery) WithParentCategory(opts ...func(*WorkbookCategoryQuery)) *WorkbookCategoryClosureQuery {
	query := (&WorkbookCategoryClient{config: wccq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wccq.withParentCategory = query
	return wccq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkbookCategoryClosure.Query().
//		GroupBy(workbookcategoryclosure.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wccq *WorkbookCategoryClosureQuery) GroupBy(field string, fields ...string) *WorkbookCategoryClosureGroupBy {
	wccq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkbookCategoryClosureGroupBy{build: wccq}
	grbuild.flds = &wccq.ctx.Fields
	grbuild.label = workbookcategoryclosure.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.WorkbookCategoryClosure.Query().
//		Select(workbookcategoryclosure.FieldCreatedAt).
//		Scan(ctx, &v)
func (wccq *WorkbookCategoryClosureQuery) Select(fields ...string) *WorkbookCategoryClosureSelect {
	wccq.ctx.Fields = append(wccq.ctx.Fields, fields...)
	sbuild := &WorkbookCategoryClosureSelect{WorkbookCategoryClosureQuery: wccq}
	sbuild.label = workbookcategoryclosure.Label
	sbuild.flds, sbuild.scan = &wccq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkbookCategoryClosureSelect configured with the given aggregations.
func (wccq *WorkbookCategoryClosureQuery) Aggregate(fns ...AggregateFunc) *WorkbookCategoryClosureSelect {
	return wccq.Select().Aggregate(fns...)
}

func (wccq *WorkbookCategoryClosureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wccq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wccq); err != nil {
				return err
			}
		}
	}
	for _, f := range wccq.ctx.Fields {
		if !workbookcategoryclosure.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wccq.path != nil {
		prev, err := wccq.path(ctx)
		if err != nil {
			return err
		}
		wccq.sql = prev
	}
	return nil
}

func (wccq *WorkbookCategoryClosureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkbookCategoryClosure, error) {
	var (
		nodes       = []*WorkbookCategoryClosure{}
		_spec       = wccq.querySpec()
		loadedTypes = [2]bool{
			wccq.withChildCategory != nil,
			wccq.withParentCategory != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkbookCategoryClosure).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkbookCategoryClosure{config: wccq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wccq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wccq.withChildCategory; query != nil {
		if err := wccq.loadChildCategory(ctx, query, nodes, nil,
			func(n *WorkbookCategoryClosure, e *WorkbookCategory) { n.Edges.ChildCategory = e }); err != nil {
			return nil, err
		}
	}
	if query := wccq.withParentCategory; query != nil {
		if err := wccq.loadParentCategory(ctx, query, nodes, nil,
			func(n *WorkbookCategoryClosure, e *WorkbookCategory) { n.Edges.ParentCategory = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wccq *WorkbookCategoryClosureQuery) loadChildCategory(ctx context.Context, query *WorkbookCategoryQuery, nodes []*WorkbookCategoryClosure, init func(*WorkbookCategoryClosure), assign func(*WorkbookCategoryClosure, *WorkbookCategory)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkbookCategoryClosure)
	for i := range nodes {
		fk := nodes[i].ChildID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbookcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "child_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wccq *WorkbookCategoryClosureQuery) loadParentCategory(ctx context.Context, query *WorkbookCategoryQuery, nodes []*WorkbookCategoryClosure, init func(*WorkbookCategoryClosure), assign func(*WorkbookCategoryClosure, *WorkbookCategory)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*WorkbookCategoryClosure)
	for i := range nodes {
		fk := nodes[i].ParentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbookcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wccq *WorkbookCategoryClosureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wccq.querySpec()
	_spec.Node.Columns = wccq.ctx.Fields
	if len(wccq.ctx.Fields) > 0 {
		_spec.Unique = wccq.ctx.Unique != nil && *wccq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wccq.driver, _spec)
}

func (wccq *WorkbookCategoryClosureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workbookcategoryclosure.Table, workbookcategoryclosure.Columns, sqlgraph.NewFieldSpec(workbookcategoryclosure.FieldID, field.TypeUUID))
	_spec.From = wccq.sql
	if unique := wccq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wccq.path != nil {
		_spec.Unique = true
	}
	if fields := wccq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategoryclosure.FieldID)
		for i := range fields {
			if fields[i] != workbookcategoryclosure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wccq.withChildCategory != nil {
			_spec.Node.AddColumnOnce(workbookcategoryclosure.FieldChildID)
		}
		if wccq.withParentCategory != nil {
			_spec.Node.AddColumnOnce(workbookcategoryclosure.FieldParentID)
		}
	}
	if ps := wccq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wccq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wccq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wccq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wccq *WorkbookCategoryClosureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wccq.driver.Dialect())
	t1 := builder.Table(workbookcategoryclosure.Table)
	columns := wccq.ctx.Fields
	if len(columns) == 0 {
		columns = workbookcategoryclosure.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wccq.sql != nil {
		selector = wccq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wccq.ctx.Unique != nil && *wccq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wccq.predicates {
		p(selector)
	}
	for _, p := range wccq.order {
		p(selector)
	}
	if offset := wccq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wccq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkbookCategoryClosureGroupBy is the group-by builder for WorkbookCategoryClosure entities.
type WorkbookCategoryClosureGroupBy struct {
	selector
	build *WorkbookCategoryClosureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wccgb *WorkbookCategoryClosureGroupBy) Aggregate(fns ...AggregateFunc) *WorkbookCategoryClosureGroupBy {
	wccgb.fns = append(wccgb.fns, fns...)
	return wccgb
}

// Scan applies the selector query and scans the result into the given value.
func (wccgb *WorkbookCategoryClosureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wccgb.build.ctx, ent.OpQueryGroupBy)
	if err := wccgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkbookCategoryClosureQuery, *WorkbookCategoryClosureGroupBy](ctx, wccgb.build, wccgb, wccgb.build.inters, v)
}

func (wccgb *WorkbookCategoryClosureGroupBy) sqlScan(ctx context.Context, root *WorkbookCategoryClosureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wccgb.fns))
	for _, fn := range wccgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wccgb.flds)+len(wccgb.fns))
		for _, f := range *wccgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wccgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wccgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkbookCategoryClosureSelect is the builder for selecting fields of WorkbookCategoryClosure entities.
type WorkbookCategoryClosureSelect struct {
	*WorkbookCategoryClosureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wccs *WorkbookCategoryClosureSelect) Aggregate(fns ...AggregateFunc) *WorkbookCategoryClosureSelect {
	wccs.fns = append(wccs.fns, fns...)
	return wccs
}

// Scan applies the selector query and scans the result into the given value.
func (wccs *WorkbookCategoryClosureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wccs.ctx, ent.OpQuerySelect)
	if err := wccs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkbookCategoryClosureQuery, *WorkbookCategoryClosureSelect](ctx, wccs.WorkbookCategoryClosureQuery, wccs, wccs.inters, v)
}

func (wccs *WorkbookCategoryClosureSelect) sqlScan(ctx context.Context, root *WorkbookCategoryClosureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wccs.fns))
	for _, fn := range wccs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wccs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wccs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
