// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"study-pal-backend/ent/answerdescription"
	"study-pal-backend/ent/answermultichoices"
	"study-pal-backend/ent/answertruth"
	"study-pal-backend/ent/answertype"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategorydetail"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ProblemQuery is the builder for querying Problem entities.
type ProblemQuery struct {
	config
	ctx                        *QueryContext
	order                      []problem.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Problem
	withAnswerType             *AnswerTypeQuery
	withAnswerDescriptions     *AnswerDescriptionQuery
	withAnswerMultiChoices     *AnswerMultiChoicesQuery
	withAnswerTruths           *AnswerTruthQuery
	withWorkbook               *WorkbookQuery
	withWorkbookCategory       *WorkbookCategoryQuery
	withWorkbookCategoryDetail *WorkbookCategoryDetailQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProblemQuery builder.
func (pq *ProblemQuery) Where(ps ...predicate.Problem) *ProblemQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ProblemQuery) Limit(limit int) *ProblemQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ProblemQuery) Offset(offset int) *ProblemQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProblemQuery) Unique(unique bool) *ProblemQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ProblemQuery) Order(o ...problem.OrderOption) *ProblemQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryAnswerType chains the current query on the "answer_type" edge.
func (pq *ProblemQuery) QueryAnswerType() *AnswerTypeQuery {
	query := (&AnswerTypeClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(problem.Table, problem.FieldID, selector),
			sqlgraph.To(answertype.Table, answertype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, problem.AnswerTypeTable, problem.AnswerTypeColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnswerDescriptions chains the current query on the "answer_descriptions" edge.
func (pq *ProblemQuery) QueryAnswerDescriptions() *AnswerDescriptionQuery {
	query := (&AnswerDescriptionClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(problem.Table, problem.FieldID, selector),
			sqlgraph.To(answerdescription.Table, answerdescription.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, problem.AnswerDescriptionsTable, problem.AnswerDescriptionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnswerMultiChoices chains the current query on the "answer_multi_choices" edge.
func (pq *ProblemQuery) QueryAnswerMultiChoices() *AnswerMultiChoicesQuery {
	query := (&AnswerMultiChoicesClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(problem.Table, problem.FieldID, selector),
			sqlgraph.To(answermultichoices.Table, answermultichoices.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, problem.AnswerMultiChoicesTable, problem.AnswerMultiChoicesColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAnswerTruths chains the current query on the "answer_truths" edge.
func (pq *ProblemQuery) QueryAnswerTruths() *AnswerTruthQuery {
	query := (&AnswerTruthClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(problem.Table, problem.FieldID, selector),
			sqlgraph.To(answertruth.Table, answertruth.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, problem.AnswerTruthsTable, problem.AnswerTruthsColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkbook chains the current query on the "workbook" edge.
func (pq *ProblemQuery) QueryWorkbook() *WorkbookQuery {
	query := (&WorkbookClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(problem.Table, problem.FieldID, selector),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, problem.WorkbookTable, problem.WorkbookColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkbookCategory chains the current query on the "workbook_category" edge.
func (pq *ProblemQuery) QueryWorkbookCategory() *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(problem.Table, problem.FieldID, selector),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, problem.WorkbookCategoryTable, problem.WorkbookCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkbookCategoryDetail chains the current query on the "workbook_category_detail" edge.
func (pq *ProblemQuery) QueryWorkbookCategoryDetail() *WorkbookCategoryDetailQuery {
	query := (&WorkbookCategoryDetailClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(problem.Table, problem.FieldID, selector),
			sqlgraph.To(workbookcategorydetail.Table, workbookcategorydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, problem.WorkbookCategoryDetailTable, problem.WorkbookCategoryDetailColumn),
		)
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Problem entity from the query.
// Returns a *NotFoundError when no Problem was found.
func (pq *ProblemQuery) First(ctx context.Context) (*Problem, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{problem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProblemQuery) FirstX(ctx context.Context) *Problem {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Problem ID from the query.
// Returns a *NotFoundError when no Problem ID was found.
func (pq *ProblemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{problem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProblemQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Problem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Problem entity is found.
// Returns a *NotFoundError when no Problem entities are found.
func (pq *ProblemQuery) Only(ctx context.Context) (*Problem, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{problem.Label}
	default:
		return nil, &NotSingularError{problem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProblemQuery) OnlyX(ctx context.Context) *Problem {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Problem ID in the query.
// Returns a *NotSingularError when more than one Problem ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProblemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{problem.Label}
	default:
		err = &NotSingularError{problem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProblemQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Problems.
func (pq *ProblemQuery) All(ctx context.Context) ([]*Problem, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryAll)
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Problem, *ProblemQuery]()
	return withInterceptors[[]*Problem](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProblemQuery) AllX(ctx context.Context) []*Problem {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Problem IDs.
func (pq *ProblemQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryIDs)
	if err = pq.Select(problem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProblemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProblemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryCount)
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ProblemQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProblemQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProblemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryExist)
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProblemQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProblemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProblemQuery) Clone() *ProblemQuery {
	if pq == nil {
		return nil
	}
	return &ProblemQuery{
		config:                     pq.config,
		ctx:                        pq.ctx.Clone(),
		order:                      append([]problem.OrderOption{}, pq.order...),
		inters:                     append([]Interceptor{}, pq.inters...),
		predicates:                 append([]predicate.Problem{}, pq.predicates...),
		withAnswerType:             pq.withAnswerType.Clone(),
		withAnswerDescriptions:     pq.withAnswerDescriptions.Clone(),
		withAnswerMultiChoices:     pq.withAnswerMultiChoices.Clone(),
		withAnswerTruths:           pq.withAnswerTruths.Clone(),
		withWorkbook:               pq.withWorkbook.Clone(),
		withWorkbookCategory:       pq.withWorkbookCategory.Clone(),
		withWorkbookCategoryDetail: pq.withWorkbookCategoryDetail.Clone(),
		// clone intermediate query.
		sql:  pq.sql.Clone(),
		path: pq.path,
	}
}

// WithAnswerType tells the query-builder to eager-load the nodes that are connected to
// the "answer_type" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProblemQuery) WithAnswerType(opts ...func(*AnswerTypeQuery)) *ProblemQuery {
	query := (&AnswerTypeClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAnswerType = query
	return pq
}

// WithAnswerDescriptions tells the query-builder to eager-load the nodes that are connected to
// the "answer_descriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProblemQuery) WithAnswerDescriptions(opts ...func(*AnswerDescriptionQuery)) *ProblemQuery {
	query := (&AnswerDescriptionClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAnswerDescriptions = query
	return pq
}

// WithAnswerMultiChoices tells the query-builder to eager-load the nodes that are connected to
// the "answer_multi_choices" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProblemQuery) WithAnswerMultiChoices(opts ...func(*AnswerMultiChoicesQuery)) *ProblemQuery {
	query := (&AnswerMultiChoicesClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAnswerMultiChoices = query
	return pq
}

// WithAnswerTruths tells the query-builder to eager-load the nodes that are connected to
// the "answer_truths" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProblemQuery) WithAnswerTruths(opts ...func(*AnswerTruthQuery)) *ProblemQuery {
	query := (&AnswerTruthClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withAnswerTruths = query
	return pq
}

// WithWorkbook tells the query-builder to eager-load the nodes that are connected to
// the "workbook" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProblemQuery) WithWorkbook(opts ...func(*WorkbookQuery)) *ProblemQuery {
	query := (&WorkbookClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkbook = query
	return pq
}

// WithWorkbookCategory tells the query-builder to eager-load the nodes that are connected to
// the "workbook_category" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProblemQuery) WithWorkbookCategory(opts ...func(*WorkbookCategoryQuery)) *ProblemQuery {
	query := (&WorkbookCategoryClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkbookCategory = query
	return pq
}

// WithWorkbookCategoryDetail tells the query-builder to eager-load the nodes that are connected to
// the "workbook_category_detail" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProblemQuery) WithWorkbookCategoryDetail(opts ...func(*WorkbookCategoryDetailQuery)) *ProblemQuery {
	query := (&WorkbookCategoryDetailClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withWorkbookCategoryDetail = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Problem.Query().
//		GroupBy(problem.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (pq *ProblemQuery) GroupBy(field string, fields ...string) *ProblemGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProblemGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = problem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Problem.Query().
//		Select(problem.FieldCreatedAt).
//		Scan(ctx, &v)
func (pq *ProblemQuery) Select(fields ...string) *ProblemSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ProblemSelect{ProblemQuery: pq}
	sbuild.label = problem.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProblemSelect configured with the given aggregations.
func (pq *ProblemQuery) Aggregate(fns ...AggregateFunc) *ProblemSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ProblemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !problem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProblemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Problem, error) {
	var (
		nodes       = []*Problem{}
		_spec       = pq.querySpec()
		loadedTypes = [7]bool{
			pq.withAnswerType != nil,
			pq.withAnswerDescriptions != nil,
			pq.withAnswerMultiChoices != nil,
			pq.withAnswerTruths != nil,
			pq.withWorkbook != nil,
			pq.withWorkbookCategory != nil,
			pq.withWorkbookCategoryDetail != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Problem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Problem{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withAnswerType; query != nil {
		if err := pq.loadAnswerType(ctx, query, nodes, nil,
			func(n *Problem, e *AnswerType) { n.Edges.AnswerType = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAnswerDescriptions; query != nil {
		if err := pq.loadAnswerDescriptions(ctx, query, nodes, nil,
			func(n *Problem, e *AnswerDescription) { n.Edges.AnswerDescriptions = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withAnswerMultiChoices; query != nil {
		if err := pq.loadAnswerMultiChoices(ctx, query, nodes,
			func(n *Problem) { n.Edges.AnswerMultiChoices = []*AnswerMultiChoices{} },
			func(n *Problem, e *AnswerMultiChoices) {
				n.Edges.AnswerMultiChoices = append(n.Edges.AnswerMultiChoices, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := pq.withAnswerTruths; query != nil {
		if err := pq.loadAnswerTruths(ctx, query, nodes, nil,
			func(n *Problem, e *AnswerTruth) { n.Edges.AnswerTruths = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkbook; query != nil {
		if err := pq.loadWorkbook(ctx, query, nodes, nil,
			func(n *Problem, e *Workbook) { n.Edges.Workbook = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkbookCategory; query != nil {
		if err := pq.loadWorkbookCategory(ctx, query, nodes, nil,
			func(n *Problem, e *WorkbookCategory) { n.Edges.WorkbookCategory = e }); err != nil {
			return nil, err
		}
	}
	if query := pq.withWorkbookCategoryDetail; query != nil {
		if err := pq.loadWorkbookCategoryDetail(ctx, query, nodes, nil,
			func(n *Problem, e *WorkbookCategoryDetail) { n.Edges.WorkbookCategoryDetail = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProblemQuery) loadAnswerType(ctx context.Context, query *AnswerTypeQuery, nodes []*Problem, init func(*Problem), assign func(*Problem, *AnswerType)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Problem)
	for i := range nodes {
		fk := nodes[i].AnswerTypeID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(answertype.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "answer_type_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProblemQuery) loadAnswerDescriptions(ctx context.Context, query *AnswerDescriptionQuery, nodes []*Problem, init func(*Problem), assign func(*Problem, *AnswerDescription)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Problem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(answerdescription.FieldProblemID)
	}
	query.Where(predicate.AnswerDescription(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(problem.AnswerDescriptionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProblemID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "problem_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProblemQuery) loadAnswerMultiChoices(ctx context.Context, query *AnswerMultiChoicesQuery, nodes []*Problem, init func(*Problem), assign func(*Problem, *AnswerMultiChoices)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Problem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(answermultichoices.FieldProblemID)
	}
	query.Where(predicate.AnswerMultiChoices(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(problem.AnswerMultiChoicesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProblemID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "problem_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProblemQuery) loadAnswerTruths(ctx context.Context, query *AnswerTruthQuery, nodes []*Problem, init func(*Problem), assign func(*Problem, *AnswerTruth)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uuid.UUID]*Problem)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(answertruth.FieldProblemID)
	}
	query.Where(predicate.AnswerTruth(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(problem.AnswerTruthsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProblemID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "problem_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (pq *ProblemQuery) loadWorkbook(ctx context.Context, query *WorkbookQuery, nodes []*Problem, init func(*Problem), assign func(*Problem, *Workbook)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Problem)
	for i := range nodes {
		fk := nodes[i].WorkbookID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbook.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workbook_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProblemQuery) loadWorkbookCategory(ctx context.Context, query *WorkbookCategoryQuery, nodes []*Problem, init func(*Problem), assign func(*Problem, *WorkbookCategory)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Problem)
	for i := range nodes {
		if nodes[i].WorkbookCategoryID == nil {
			continue
		}
		fk := *nodes[i].WorkbookCategoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbookcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workbook_category_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (pq *ProblemQuery) loadWorkbookCategoryDetail(ctx context.Context, query *WorkbookCategoryDetailQuery, nodes []*Problem, init func(*Problem), assign func(*Problem, *WorkbookCategoryDetail)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*Problem)
	for i := range nodes {
		if nodes[i].WorkbookCategoryDetailID == nil {
			continue
		}
		fk := *nodes[i].WorkbookCategoryDetailID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbookcategorydetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workbook_category_detail_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (pq *ProblemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProblemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problem.FieldID)
		for i := range fields {
			if fields[i] != problem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if pq.withAnswerType != nil {
			_spec.Node.AddColumnOnce(problem.FieldAnswerTypeID)
		}
		if pq.withWorkbook != nil {
			_spec.Node.AddColumnOnce(problem.FieldWorkbookID)
		}
		if pq.withWorkbookCategory != nil {
			_spec.Node.AddColumnOnce(problem.FieldWorkbookCategoryID)
		}
		if pq.withWorkbookCategoryDetail != nil {
			_spec.Node.AddColumnOnce(problem.FieldWorkbookCategoryDetailID)
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProblemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(problem.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = problem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ProblemGroupBy is the group-by builder for Problem entities.
type ProblemGroupBy struct {
	selector
	build *ProblemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProblemGroupBy) Aggregate(fns ...AggregateFunc) *ProblemGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ProblemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, ent.OpQueryGroupBy)
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProblemQuery, *ProblemGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ProblemGroupBy) sqlScan(ctx context.Context, root *ProblemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProblemSelect is the builder for selecting fields of Problem entities.
type ProblemSelect struct {
	*ProblemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ProblemSelect) Aggregate(fns ...AggregateFunc) *ProblemSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProblemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, ent.OpQuerySelect)
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProblemQuery, *ProblemSelect](ctx, ps.ProblemQuery, ps, ps.inters, v)
}

func (ps *ProblemSelect) sqlScan(ctx context.Context, root *ProblemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
