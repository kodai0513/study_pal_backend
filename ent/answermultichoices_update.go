// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/answermultichoices"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerMultiChoicesUpdate is the builder for updating AnswerMultiChoices entities.
type AnswerMultiChoicesUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerMultiChoicesMutation
}

// Where appends a list predicates to the AnswerMultiChoicesUpdate builder.
func (amcu *AnswerMultiChoicesUpdate) Where(ps ...predicate.AnswerMultiChoices) *AnswerMultiChoicesUpdate {
	amcu.mutation.Where(ps...)
	return amcu
}

// SetCreatedAt sets the "created_at" field.
func (amcu *AnswerMultiChoicesUpdate) SetCreatedAt(t time.Time) *AnswerMultiChoicesUpdate {
	amcu.mutation.SetCreatedAt(t)
	return amcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amcu *AnswerMultiChoicesUpdate) SetNillableCreatedAt(t *time.Time) *AnswerMultiChoicesUpdate {
	if t != nil {
		amcu.SetCreatedAt(*t)
	}
	return amcu
}

// SetUpdatedAt sets the "updated_at" field.
func (amcu *AnswerMultiChoicesUpdate) SetUpdatedAt(t time.Time) *AnswerMultiChoicesUpdate {
	amcu.mutation.SetUpdatedAt(t)
	return amcu
}

// SetName sets the "name" field.
func (amcu *AnswerMultiChoicesUpdate) SetName(s string) *AnswerMultiChoicesUpdate {
	amcu.mutation.SetName(s)
	return amcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amcu *AnswerMultiChoicesUpdate) SetNillableName(s *string) *AnswerMultiChoicesUpdate {
	if s != nil {
		amcu.SetName(*s)
	}
	return amcu
}

// SetProblemID sets the "problem_id" field.
func (amcu *AnswerMultiChoicesUpdate) SetProblemID(i int) *AnswerMultiChoicesUpdate {
	amcu.mutation.SetProblemID(i)
	return amcu
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (amcu *AnswerMultiChoicesUpdate) SetNillableProblemID(i *int) *AnswerMultiChoicesUpdate {
	if i != nil {
		amcu.SetProblemID(*i)
	}
	return amcu
}

// SetIsCorrect sets the "is_correct" field.
func (amcu *AnswerMultiChoicesUpdate) SetIsCorrect(b bool) *AnswerMultiChoicesUpdate {
	amcu.mutation.SetIsCorrect(b)
	return amcu
}

// SetNillableIsCorrect sets the "is_correct" field if the given value is not nil.
func (amcu *AnswerMultiChoicesUpdate) SetNillableIsCorrect(b *bool) *AnswerMultiChoicesUpdate {
	if b != nil {
		amcu.SetIsCorrect(*b)
	}
	return amcu
}

// SetProblem sets the "problem" edge to the Problem entity.
func (amcu *AnswerMultiChoicesUpdate) SetProblem(p *Problem) *AnswerMultiChoicesUpdate {
	return amcu.SetProblemID(p.ID)
}

// Mutation returns the AnswerMultiChoicesMutation object of the builder.
func (amcu *AnswerMultiChoicesUpdate) Mutation() *AnswerMultiChoicesMutation {
	return amcu.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (amcu *AnswerMultiChoicesUpdate) ClearProblem() *AnswerMultiChoicesUpdate {
	amcu.mutation.ClearProblem()
	return amcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (amcu *AnswerMultiChoicesUpdate) Save(ctx context.Context) (int, error) {
	amcu.defaults()
	return withHooks(ctx, amcu.sqlSave, amcu.mutation, amcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amcu *AnswerMultiChoicesUpdate) SaveX(ctx context.Context) int {
	affected, err := amcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (amcu *AnswerMultiChoicesUpdate) Exec(ctx context.Context) error {
	_, err := amcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcu *AnswerMultiChoicesUpdate) ExecX(ctx context.Context) {
	if err := amcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amcu *AnswerMultiChoicesUpdate) defaults() {
	if _, ok := amcu.mutation.UpdatedAt(); !ok {
		v := answermultichoices.UpdateDefaultUpdatedAt()
		amcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amcu *AnswerMultiChoicesUpdate) check() error {
	if v, ok := amcu.mutation.Name(); ok {
		if err := answermultichoices.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnswerMultiChoices.name": %w`, err)}
		}
	}
	if amcu.mutation.ProblemCleared() && len(amcu.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerMultiChoices.problem"`)
	}
	return nil
}

func (amcu *AnswerMultiChoicesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := amcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(answermultichoices.Table, answermultichoices.Columns, sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt))
	if ps := amcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amcu.mutation.CreatedAt(); ok {
		_spec.SetField(answermultichoices.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := amcu.mutation.UpdatedAt(); ok {
		_spec.SetField(answermultichoices.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amcu.mutation.Name(); ok {
		_spec.SetField(answermultichoices.FieldName, field.TypeString, value)
	}
	if value, ok := amcu.mutation.IsCorrect(); ok {
		_spec.SetField(answermultichoices.FieldIsCorrect, field.TypeBool, value)
	}
	if amcu.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answermultichoices.ProblemTable,
			Columns: []string{answermultichoices.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amcu.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answermultichoices.ProblemTable,
			Columns: []string{answermultichoices.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, amcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answermultichoices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	amcu.mutation.done = true
	return n, nil
}

// AnswerMultiChoicesUpdateOne is the builder for updating a single AnswerMultiChoices entity.
type AnswerMultiChoicesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnswerMultiChoicesMutation
}

// SetCreatedAt sets the "created_at" field.
func (amcuo *AnswerMultiChoicesUpdateOne) SetCreatedAt(t time.Time) *AnswerMultiChoicesUpdateOne {
	amcuo.mutation.SetCreatedAt(t)
	return amcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (amcuo *AnswerMultiChoicesUpdateOne) SetNillableCreatedAt(t *time.Time) *AnswerMultiChoicesUpdateOne {
	if t != nil {
		amcuo.SetCreatedAt(*t)
	}
	return amcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (amcuo *AnswerMultiChoicesUpdateOne) SetUpdatedAt(t time.Time) *AnswerMultiChoicesUpdateOne {
	amcuo.mutation.SetUpdatedAt(t)
	return amcuo
}

// SetName sets the "name" field.
func (amcuo *AnswerMultiChoicesUpdateOne) SetName(s string) *AnswerMultiChoicesUpdateOne {
	amcuo.mutation.SetName(s)
	return amcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (amcuo *AnswerMultiChoicesUpdateOne) SetNillableName(s *string) *AnswerMultiChoicesUpdateOne {
	if s != nil {
		amcuo.SetName(*s)
	}
	return amcuo
}

// SetProblemID sets the "problem_id" field.
func (amcuo *AnswerMultiChoicesUpdateOne) SetProblemID(i int) *AnswerMultiChoicesUpdateOne {
	amcuo.mutation.SetProblemID(i)
	return amcuo
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (amcuo *AnswerMultiChoicesUpdateOne) SetNillableProblemID(i *int) *AnswerMultiChoicesUpdateOne {
	if i != nil {
		amcuo.SetProblemID(*i)
	}
	return amcuo
}

// SetIsCorrect sets the "is_correct" field.
func (amcuo *AnswerMultiChoicesUpdateOne) SetIsCorrect(b bool) *AnswerMultiChoicesUpdateOne {
	amcuo.mutation.SetIsCorrect(b)
	return amcuo
}

// SetNillableIsCorrect sets the "is_correct" field if the given value is not nil.
func (amcuo *AnswerMultiChoicesUpdateOne) SetNillableIsCorrect(b *bool) *AnswerMultiChoicesUpdateOne {
	if b != nil {
		amcuo.SetIsCorrect(*b)
	}
	return amcuo
}

// SetProblem sets the "problem" edge to the Problem entity.
func (amcuo *AnswerMultiChoicesUpdateOne) SetProblem(p *Problem) *AnswerMultiChoicesUpdateOne {
	return amcuo.SetProblemID(p.ID)
}

// Mutation returns the AnswerMultiChoicesMutation object of the builder.
func (amcuo *AnswerMultiChoicesUpdateOne) Mutation() *AnswerMultiChoicesMutation {
	return amcuo.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (amcuo *AnswerMultiChoicesUpdateOne) ClearProblem() *AnswerMultiChoicesUpdateOne {
	amcuo.mutation.ClearProblem()
	return amcuo
}

// Where appends a list predicates to the AnswerMultiChoicesUpdate builder.
func (amcuo *AnswerMultiChoicesUpdateOne) Where(ps ...predicate.AnswerMultiChoices) *AnswerMultiChoicesUpdateOne {
	amcuo.mutation.Where(ps...)
	return amcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (amcuo *AnswerMultiChoicesUpdateOne) Select(field string, fields ...string) *AnswerMultiChoicesUpdateOne {
	amcuo.fields = append([]string{field}, fields...)
	return amcuo
}

// Save executes the query and returns the updated AnswerMultiChoices entity.
func (amcuo *AnswerMultiChoicesUpdateOne) Save(ctx context.Context) (*AnswerMultiChoices, error) {
	amcuo.defaults()
	return withHooks(ctx, amcuo.sqlSave, amcuo.mutation, amcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (amcuo *AnswerMultiChoicesUpdateOne) SaveX(ctx context.Context) *AnswerMultiChoices {
	node, err := amcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (amcuo *AnswerMultiChoicesUpdateOne) Exec(ctx context.Context) error {
	_, err := amcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (amcuo *AnswerMultiChoicesUpdateOne) ExecX(ctx context.Context) {
	if err := amcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (amcuo *AnswerMultiChoicesUpdateOne) defaults() {
	if _, ok := amcuo.mutation.UpdatedAt(); !ok {
		v := answermultichoices.UpdateDefaultUpdatedAt()
		amcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (amcuo *AnswerMultiChoicesUpdateOne) check() error {
	if v, ok := amcuo.mutation.Name(); ok {
		if err := answermultichoices.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnswerMultiChoices.name": %w`, err)}
		}
	}
	if amcuo.mutation.ProblemCleared() && len(amcuo.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerMultiChoices.problem"`)
	}
	return nil
}

func (amcuo *AnswerMultiChoicesUpdateOne) sqlSave(ctx context.Context) (_node *AnswerMultiChoices, err error) {
	if err := amcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(answermultichoices.Table, answermultichoices.Columns, sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt))
	id, ok := amcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnswerMultiChoices.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := amcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answermultichoices.FieldID)
		for _, f := range fields {
			if !answermultichoices.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != answermultichoices.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := amcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := amcuo.mutation.CreatedAt(); ok {
		_spec.SetField(answermultichoices.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := amcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(answermultichoices.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := amcuo.mutation.Name(); ok {
		_spec.SetField(answermultichoices.FieldName, field.TypeString, value)
	}
	if value, ok := amcuo.mutation.IsCorrect(); ok {
		_spec.SetField(answermultichoices.FieldIsCorrect, field.TypeBool, value)
	}
	if amcuo.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answermultichoices.ProblemTable,
			Columns: []string{answermultichoices.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := amcuo.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answermultichoices.ProblemTable,
			Columns: []string{answermultichoices.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnswerMultiChoices{config: amcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, amcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answermultichoices.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	amcuo.mutation.done = true
	return _node, nil
}
