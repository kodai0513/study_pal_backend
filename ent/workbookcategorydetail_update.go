// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/workbookcategorydetail"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryDetailUpdate is the builder for updating WorkbookCategoryDetail entities.
type WorkbookCategoryDetailUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookCategoryDetailMutation
}

// Where appends a list predicates to the WorkbookCategoryDetailUpdate builder.
func (wcdu *WorkbookCategoryDetailUpdate) Where(ps ...predicate.WorkbookCategoryDetail) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.Where(ps...)
	return wcdu
}

// SetCreatedAt sets the "created_at" field.
func (wcdu *WorkbookCategoryDetailUpdate) SetCreatedAt(t time.Time) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.SetCreatedAt(t)
	return wcdu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcdu *WorkbookCategoryDetailUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryDetailUpdate {
	if t != nil {
		wcdu.SetCreatedAt(*t)
	}
	return wcdu
}

// SetUpdatedAt sets the "updated_at" field.
func (wcdu *WorkbookCategoryDetailUpdate) SetUpdatedAt(t time.Time) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.SetUpdatedAt(t)
	return wcdu
}

// SetName sets the "name" field.
func (wcdu *WorkbookCategoryDetailUpdate) SetName(s string) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.SetName(s)
	return wcdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcdu *WorkbookCategoryDetailUpdate) SetNillableName(s *string) *WorkbookCategoryDetailUpdate {
	if s != nil {
		wcdu.SetName(*s)
	}
	return wcdu
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (wcdu *WorkbookCategoryDetailUpdate) SetWorkbookCategoryID(u uuid.UUID) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.SetWorkbookCategoryID(u)
	return wcdu
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (wcdu *WorkbookCategoryDetailUpdate) SetNillableWorkbookCategoryID(u *uuid.UUID) *WorkbookCategoryDetailUpdate {
	if u != nil {
		wcdu.SetWorkbookCategoryID(*u)
	}
	return wcdu
}

// AddDescriptionProblemIDs adds the "description_problems" edge to the DescriptionProblem entity by IDs.
func (wcdu *WorkbookCategoryDetailUpdate) AddDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.AddDescriptionProblemIDs(ids...)
	return wcdu
}

// AddDescriptionProblems adds the "description_problems" edges to the DescriptionProblem entity.
func (wcdu *WorkbookCategoryDetailUpdate) AddDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryDetailUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcdu.AddDescriptionProblemIDs(ids...)
}

// AddSelectionProblemIDs adds the "selection_problems" edge to the SelectionProblem entity by IDs.
func (wcdu *WorkbookCategoryDetailUpdate) AddSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.AddSelectionProblemIDs(ids...)
	return wcdu
}

// AddSelectionProblems adds the "selection_problems" edges to the SelectionProblem entity.
func (wcdu *WorkbookCategoryDetailUpdate) AddSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryDetailUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcdu.AddSelectionProblemIDs(ids...)
}

// AddTrueOrFalseProblemIDs adds the "true_or_false_problems" edge to the TrueOrFalseProblem entity by IDs.
func (wcdu *WorkbookCategoryDetailUpdate) AddTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.AddTrueOrFalseProblemIDs(ids...)
	return wcdu
}

// AddTrueOrFalseProblems adds the "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcdu *WorkbookCategoryDetailUpdate) AddTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryDetailUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcdu.AddTrueOrFalseProblemIDs(ids...)
}

// Mutation returns the WorkbookCategoryDetailMutation object of the builder.
func (wcdu *WorkbookCategoryDetailUpdate) Mutation() *WorkbookCategoryDetailMutation {
	return wcdu.mutation
}

// ClearDescriptionProblems clears all "description_problems" edges to the DescriptionProblem entity.
func (wcdu *WorkbookCategoryDetailUpdate) ClearDescriptionProblems() *WorkbookCategoryDetailUpdate {
	wcdu.mutation.ClearDescriptionProblems()
	return wcdu
}

// RemoveDescriptionProblemIDs removes the "description_problems" edge to DescriptionProblem entities by IDs.
func (wcdu *WorkbookCategoryDetailUpdate) RemoveDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.RemoveDescriptionProblemIDs(ids...)
	return wcdu
}

// RemoveDescriptionProblems removes "description_problems" edges to DescriptionProblem entities.
func (wcdu *WorkbookCategoryDetailUpdate) RemoveDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryDetailUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcdu.RemoveDescriptionProblemIDs(ids...)
}

// ClearSelectionProblems clears all "selection_problems" edges to the SelectionProblem entity.
func (wcdu *WorkbookCategoryDetailUpdate) ClearSelectionProblems() *WorkbookCategoryDetailUpdate {
	wcdu.mutation.ClearSelectionProblems()
	return wcdu
}

// RemoveSelectionProblemIDs removes the "selection_problems" edge to SelectionProblem entities by IDs.
func (wcdu *WorkbookCategoryDetailUpdate) RemoveSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.RemoveSelectionProblemIDs(ids...)
	return wcdu
}

// RemoveSelectionProblems removes "selection_problems" edges to SelectionProblem entities.
func (wcdu *WorkbookCategoryDetailUpdate) RemoveSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryDetailUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcdu.RemoveSelectionProblemIDs(ids...)
}

// ClearTrueOrFalseProblems clears all "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcdu *WorkbookCategoryDetailUpdate) ClearTrueOrFalseProblems() *WorkbookCategoryDetailUpdate {
	wcdu.mutation.ClearTrueOrFalseProblems()
	return wcdu
}

// RemoveTrueOrFalseProblemIDs removes the "true_or_false_problems" edge to TrueOrFalseProblem entities by IDs.
func (wcdu *WorkbookCategoryDetailUpdate) RemoveTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdate {
	wcdu.mutation.RemoveTrueOrFalseProblemIDs(ids...)
	return wcdu
}

// RemoveTrueOrFalseProblems removes "true_or_false_problems" edges to TrueOrFalseProblem entities.
func (wcdu *WorkbookCategoryDetailUpdate) RemoveTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryDetailUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcdu.RemoveTrueOrFalseProblemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcdu *WorkbookCategoryDetailUpdate) Save(ctx context.Context) (int, error) {
	wcdu.defaults()
	return withHooks(ctx, wcdu.sqlSave, wcdu.mutation, wcdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcdu *WorkbookCategoryDetailUpdate) SaveX(ctx context.Context) int {
	affected, err := wcdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcdu *WorkbookCategoryDetailUpdate) Exec(ctx context.Context) error {
	_, err := wcdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcdu *WorkbookCategoryDetailUpdate) ExecX(ctx context.Context) {
	if err := wcdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcdu *WorkbookCategoryDetailUpdate) defaults() {
	if _, ok := wcdu.mutation.UpdatedAt(); !ok {
		v := workbookcategorydetail.UpdateDefaultUpdatedAt()
		wcdu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcdu *WorkbookCategoryDetailUpdate) check() error {
	if v, ok := wcdu.mutation.Name(); ok {
		if err := workbookcategorydetail.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategoryDetail.name": %w`, err)}
		}
	}
	return nil
}

func (wcdu *WorkbookCategoryDetailUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wcdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategorydetail.Table, workbookcategorydetail.Columns, sqlgraph.NewFieldSpec(workbookcategorydetail.FieldID, field.TypeUUID))
	if ps := wcdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcdu.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategorydetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wcdu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategorydetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcdu.mutation.Name(); ok {
		_spec.SetField(workbookcategorydetail.FieldName, field.TypeString, value)
	}
	if value, ok := wcdu.mutation.WorkbookCategoryID(); ok {
		_spec.SetField(workbookcategorydetail.FieldWorkbookCategoryID, field.TypeUUID, value)
	}
	if wcdu.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.DescriptionProblemsTable,
			Columns: []string{workbookcategorydetail.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcdu.mutation.RemovedDescriptionProblemsIDs(); len(nodes) > 0 && !wcdu.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.DescriptionProblemsTable,
			Columns: []string{workbookcategorydetail.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcdu.mutation.DescriptionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.DescriptionProblemsTable,
			Columns: []string{workbookcategorydetail.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcdu.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.SelectionProblemsTable,
			Columns: []string{workbookcategorydetail.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcdu.mutation.RemovedSelectionProblemsIDs(); len(nodes) > 0 && !wcdu.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.SelectionProblemsTable,
			Columns: []string{workbookcategorydetail.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcdu.mutation.SelectionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.SelectionProblemsTable,
			Columns: []string{workbookcategorydetail.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcdu.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategorydetail.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcdu.mutation.RemovedTrueOrFalseProblemsIDs(); len(nodes) > 0 && !wcdu.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategorydetail.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcdu.mutation.TrueOrFalseProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategorydetail.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategorydetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wcdu.mutation.done = true
	return n, nil
}

// WorkbookCategoryDetailUpdateOne is the builder for updating a single WorkbookCategoryDetail entity.
type WorkbookCategoryDetailUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookCategoryDetailMutation
}

// SetCreatedAt sets the "created_at" field.
func (wcduo *WorkbookCategoryDetailUpdateOne) SetCreatedAt(t time.Time) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.SetCreatedAt(t)
	return wcduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcduo *WorkbookCategoryDetailUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryDetailUpdateOne {
	if t != nil {
		wcduo.SetCreatedAt(*t)
	}
	return wcduo
}

// SetUpdatedAt sets the "updated_at" field.
func (wcduo *WorkbookCategoryDetailUpdateOne) SetUpdatedAt(t time.Time) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.SetUpdatedAt(t)
	return wcduo
}

// SetName sets the "name" field.
func (wcduo *WorkbookCategoryDetailUpdateOne) SetName(s string) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.SetName(s)
	return wcduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcduo *WorkbookCategoryDetailUpdateOne) SetNillableName(s *string) *WorkbookCategoryDetailUpdateOne {
	if s != nil {
		wcduo.SetName(*s)
	}
	return wcduo
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (wcduo *WorkbookCategoryDetailUpdateOne) SetWorkbookCategoryID(u uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.SetWorkbookCategoryID(u)
	return wcduo
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (wcduo *WorkbookCategoryDetailUpdateOne) SetNillableWorkbookCategoryID(u *uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	if u != nil {
		wcduo.SetWorkbookCategoryID(*u)
	}
	return wcduo
}

// AddDescriptionProblemIDs adds the "description_problems" edge to the DescriptionProblem entity by IDs.
func (wcduo *WorkbookCategoryDetailUpdateOne) AddDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.AddDescriptionProblemIDs(ids...)
	return wcduo
}

// AddDescriptionProblems adds the "description_problems" edges to the DescriptionProblem entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) AddDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryDetailUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcduo.AddDescriptionProblemIDs(ids...)
}

// AddSelectionProblemIDs adds the "selection_problems" edge to the SelectionProblem entity by IDs.
func (wcduo *WorkbookCategoryDetailUpdateOne) AddSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.AddSelectionProblemIDs(ids...)
	return wcduo
}

// AddSelectionProblems adds the "selection_problems" edges to the SelectionProblem entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) AddSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryDetailUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcduo.AddSelectionProblemIDs(ids...)
}

// AddTrueOrFalseProblemIDs adds the "true_or_false_problems" edge to the TrueOrFalseProblem entity by IDs.
func (wcduo *WorkbookCategoryDetailUpdateOne) AddTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.AddTrueOrFalseProblemIDs(ids...)
	return wcduo
}

// AddTrueOrFalseProblems adds the "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) AddTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryDetailUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcduo.AddTrueOrFalseProblemIDs(ids...)
}

// Mutation returns the WorkbookCategoryDetailMutation object of the builder.
func (wcduo *WorkbookCategoryDetailUpdateOne) Mutation() *WorkbookCategoryDetailMutation {
	return wcduo.mutation
}

// ClearDescriptionProblems clears all "description_problems" edges to the DescriptionProblem entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) ClearDescriptionProblems() *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.ClearDescriptionProblems()
	return wcduo
}

// RemoveDescriptionProblemIDs removes the "description_problems" edge to DescriptionProblem entities by IDs.
func (wcduo *WorkbookCategoryDetailUpdateOne) RemoveDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.RemoveDescriptionProblemIDs(ids...)
	return wcduo
}

// RemoveDescriptionProblems removes "description_problems" edges to DescriptionProblem entities.
func (wcduo *WorkbookCategoryDetailUpdateOne) RemoveDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryDetailUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcduo.RemoveDescriptionProblemIDs(ids...)
}

// ClearSelectionProblems clears all "selection_problems" edges to the SelectionProblem entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) ClearSelectionProblems() *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.ClearSelectionProblems()
	return wcduo
}

// RemoveSelectionProblemIDs removes the "selection_problems" edge to SelectionProblem entities by IDs.
func (wcduo *WorkbookCategoryDetailUpdateOne) RemoveSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.RemoveSelectionProblemIDs(ids...)
	return wcduo
}

// RemoveSelectionProblems removes "selection_problems" edges to SelectionProblem entities.
func (wcduo *WorkbookCategoryDetailUpdateOne) RemoveSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryDetailUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcduo.RemoveSelectionProblemIDs(ids...)
}

// ClearTrueOrFalseProblems clears all "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) ClearTrueOrFalseProblems() *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.ClearTrueOrFalseProblems()
	return wcduo
}

// RemoveTrueOrFalseProblemIDs removes the "true_or_false_problems" edge to TrueOrFalseProblem entities by IDs.
func (wcduo *WorkbookCategoryDetailUpdateOne) RemoveTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.RemoveTrueOrFalseProblemIDs(ids...)
	return wcduo
}

// RemoveTrueOrFalseProblems removes "true_or_false_problems" edges to TrueOrFalseProblem entities.
func (wcduo *WorkbookCategoryDetailUpdateOne) RemoveTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryDetailUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcduo.RemoveTrueOrFalseProblemIDs(ids...)
}

// Where appends a list predicates to the WorkbookCategoryDetailUpdate builder.
func (wcduo *WorkbookCategoryDetailUpdateOne) Where(ps ...predicate.WorkbookCategoryDetail) *WorkbookCategoryDetailUpdateOne {
	wcduo.mutation.Where(ps...)
	return wcduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcduo *WorkbookCategoryDetailUpdateOne) Select(field string, fields ...string) *WorkbookCategoryDetailUpdateOne {
	wcduo.fields = append([]string{field}, fields...)
	return wcduo
}

// Save executes the query and returns the updated WorkbookCategoryDetail entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) Save(ctx context.Context) (*WorkbookCategoryDetail, error) {
	wcduo.defaults()
	return withHooks(ctx, wcduo.sqlSave, wcduo.mutation, wcduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcduo *WorkbookCategoryDetailUpdateOne) SaveX(ctx context.Context) *WorkbookCategoryDetail {
	node, err := wcduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcduo *WorkbookCategoryDetailUpdateOne) Exec(ctx context.Context) error {
	_, err := wcduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcduo *WorkbookCategoryDetailUpdateOne) ExecX(ctx context.Context) {
	if err := wcduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcduo *WorkbookCategoryDetailUpdateOne) defaults() {
	if _, ok := wcduo.mutation.UpdatedAt(); !ok {
		v := workbookcategorydetail.UpdateDefaultUpdatedAt()
		wcduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcduo *WorkbookCategoryDetailUpdateOne) check() error {
	if v, ok := wcduo.mutation.Name(); ok {
		if err := workbookcategorydetail.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategoryDetail.name": %w`, err)}
		}
	}
	return nil
}

func (wcduo *WorkbookCategoryDetailUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookCategoryDetail, err error) {
	if err := wcduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategorydetail.Table, workbookcategorydetail.Columns, sqlgraph.NewFieldSpec(workbookcategorydetail.FieldID, field.TypeUUID))
	id, ok := wcduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookCategoryDetail.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategorydetail.FieldID)
		for _, f := range fields {
			if !workbookcategorydetail.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookcategorydetail.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcduo.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategorydetail.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wcduo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategorydetail.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcduo.mutation.Name(); ok {
		_spec.SetField(workbookcategorydetail.FieldName, field.TypeString, value)
	}
	if value, ok := wcduo.mutation.WorkbookCategoryID(); ok {
		_spec.SetField(workbookcategorydetail.FieldWorkbookCategoryID, field.TypeUUID, value)
	}
	if wcduo.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.DescriptionProblemsTable,
			Columns: []string{workbookcategorydetail.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcduo.mutation.RemovedDescriptionProblemsIDs(); len(nodes) > 0 && !wcduo.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.DescriptionProblemsTable,
			Columns: []string{workbookcategorydetail.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcduo.mutation.DescriptionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.DescriptionProblemsTable,
			Columns: []string{workbookcategorydetail.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcduo.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.SelectionProblemsTable,
			Columns: []string{workbookcategorydetail.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcduo.mutation.RemovedSelectionProblemsIDs(); len(nodes) > 0 && !wcduo.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.SelectionProblemsTable,
			Columns: []string{workbookcategorydetail.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcduo.mutation.SelectionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.SelectionProblemsTable,
			Columns: []string{workbookcategorydetail.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcduo.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategorydetail.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcduo.mutation.RemovedTrueOrFalseProblemsIDs(); len(nodes) > 0 && !wcduo.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategorydetail.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcduo.mutation.TrueOrFalseProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategorydetail.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategorydetail.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkbookCategoryDetail{config: wcduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategorydetail.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcduo.mutation.done = true
	return _node, nil
}
