// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategorydetail"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DescriptionProblemCreate is the builder for creating a DescriptionProblem entity.
type DescriptionProblemCreate struct {
	config
	mutation *DescriptionProblemMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dpc *DescriptionProblemCreate) SetCreatedAt(t time.Time) *DescriptionProblemCreate {
	dpc.mutation.SetCreatedAt(t)
	return dpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpc *DescriptionProblemCreate) SetNillableCreatedAt(t *time.Time) *DescriptionProblemCreate {
	if t != nil {
		dpc.SetCreatedAt(*t)
	}
	return dpc
}

// SetUpdatedAt sets the "updated_at" field.
func (dpc *DescriptionProblemCreate) SetUpdatedAt(t time.Time) *DescriptionProblemCreate {
	dpc.mutation.SetUpdatedAt(t)
	return dpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpc *DescriptionProblemCreate) SetNillableUpdatedAt(t *time.Time) *DescriptionProblemCreate {
	if t != nil {
		dpc.SetUpdatedAt(*t)
	}
	return dpc
}

// SetCorrectStatement sets the "correct_statement" field.
func (dpc *DescriptionProblemCreate) SetCorrectStatement(s string) *DescriptionProblemCreate {
	dpc.mutation.SetCorrectStatement(s)
	return dpc
}

// SetStatement sets the "statement" field.
func (dpc *DescriptionProblemCreate) SetStatement(s string) *DescriptionProblemCreate {
	dpc.mutation.SetStatement(s)
	return dpc
}

// SetWorkbookID sets the "workbook_id" field.
func (dpc *DescriptionProblemCreate) SetWorkbookID(u uuid.UUID) *DescriptionProblemCreate {
	dpc.mutation.SetWorkbookID(u)
	return dpc
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (dpc *DescriptionProblemCreate) SetWorkbookCategoryID(u uuid.UUID) *DescriptionProblemCreate {
	dpc.mutation.SetWorkbookCategoryID(u)
	return dpc
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (dpc *DescriptionProblemCreate) SetNillableWorkbookCategoryID(u *uuid.UUID) *DescriptionProblemCreate {
	if u != nil {
		dpc.SetWorkbookCategoryID(*u)
	}
	return dpc
}

// SetWorkbookCategoryDetailID sets the "workbook_category_detail_id" field.
func (dpc *DescriptionProblemCreate) SetWorkbookCategoryDetailID(u uuid.UUID) *DescriptionProblemCreate {
	dpc.mutation.SetWorkbookCategoryDetailID(u)
	return dpc
}

// SetNillableWorkbookCategoryDetailID sets the "workbook_category_detail_id" field if the given value is not nil.
func (dpc *DescriptionProblemCreate) SetNillableWorkbookCategoryDetailID(u *uuid.UUID) *DescriptionProblemCreate {
	if u != nil {
		dpc.SetWorkbookCategoryDetailID(*u)
	}
	return dpc
}

// SetID sets the "id" field.
func (dpc *DescriptionProblemCreate) SetID(u uuid.UUID) *DescriptionProblemCreate {
	dpc.mutation.SetID(u)
	return dpc
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (dpc *DescriptionProblemCreate) SetWorkbook(w *Workbook) *DescriptionProblemCreate {
	return dpc.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (dpc *DescriptionProblemCreate) SetWorkbookCategory(w *WorkbookCategory) *DescriptionProblemCreate {
	return dpc.SetWorkbookCategoryID(w.ID)
}

// SetWorkbookCategoryDetail sets the "workbook_category_detail" edge to the WorkbookCategoryDetail entity.
func (dpc *DescriptionProblemCreate) SetWorkbookCategoryDetail(w *WorkbookCategoryDetail) *DescriptionProblemCreate {
	return dpc.SetWorkbookCategoryDetailID(w.ID)
}

// Mutation returns the DescriptionProblemMutation object of the builder.
func (dpc *DescriptionProblemCreate) Mutation() *DescriptionProblemMutation {
	return dpc.mutation
}

// Save creates the DescriptionProblem in the database.
func (dpc *DescriptionProblemCreate) Save(ctx context.Context) (*DescriptionProblem, error) {
	dpc.defaults()
	return withHooks(ctx, dpc.sqlSave, dpc.mutation, dpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DescriptionProblemCreate) SaveX(ctx context.Context) *DescriptionProblem {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DescriptionProblemCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DescriptionProblemCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DescriptionProblemCreate) defaults() {
	if _, ok := dpc.mutation.CreatedAt(); !ok {
		v := descriptionproblem.DefaultCreatedAt()
		dpc.mutation.SetCreatedAt(v)
	}
	if _, ok := dpc.mutation.UpdatedAt(); !ok {
		v := descriptionproblem.DefaultUpdatedAt()
		dpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DescriptionProblemCreate) check() error {
	if _, ok := dpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DescriptionProblem.created_at"`)}
	}
	if _, ok := dpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DescriptionProblem.updated_at"`)}
	}
	if _, ok := dpc.mutation.CorrectStatement(); !ok {
		return &ValidationError{Name: "correct_statement", err: errors.New(`ent: missing required field "DescriptionProblem.correct_statement"`)}
	}
	if v, ok := dpc.mutation.CorrectStatement(); ok {
		if err := descriptionproblem.CorrectStatementValidator(v); err != nil {
			return &ValidationError{Name: "correct_statement", err: fmt.Errorf(`ent: validator failed for field "DescriptionProblem.correct_statement": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "DescriptionProblem.statement"`)}
	}
	if v, ok := dpc.mutation.Statement(); ok {
		if err := descriptionproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "DescriptionProblem.statement": %w`, err)}
		}
	}
	if _, ok := dpc.mutation.WorkbookID(); !ok {
		return &ValidationError{Name: "workbook_id", err: errors.New(`ent: missing required field "DescriptionProblem.workbook_id"`)}
	}
	if len(dpc.mutation.WorkbookIDs()) == 0 {
		return &ValidationError{Name: "workbook", err: errors.New(`ent: missing required edge "DescriptionProblem.workbook"`)}
	}
	return nil
}

func (dpc *DescriptionProblemCreate) sqlSave(ctx context.Context) (*DescriptionProblem, error) {
	if err := dpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dpc.mutation.id = &_node.ID
	dpc.mutation.done = true
	return _node, nil
}

func (dpc *DescriptionProblemCreate) createSpec() (*DescriptionProblem, *sqlgraph.CreateSpec) {
	var (
		_node = &DescriptionProblem{config: dpc.config}
		_spec = sqlgraph.NewCreateSpec(descriptionproblem.Table, sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID))
	)
	if id, ok := dpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dpc.mutation.CreatedAt(); ok {
		_spec.SetField(descriptionproblem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dpc.mutation.UpdatedAt(); ok {
		_spec.SetField(descriptionproblem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dpc.mutation.CorrectStatement(); ok {
		_spec.SetField(descriptionproblem.FieldCorrectStatement, field.TypeString, value)
		_node.CorrectStatement = value
	}
	if value, ok := dpc.mutation.Statement(); ok {
		_spec.SetField(descriptionproblem.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if nodes := dpc.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookTable,
			Columns: []string{descriptionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookCategoryTable,
			Columns: []string{descriptionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookCategoryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dpc.mutation.WorkbookCategoryDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookCategoryDetailTable,
			Columns: []string{descriptionproblem.WorkbookCategoryDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategorydetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookCategoryDetailID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DescriptionProblemCreateBulk is the builder for creating many DescriptionProblem entities in bulk.
type DescriptionProblemCreateBulk struct {
	config
	err      error
	builders []*DescriptionProblemCreate
}

// Save creates the DescriptionProblem entities in the database.
func (dpcb *DescriptionProblemCreateBulk) Save(ctx context.Context) ([]*DescriptionProblem, error) {
	if dpcb.err != nil {
		return nil, dpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DescriptionProblem, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DescriptionProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DescriptionProblemCreateBulk) SaveX(ctx context.Context) []*DescriptionProblem {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DescriptionProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DescriptionProblemCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
