// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/answerdescription"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerDescriptionUpdate is the builder for updating AnswerDescription entities.
type AnswerDescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerDescriptionMutation
}

// Where appends a list predicates to the AnswerDescriptionUpdate builder.
func (adu *AnswerDescriptionUpdate) Where(ps ...predicate.AnswerDescription) *AnswerDescriptionUpdate {
	adu.mutation.Where(ps...)
	return adu
}

// SetCreatedAt sets the "created_at" field.
func (adu *AnswerDescriptionUpdate) SetCreatedAt(t time.Time) *AnswerDescriptionUpdate {
	adu.mutation.SetCreatedAt(t)
	return adu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (adu *AnswerDescriptionUpdate) SetNillableCreatedAt(t *time.Time) *AnswerDescriptionUpdate {
	if t != nil {
		adu.SetCreatedAt(*t)
	}
	return adu
}

// SetUpdatedAt sets the "updated_at" field.
func (adu *AnswerDescriptionUpdate) SetUpdatedAt(t time.Time) *AnswerDescriptionUpdate {
	adu.mutation.SetUpdatedAt(t)
	return adu
}

// SetName sets the "name" field.
func (adu *AnswerDescriptionUpdate) SetName(s string) *AnswerDescriptionUpdate {
	adu.mutation.SetName(s)
	return adu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (adu *AnswerDescriptionUpdate) SetNillableName(s *string) *AnswerDescriptionUpdate {
	if s != nil {
		adu.SetName(*s)
	}
	return adu
}

// SetProblemID sets the "problem_id" field.
func (adu *AnswerDescriptionUpdate) SetProblemID(i int) *AnswerDescriptionUpdate {
	adu.mutation.SetProblemID(i)
	return adu
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (adu *AnswerDescriptionUpdate) SetNillableProblemID(i *int) *AnswerDescriptionUpdate {
	if i != nil {
		adu.SetProblemID(*i)
	}
	return adu
}

// SetProblem sets the "problem" edge to the Problem entity.
func (adu *AnswerDescriptionUpdate) SetProblem(p *Problem) *AnswerDescriptionUpdate {
	return adu.SetProblemID(p.ID)
}

// Mutation returns the AnswerDescriptionMutation object of the builder.
func (adu *AnswerDescriptionUpdate) Mutation() *AnswerDescriptionMutation {
	return adu.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (adu *AnswerDescriptionUpdate) ClearProblem() *AnswerDescriptionUpdate {
	adu.mutation.ClearProblem()
	return adu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (adu *AnswerDescriptionUpdate) Save(ctx context.Context) (int, error) {
	adu.defaults()
	return withHooks(ctx, adu.sqlSave, adu.mutation, adu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (adu *AnswerDescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := adu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (adu *AnswerDescriptionUpdate) Exec(ctx context.Context) error {
	_, err := adu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (adu *AnswerDescriptionUpdate) ExecX(ctx context.Context) {
	if err := adu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (adu *AnswerDescriptionUpdate) defaults() {
	if _, ok := adu.mutation.UpdatedAt(); !ok {
		v := answerdescription.UpdateDefaultUpdatedAt()
		adu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (adu *AnswerDescriptionUpdate) check() error {
	if v, ok := adu.mutation.Name(); ok {
		if err := answerdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnswerDescription.name": %w`, err)}
		}
	}
	if adu.mutation.ProblemCleared() && len(adu.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerDescription.problem"`)
	}
	return nil
}

func (adu *AnswerDescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := adu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(answerdescription.Table, answerdescription.Columns, sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt))
	if ps := adu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := adu.mutation.CreatedAt(); ok {
		_spec.SetField(answerdescription.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := adu.mutation.UpdatedAt(); ok {
		_spec.SetField(answerdescription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := adu.mutation.Name(); ok {
		_spec.SetField(answerdescription.FieldName, field.TypeString, value)
	}
	if adu.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerdescription.ProblemTable,
			Columns: []string{answerdescription.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := adu.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerdescription.ProblemTable,
			Columns: []string{answerdescription.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, adu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answerdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	adu.mutation.done = true
	return n, nil
}

// AnswerDescriptionUpdateOne is the builder for updating a single AnswerDescription entity.
type AnswerDescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnswerDescriptionMutation
}

// SetCreatedAt sets the "created_at" field.
func (aduo *AnswerDescriptionUpdateOne) SetCreatedAt(t time.Time) *AnswerDescriptionUpdateOne {
	aduo.mutation.SetCreatedAt(t)
	return aduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aduo *AnswerDescriptionUpdateOne) SetNillableCreatedAt(t *time.Time) *AnswerDescriptionUpdateOne {
	if t != nil {
		aduo.SetCreatedAt(*t)
	}
	return aduo
}

// SetUpdatedAt sets the "updated_at" field.
func (aduo *AnswerDescriptionUpdateOne) SetUpdatedAt(t time.Time) *AnswerDescriptionUpdateOne {
	aduo.mutation.SetUpdatedAt(t)
	return aduo
}

// SetName sets the "name" field.
func (aduo *AnswerDescriptionUpdateOne) SetName(s string) *AnswerDescriptionUpdateOne {
	aduo.mutation.SetName(s)
	return aduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aduo *AnswerDescriptionUpdateOne) SetNillableName(s *string) *AnswerDescriptionUpdateOne {
	if s != nil {
		aduo.SetName(*s)
	}
	return aduo
}

// SetProblemID sets the "problem_id" field.
func (aduo *AnswerDescriptionUpdateOne) SetProblemID(i int) *AnswerDescriptionUpdateOne {
	aduo.mutation.SetProblemID(i)
	return aduo
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (aduo *AnswerDescriptionUpdateOne) SetNillableProblemID(i *int) *AnswerDescriptionUpdateOne {
	if i != nil {
		aduo.SetProblemID(*i)
	}
	return aduo
}

// SetProblem sets the "problem" edge to the Problem entity.
func (aduo *AnswerDescriptionUpdateOne) SetProblem(p *Problem) *AnswerDescriptionUpdateOne {
	return aduo.SetProblemID(p.ID)
}

// Mutation returns the AnswerDescriptionMutation object of the builder.
func (aduo *AnswerDescriptionUpdateOne) Mutation() *AnswerDescriptionMutation {
	return aduo.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (aduo *AnswerDescriptionUpdateOne) ClearProblem() *AnswerDescriptionUpdateOne {
	aduo.mutation.ClearProblem()
	return aduo
}

// Where appends a list predicates to the AnswerDescriptionUpdate builder.
func (aduo *AnswerDescriptionUpdateOne) Where(ps ...predicate.AnswerDescription) *AnswerDescriptionUpdateOne {
	aduo.mutation.Where(ps...)
	return aduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aduo *AnswerDescriptionUpdateOne) Select(field string, fields ...string) *AnswerDescriptionUpdateOne {
	aduo.fields = append([]string{field}, fields...)
	return aduo
}

// Save executes the query and returns the updated AnswerDescription entity.
func (aduo *AnswerDescriptionUpdateOne) Save(ctx context.Context) (*AnswerDescription, error) {
	aduo.defaults()
	return withHooks(ctx, aduo.sqlSave, aduo.mutation, aduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aduo *AnswerDescriptionUpdateOne) SaveX(ctx context.Context) *AnswerDescription {
	node, err := aduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aduo *AnswerDescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := aduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aduo *AnswerDescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := aduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aduo *AnswerDescriptionUpdateOne) defaults() {
	if _, ok := aduo.mutation.UpdatedAt(); !ok {
		v := answerdescription.UpdateDefaultUpdatedAt()
		aduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aduo *AnswerDescriptionUpdateOne) check() error {
	if v, ok := aduo.mutation.Name(); ok {
		if err := answerdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "AnswerDescription.name": %w`, err)}
		}
	}
	if aduo.mutation.ProblemCleared() && len(aduo.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerDescription.problem"`)
	}
	return nil
}

func (aduo *AnswerDescriptionUpdateOne) sqlSave(ctx context.Context) (_node *AnswerDescription, err error) {
	if err := aduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(answerdescription.Table, answerdescription.Columns, sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt))
	id, ok := aduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnswerDescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answerdescription.FieldID)
		for _, f := range fields {
			if !answerdescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != answerdescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aduo.mutation.CreatedAt(); ok {
		_spec.SetField(answerdescription.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aduo.mutation.UpdatedAt(); ok {
		_spec.SetField(answerdescription.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := aduo.mutation.Name(); ok {
		_spec.SetField(answerdescription.FieldName, field.TypeString, value)
	}
	if aduo.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerdescription.ProblemTable,
			Columns: []string{answerdescription.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aduo.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerdescription.ProblemTable,
			Columns: []string{answerdescription.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnswerDescription{config: aduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answerdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aduo.mutation.done = true
	return _node, nil
}
