// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategoryclosure"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkbookCategoryClosure is the model entity for the WorkbookCategoryClosure schema.
type WorkbookCategoryClosure struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// WorkbookID holds the value of the "workbook_id" field.
	WorkbookID uuid.UUID `json:"workbook_id,omitempty"`
	// ChildID holds the value of the "child_id" field.
	ChildID uuid.UUID `json:"child_id,omitempty"`
	// IsRoot holds the value of the "is_root" field.
	IsRoot bool `json:"is_root,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID uuid.UUID `json:"parent_id,omitempty"`
	// Position holds the value of the "position" field.
	Position int `json:"position,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkbookCategoryClosureQuery when eager-loading is set.
	Edges        WorkbookCategoryClosureEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkbookCategoryClosureEdges holds the relations/edges for other nodes in the graph.
type WorkbookCategoryClosureEdges struct {
	// ChildCategory holds the value of the child_category edge.
	ChildCategory *WorkbookCategory `json:"child_category,omitempty"`
	// ParentCategory holds the value of the parent_category edge.
	ParentCategory *WorkbookCategory `json:"parent_category,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ChildCategoryOrErr returns the ChildCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookCategoryClosureEdges) ChildCategoryOrErr() (*WorkbookCategory, error) {
	if e.ChildCategory != nil {
		return e.ChildCategory, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workbookcategory.Label}
	}
	return nil, &NotLoadedError{edge: "child_category"}
}

// ParentCategoryOrErr returns the ParentCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookCategoryClosureEdges) ParentCategoryOrErr() (*WorkbookCategory, error) {
	if e.ParentCategory != nil {
		return e.ParentCategory, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workbookcategory.Label}
	}
	return nil, &NotLoadedError{edge: "parent_category"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkbookCategoryClosure) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbookcategoryclosure.FieldIsRoot:
			values[i] = new(sql.NullBool)
		case workbookcategoryclosure.FieldPosition, workbookcategoryclosure.FieldLevel:
			values[i] = new(sql.NullInt64)
		case workbookcategoryclosure.FieldCreatedAt, workbookcategoryclosure.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workbookcategoryclosure.FieldID, workbookcategoryclosure.FieldWorkbookID, workbookcategoryclosure.FieldChildID, workbookcategoryclosure.FieldParentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkbookCategoryClosure fields.
func (wcc *WorkbookCategoryClosure) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbookcategoryclosure.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wcc.ID = *value
			}
		case workbookcategoryclosure.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wcc.CreatedAt = value.Time
			}
		case workbookcategoryclosure.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wcc.UpdatedAt = value.Time
			}
		case workbookcategoryclosure.FieldWorkbookID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_id", values[i])
			} else if value != nil {
				wcc.WorkbookID = *value
			}
		case workbookcategoryclosure.FieldChildID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field child_id", values[i])
			} else if value != nil {
				wcc.ChildID = *value
			}
		case workbookcategoryclosure.FieldIsRoot:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_root", values[i])
			} else if value.Valid {
				wcc.IsRoot = value.Bool
			}
		case workbookcategoryclosure.FieldParentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value != nil {
				wcc.ParentID = *value
			}
		case workbookcategoryclosure.FieldPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				wcc.Position = int(value.Int64)
			}
		case workbookcategoryclosure.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				wcc.Level = int(value.Int64)
			}
		default:
			wcc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkbookCategoryClosure.
// This includes values selected through modifiers, order, etc.
func (wcc *WorkbookCategoryClosure) Value(name string) (ent.Value, error) {
	return wcc.selectValues.Get(name)
}

// QueryChildCategory queries the "child_category" edge of the WorkbookCategoryClosure entity.
func (wcc *WorkbookCategoryClosure) QueryChildCategory() *WorkbookCategoryQuery {
	return NewWorkbookCategoryClosureClient(wcc.config).QueryChildCategory(wcc)
}

// QueryParentCategory queries the "parent_category" edge of the WorkbookCategoryClosure entity.
func (wcc *WorkbookCategoryClosure) QueryParentCategory() *WorkbookCategoryQuery {
	return NewWorkbookCategoryClosureClient(wcc.config).QueryParentCategory(wcc)
}

// Update returns a builder for updating this WorkbookCategoryClosure.
// Note that you need to call WorkbookCategoryClosure.Unwrap() before calling this method if this WorkbookCategoryClosure
// was returned from a transaction, and the transaction was committed or rolled back.
func (wcc *WorkbookCategoryClosure) Update() *WorkbookCategoryClosureUpdateOne {
	return NewWorkbookCategoryClosureClient(wcc.config).UpdateOne(wcc)
}

// Unwrap unwraps the WorkbookCategoryClosure entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wcc *WorkbookCategoryClosure) Unwrap() *WorkbookCategoryClosure {
	_tx, ok := wcc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkbookCategoryClosure is not a transactional entity")
	}
	wcc.config.driver = _tx.drv
	return wcc
}

// String implements the fmt.Stringer.
func (wcc *WorkbookCategoryClosure) String() string {
	var builder strings.Builder
	builder.WriteString("WorkbookCategoryClosure(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wcc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wcc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wcc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("workbook_id=")
	builder.WriteString(fmt.Sprintf("%v", wcc.WorkbookID))
	builder.WriteString(", ")
	builder.WriteString("child_id=")
	builder.WriteString(fmt.Sprintf("%v", wcc.ChildID))
	builder.WriteString(", ")
	builder.WriteString("is_root=")
	builder.WriteString(fmt.Sprintf("%v", wcc.IsRoot))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", wcc.ParentID))
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", wcc.Position))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", wcc.Level))
	builder.WriteByte(')')
	return builder.String()
}

// WorkbookCategoryClosures is a parsable slice of WorkbookCategoryClosure.
type WorkbookCategoryClosures []*WorkbookCategoryClosure
