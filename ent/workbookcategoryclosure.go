// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/workbookcategoryclosure"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkbookCategoryClosure is the model entity for the WorkbookCategoryClosure schema.
type WorkbookCategoryClosure struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChildID holds the value of the "child_id" field.
	ChildID int `json:"child_id,omitempty"`
	// ParentID holds the value of the "parent_id" field.
	ParentID                                     int `json:"parent_id,omitempty"`
	workbook_category_workbook_category_closures *int
	selectValues                                 sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkbookCategoryClosure) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbookcategoryclosure.FieldID, workbookcategoryclosure.FieldChildID, workbookcategoryclosure.FieldParentID:
			values[i] = new(sql.NullInt64)
		case workbookcategoryclosure.ForeignKeys[0]: // workbook_category_workbook_category_closures
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkbookCategoryClosure fields.
func (wcc *WorkbookCategoryClosure) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbookcategoryclosure.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wcc.ID = int(value.Int64)
		case workbookcategoryclosure.FieldChildID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field child_id", values[i])
			} else if value.Valid {
				wcc.ChildID = int(value.Int64)
			}
		case workbookcategoryclosure.FieldParentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parent_id", values[i])
			} else if value.Valid {
				wcc.ParentID = int(value.Int64)
			}
		case workbookcategoryclosure.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workbook_category_workbook_category_closures", value)
			} else if value.Valid {
				wcc.workbook_category_workbook_category_closures = new(int)
				*wcc.workbook_category_workbook_category_closures = int(value.Int64)
			}
		default:
			wcc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkbookCategoryClosure.
// This includes values selected through modifiers, order, etc.
func (wcc *WorkbookCategoryClosure) Value(name string) (ent.Value, error) {
	return wcc.selectValues.Get(name)
}

// Update returns a builder for updating this WorkbookCategoryClosure.
// Note that you need to call WorkbookCategoryClosure.Unwrap() before calling this method if this WorkbookCategoryClosure
// was returned from a transaction, and the transaction was committed or rolled back.
func (wcc *WorkbookCategoryClosure) Update() *WorkbookCategoryClosureUpdateOne {
	return NewWorkbookCategoryClosureClient(wcc.config).UpdateOne(wcc)
}

// Unwrap unwraps the WorkbookCategoryClosure entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wcc *WorkbookCategoryClosure) Unwrap() *WorkbookCategoryClosure {
	_tx, ok := wcc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkbookCategoryClosure is not a transactional entity")
	}
	wcc.config.driver = _tx.drv
	return wcc
}

// String implements the fmt.Stringer.
func (wcc *WorkbookCategoryClosure) String() string {
	var builder strings.Builder
	builder.WriteString("WorkbookCategoryClosure(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wcc.ID))
	builder.WriteString("child_id=")
	builder.WriteString(fmt.Sprintf("%v", wcc.ChildID))
	builder.WriteString(", ")
	builder.WriteString("parent_id=")
	builder.WriteString(fmt.Sprintf("%v", wcc.ParentID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkbookCategoryClosures is a parsable slice of WorkbookCategoryClosure.
type WorkbookCategoryClosures []*WorkbookCategoryClosure
