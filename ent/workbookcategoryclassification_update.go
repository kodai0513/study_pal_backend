// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbookcategoryclassification"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryClassificationUpdate is the builder for updating WorkbookCategoryClassification entities.
type WorkbookCategoryClassificationUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookCategoryClassificationMutation
}

// Where appends a list predicates to the WorkbookCategoryClassificationUpdate builder.
func (wccu *WorkbookCategoryClassificationUpdate) Where(ps ...predicate.WorkbookCategoryClassification) *WorkbookCategoryClassificationUpdate {
	wccu.mutation.Where(ps...)
	return wccu
}

// SetCreatedAt sets the "created_at" field.
func (wccu *WorkbookCategoryClassificationUpdate) SetCreatedAt(t time.Time) *WorkbookCategoryClassificationUpdate {
	wccu.mutation.SetCreatedAt(t)
	return wccu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wccu *WorkbookCategoryClassificationUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryClassificationUpdate {
	if t != nil {
		wccu.SetCreatedAt(*t)
	}
	return wccu
}

// SetUpdatedAt sets the "updated_at" field.
func (wccu *WorkbookCategoryClassificationUpdate) SetUpdatedAt(t time.Time) *WorkbookCategoryClassificationUpdate {
	wccu.mutation.SetUpdatedAt(t)
	return wccu
}

// SetName sets the "name" field.
func (wccu *WorkbookCategoryClassificationUpdate) SetName(s string) *WorkbookCategoryClassificationUpdate {
	wccu.mutation.SetName(s)
	return wccu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wccu *WorkbookCategoryClassificationUpdate) SetNillableName(s *string) *WorkbookCategoryClassificationUpdate {
	if s != nil {
		wccu.SetName(*s)
	}
	return wccu
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (wccu *WorkbookCategoryClassificationUpdate) SetWorkbookCategoryID(u uuid.UUID) *WorkbookCategoryClassificationUpdate {
	wccu.mutation.SetWorkbookCategoryID(u)
	return wccu
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (wccu *WorkbookCategoryClassificationUpdate) SetNillableWorkbookCategoryID(u *uuid.UUID) *WorkbookCategoryClassificationUpdate {
	if u != nil {
		wccu.SetWorkbookCategoryID(*u)
	}
	return wccu
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (wccu *WorkbookCategoryClassificationUpdate) AddProblemIDs(ids ...uuid.UUID) *WorkbookCategoryClassificationUpdate {
	wccu.mutation.AddProblemIDs(ids...)
	return wccu
}

// AddProblems adds the "problems" edges to the Problem entity.
func (wccu *WorkbookCategoryClassificationUpdate) AddProblems(p ...*Problem) *WorkbookCategoryClassificationUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wccu.AddProblemIDs(ids...)
}

// Mutation returns the WorkbookCategoryClassificationMutation object of the builder.
func (wccu *WorkbookCategoryClassificationUpdate) Mutation() *WorkbookCategoryClassificationMutation {
	return wccu.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (wccu *WorkbookCategoryClassificationUpdate) ClearProblems() *WorkbookCategoryClassificationUpdate {
	wccu.mutation.ClearProblems()
	return wccu
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (wccu *WorkbookCategoryClassificationUpdate) RemoveProblemIDs(ids ...uuid.UUID) *WorkbookCategoryClassificationUpdate {
	wccu.mutation.RemoveProblemIDs(ids...)
	return wccu
}

// RemoveProblems removes "problems" edges to Problem entities.
func (wccu *WorkbookCategoryClassificationUpdate) RemoveProblems(p ...*Problem) *WorkbookCategoryClassificationUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wccu.RemoveProblemIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wccu *WorkbookCategoryClassificationUpdate) Save(ctx context.Context) (int, error) {
	wccu.defaults()
	return withHooks(ctx, wccu.sqlSave, wccu.mutation, wccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wccu *WorkbookCategoryClassificationUpdate) SaveX(ctx context.Context) int {
	affected, err := wccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wccu *WorkbookCategoryClassificationUpdate) Exec(ctx context.Context) error {
	_, err := wccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccu *WorkbookCategoryClassificationUpdate) ExecX(ctx context.Context) {
	if err := wccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wccu *WorkbookCategoryClassificationUpdate) defaults() {
	if _, ok := wccu.mutation.UpdatedAt(); !ok {
		v := workbookcategoryclassification.UpdateDefaultUpdatedAt()
		wccu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wccu *WorkbookCategoryClassificationUpdate) check() error {
	if v, ok := wccu.mutation.Name(); ok {
		if err := workbookcategoryclassification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategoryClassification.name": %w`, err)}
		}
	}
	return nil
}

func (wccu *WorkbookCategoryClassificationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wccu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategoryclassification.Table, workbookcategoryclassification.Columns, sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID))
	if ps := wccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wccu.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategoryclassification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wccu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategoryclassification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wccu.mutation.Name(); ok {
		_spec.SetField(workbookcategoryclassification.FieldName, field.TypeString, value)
	}
	if value, ok := wccu.mutation.WorkbookCategoryID(); ok {
		_spec.SetField(workbookcategoryclassification.FieldWorkbookCategoryID, field.TypeUUID, value)
	}
	if wccu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategoryclassification.ProblemsTable,
			Columns: []string{workbookcategoryclassification.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccu.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !wccu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategoryclassification.ProblemsTable,
			Columns: []string{workbookcategoryclassification.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccu.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategoryclassification.ProblemsTable,
			Columns: []string{workbookcategoryclassification.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategoryclassification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wccu.mutation.done = true
	return n, nil
}

// WorkbookCategoryClassificationUpdateOne is the builder for updating a single WorkbookCategoryClassification entity.
type WorkbookCategoryClassificationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookCategoryClassificationMutation
}

// SetCreatedAt sets the "created_at" field.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SetCreatedAt(t time.Time) *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.SetCreatedAt(t)
	return wccuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryClassificationUpdateOne {
	if t != nil {
		wccuo.SetCreatedAt(*t)
	}
	return wccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SetUpdatedAt(t time.Time) *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.SetUpdatedAt(t)
	return wccuo
}

// SetName sets the "name" field.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SetName(s string) *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.SetName(s)
	return wccuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SetNillableName(s *string) *WorkbookCategoryClassificationUpdateOne {
	if s != nil {
		wccuo.SetName(*s)
	}
	return wccuo
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SetWorkbookCategoryID(u uuid.UUID) *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.SetWorkbookCategoryID(u)
	return wccuo
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SetNillableWorkbookCategoryID(u *uuid.UUID) *WorkbookCategoryClassificationUpdateOne {
	if u != nil {
		wccuo.SetWorkbookCategoryID(*u)
	}
	return wccuo
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (wccuo *WorkbookCategoryClassificationUpdateOne) AddProblemIDs(ids ...uuid.UUID) *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.AddProblemIDs(ids...)
	return wccuo
}

// AddProblems adds the "problems" edges to the Problem entity.
func (wccuo *WorkbookCategoryClassificationUpdateOne) AddProblems(p ...*Problem) *WorkbookCategoryClassificationUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wccuo.AddProblemIDs(ids...)
}

// Mutation returns the WorkbookCategoryClassificationMutation object of the builder.
func (wccuo *WorkbookCategoryClassificationUpdateOne) Mutation() *WorkbookCategoryClassificationMutation {
	return wccuo.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (wccuo *WorkbookCategoryClassificationUpdateOne) ClearProblems() *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.ClearProblems()
	return wccuo
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (wccuo *WorkbookCategoryClassificationUpdateOne) RemoveProblemIDs(ids ...uuid.UUID) *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.RemoveProblemIDs(ids...)
	return wccuo
}

// RemoveProblems removes "problems" edges to Problem entities.
func (wccuo *WorkbookCategoryClassificationUpdateOne) RemoveProblems(p ...*Problem) *WorkbookCategoryClassificationUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wccuo.RemoveProblemIDs(ids...)
}

// Where appends a list predicates to the WorkbookCategoryClassificationUpdate builder.
func (wccuo *WorkbookCategoryClassificationUpdateOne) Where(ps ...predicate.WorkbookCategoryClassification) *WorkbookCategoryClassificationUpdateOne {
	wccuo.mutation.Where(ps...)
	return wccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wccuo *WorkbookCategoryClassificationUpdateOne) Select(field string, fields ...string) *WorkbookCategoryClassificationUpdateOne {
	wccuo.fields = append([]string{field}, fields...)
	return wccuo
}

// Save executes the query and returns the updated WorkbookCategoryClassification entity.
func (wccuo *WorkbookCategoryClassificationUpdateOne) Save(ctx context.Context) (*WorkbookCategoryClassification, error) {
	wccuo.defaults()
	return withHooks(ctx, wccuo.sqlSave, wccuo.mutation, wccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wccuo *WorkbookCategoryClassificationUpdateOne) SaveX(ctx context.Context) *WorkbookCategoryClassification {
	node, err := wccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wccuo *WorkbookCategoryClassificationUpdateOne) Exec(ctx context.Context) error {
	_, err := wccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccuo *WorkbookCategoryClassificationUpdateOne) ExecX(ctx context.Context) {
	if err := wccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wccuo *WorkbookCategoryClassificationUpdateOne) defaults() {
	if _, ok := wccuo.mutation.UpdatedAt(); !ok {
		v := workbookcategoryclassification.UpdateDefaultUpdatedAt()
		wccuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wccuo *WorkbookCategoryClassificationUpdateOne) check() error {
	if v, ok := wccuo.mutation.Name(); ok {
		if err := workbookcategoryclassification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategoryClassification.name": %w`, err)}
		}
	}
	return nil
}

func (wccuo *WorkbookCategoryClassificationUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookCategoryClassification, err error) {
	if err := wccuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategoryclassification.Table, workbookcategoryclassification.Columns, sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID))
	id, ok := wccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookCategoryClassification.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategoryclassification.FieldID)
		for _, f := range fields {
			if !workbookcategoryclassification.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookcategoryclassification.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wccuo.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategoryclassification.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategoryclassification.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wccuo.mutation.Name(); ok {
		_spec.SetField(workbookcategoryclassification.FieldName, field.TypeString, value)
	}
	if value, ok := wccuo.mutation.WorkbookCategoryID(); ok {
		_spec.SetField(workbookcategoryclassification.FieldWorkbookCategoryID, field.TypeUUID, value)
	}
	if wccuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategoryclassification.ProblemsTable,
			Columns: []string{workbookcategoryclassification.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccuo.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !wccuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategoryclassification.ProblemsTable,
			Columns: []string{workbookcategoryclassification.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccuo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategoryclassification.ProblemsTable,
			Columns: []string{workbookcategoryclassification.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkbookCategoryClassification{config: wccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategoryclassification.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wccuo.mutation.done = true
	return _node, nil
}
