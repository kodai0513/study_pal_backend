// Code generated by ent, DO NOT EDIT.

package problem

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the problem type in the database.
	Label = "problem"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAnswerTypeID holds the string denoting the answer_type_id field in the database.
	FieldAnswerTypeID = "answer_type_id"
	// FieldStatement holds the string denoting the statement field in the database.
	FieldStatement = "statement"
	// FieldWorkbookID holds the string denoting the workbook_id field in the database.
	FieldWorkbookID = "workbook_id"
	// FieldWorkbookCategoryID holds the string denoting the workbook_category_id field in the database.
	FieldWorkbookCategoryID = "workbook_category_id"
	// EdgeAnswerType holds the string denoting the answer_type edge name in mutations.
	EdgeAnswerType = "answer_type"
	// EdgeAnswerDescriptions holds the string denoting the answer_descriptions edge name in mutations.
	EdgeAnswerDescriptions = "answer_descriptions"
	// EdgeAnswerMultiChoices holds the string denoting the answer_multi_choices edge name in mutations.
	EdgeAnswerMultiChoices = "answer_multi_choices"
	// EdgeAnswerTruths holds the string denoting the answer_truths edge name in mutations.
	EdgeAnswerTruths = "answer_truths"
	// EdgeWorkbook holds the string denoting the workbook edge name in mutations.
	EdgeWorkbook = "workbook"
	// EdgeWorkbookCategory holds the string denoting the workbook_category edge name in mutations.
	EdgeWorkbookCategory = "workbook_category"
	// Table holds the table name of the problem in the database.
	Table = "problems"
	// AnswerTypeTable is the table that holds the answer_type relation/edge.
	AnswerTypeTable = "problems"
	// AnswerTypeInverseTable is the table name for the AnswerType entity.
	// It exists in this package in order to avoid circular dependency with the "answertype" package.
	AnswerTypeInverseTable = "answer_types"
	// AnswerTypeColumn is the table column denoting the answer_type relation/edge.
	AnswerTypeColumn = "answer_type_id"
	// AnswerDescriptionsTable is the table that holds the answer_descriptions relation/edge.
	AnswerDescriptionsTable = "answer_descriptions"
	// AnswerDescriptionsInverseTable is the table name for the AnswerDescription entity.
	// It exists in this package in order to avoid circular dependency with the "answerdescription" package.
	AnswerDescriptionsInverseTable = "answer_descriptions"
	// AnswerDescriptionsColumn is the table column denoting the answer_descriptions relation/edge.
	AnswerDescriptionsColumn = "problem_id"
	// AnswerMultiChoicesTable is the table that holds the answer_multi_choices relation/edge.
	AnswerMultiChoicesTable = "answer_multi_choices"
	// AnswerMultiChoicesInverseTable is the table name for the AnswerMultiChoices entity.
	// It exists in this package in order to avoid circular dependency with the "answermultichoices" package.
	AnswerMultiChoicesInverseTable = "answer_multi_choices"
	// AnswerMultiChoicesColumn is the table column denoting the answer_multi_choices relation/edge.
	AnswerMultiChoicesColumn = "problem_id"
	// AnswerTruthsTable is the table that holds the answer_truths relation/edge.
	AnswerTruthsTable = "answer_truths"
	// AnswerTruthsInverseTable is the table name for the AnswerTruth entity.
	// It exists in this package in order to avoid circular dependency with the "answertruth" package.
	AnswerTruthsInverseTable = "answer_truths"
	// AnswerTruthsColumn is the table column denoting the answer_truths relation/edge.
	AnswerTruthsColumn = "problem_id"
	// WorkbookTable is the table that holds the workbook relation/edge.
	WorkbookTable = "problems"
	// WorkbookInverseTable is the table name for the Workbook entity.
	// It exists in this package in order to avoid circular dependency with the "workbook" package.
	WorkbookInverseTable = "workbooks"
	// WorkbookColumn is the table column denoting the workbook relation/edge.
	WorkbookColumn = "workbook_id"
	// WorkbookCategoryTable is the table that holds the workbook_category relation/edge.
	WorkbookCategoryTable = "problems"
	// WorkbookCategoryInverseTable is the table name for the WorkbookCategory entity.
	// It exists in this package in order to avoid circular dependency with the "workbookcategory" package.
	WorkbookCategoryInverseTable = "workbook_categories"
	// WorkbookCategoryColumn is the table column denoting the workbook_category relation/edge.
	WorkbookCategoryColumn = "workbook_category_id"
)

// Columns holds all SQL columns for problem fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAnswerTypeID,
	FieldStatement,
	FieldWorkbookID,
	FieldWorkbookCategoryID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// StatementValidator is a validator for the "statement" field. It is called by the builders before save.
	StatementValidator func(string) error
)

// OrderOption defines the ordering options for the Problem queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAnswerTypeID orders the results by the answer_type_id field.
func ByAnswerTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnswerTypeID, opts...).ToFunc()
}

// ByStatement orders the results by the statement field.
func ByStatement(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatement, opts...).ToFunc()
}

// ByWorkbookID orders the results by the workbook_id field.
func ByWorkbookID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookID, opts...).ToFunc()
}

// ByWorkbookCategoryID orders the results by the workbook_category_id field.
func ByWorkbookCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkbookCategoryID, opts...).ToFunc()
}

// ByAnswerTypeField orders the results by answer_type field.
func ByAnswerTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerTypeStep(), sql.OrderByField(field, opts...))
	}
}

// ByAnswerDescriptionsCount orders the results by answer_descriptions count.
func ByAnswerDescriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswerDescriptionsStep(), opts...)
	}
}

// ByAnswerDescriptions orders the results by answer_descriptions terms.
func ByAnswerDescriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerDescriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnswerMultiChoicesCount orders the results by answer_multi_choices count.
func ByAnswerMultiChoicesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswerMultiChoicesStep(), opts...)
	}
}

// ByAnswerMultiChoices orders the results by answer_multi_choices terms.
func ByAnswerMultiChoices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerMultiChoicesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAnswerTruthsCount orders the results by answer_truths count.
func ByAnswerTruthsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAnswerTruthsStep(), opts...)
	}
}

// ByAnswerTruths orders the results by answer_truths terms.
func ByAnswerTruths(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAnswerTruthsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkbookField orders the results by workbook field.
func ByWorkbookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkbookCategoryField orders the results by workbook_category field.
func ByWorkbookCategoryField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookCategoryStep(), sql.OrderByField(field, opts...))
	}
}
func newAnswerTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AnswerTypeTable, AnswerTypeColumn),
	)
}
func newAnswerDescriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerDescriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnswerDescriptionsTable, AnswerDescriptionsColumn),
	)
}
func newAnswerMultiChoicesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerMultiChoicesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnswerMultiChoicesTable, AnswerMultiChoicesColumn),
	)
}
func newAnswerTruthsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AnswerTruthsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AnswerTruthsTable, AnswerTruthsColumn),
	)
}
func newWorkbookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkbookTable, WorkbookColumn),
	)
}
func newWorkbookCategoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookCategoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkbookCategoryTable, WorkbookCategoryColumn),
	)
}
