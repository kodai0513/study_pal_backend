// Code generated by ent, DO NOT EDIT.

package problem

import (
	"study-pal-backend/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUpdatedAt, v))
}

// AnswerTypeID applies equality check predicate on the "answer_type_id" field. It's identical to AnswerTypeIDEQ.
func AnswerTypeID(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldAnswerTypeID, v))
}

// Statement applies equality check predicate on the "statement" field. It's identical to StatementEQ.
func Statement(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldStatement, v))
}

// WorkbookID applies equality check predicate on the "workbook_id" field. It's identical to WorkbookIDEQ.
func WorkbookID(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldWorkbookID, v))
}

// WorkbookCategoryID applies equality check predicate on the "workbook_category_id" field. It's identical to WorkbookCategoryIDEQ.
func WorkbookCategoryID(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldWorkbookCategoryID, v))
}

// WorkbookCategoryDetailID applies equality check predicate on the "workbook_category_detail_id" field. It's identical to WorkbookCategoryDetailIDEQ.
func WorkbookCategoryDetailID(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldWorkbookCategoryDetailID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldUpdatedAt, v))
}

// AnswerTypeIDEQ applies the EQ predicate on the "answer_type_id" field.
func AnswerTypeIDEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldAnswerTypeID, v))
}

// AnswerTypeIDNEQ applies the NEQ predicate on the "answer_type_id" field.
func AnswerTypeIDNEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldAnswerTypeID, v))
}

// AnswerTypeIDIn applies the In predicate on the "answer_type_id" field.
func AnswerTypeIDIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldAnswerTypeID, vs...))
}

// AnswerTypeIDNotIn applies the NotIn predicate on the "answer_type_id" field.
func AnswerTypeIDNotIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldAnswerTypeID, vs...))
}

// StatementEQ applies the EQ predicate on the "statement" field.
func StatementEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldStatement, v))
}

// StatementNEQ applies the NEQ predicate on the "statement" field.
func StatementNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldStatement, v))
}

// StatementIn applies the In predicate on the "statement" field.
func StatementIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldStatement, vs...))
}

// StatementNotIn applies the NotIn predicate on the "statement" field.
func StatementNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldStatement, vs...))
}

// StatementGT applies the GT predicate on the "statement" field.
func StatementGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldStatement, v))
}

// StatementGTE applies the GTE predicate on the "statement" field.
func StatementGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldStatement, v))
}

// StatementLT applies the LT predicate on the "statement" field.
func StatementLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldStatement, v))
}

// StatementLTE applies the LTE predicate on the "statement" field.
func StatementLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldStatement, v))
}

// StatementContains applies the Contains predicate on the "statement" field.
func StatementContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldStatement, v))
}

// StatementHasPrefix applies the HasPrefix predicate on the "statement" field.
func StatementHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldStatement, v))
}

// StatementHasSuffix applies the HasSuffix predicate on the "statement" field.
func StatementHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldStatement, v))
}

// StatementEqualFold applies the EqualFold predicate on the "statement" field.
func StatementEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldStatement, v))
}

// StatementContainsFold applies the ContainsFold predicate on the "statement" field.
func StatementContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldStatement, v))
}

// WorkbookIDEQ applies the EQ predicate on the "workbook_id" field.
func WorkbookIDEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldWorkbookID, v))
}

// WorkbookIDNEQ applies the NEQ predicate on the "workbook_id" field.
func WorkbookIDNEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldWorkbookID, v))
}

// WorkbookIDIn applies the In predicate on the "workbook_id" field.
func WorkbookIDIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldWorkbookID, vs...))
}

// WorkbookIDNotIn applies the NotIn predicate on the "workbook_id" field.
func WorkbookIDNotIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldWorkbookID, vs...))
}

// WorkbookCategoryIDEQ applies the EQ predicate on the "workbook_category_id" field.
func WorkbookCategoryIDEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldWorkbookCategoryID, v))
}

// WorkbookCategoryIDNEQ applies the NEQ predicate on the "workbook_category_id" field.
func WorkbookCategoryIDNEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldWorkbookCategoryID, v))
}

// WorkbookCategoryIDIn applies the In predicate on the "workbook_category_id" field.
func WorkbookCategoryIDIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldWorkbookCategoryID, vs...))
}

// WorkbookCategoryIDNotIn applies the NotIn predicate on the "workbook_category_id" field.
func WorkbookCategoryIDNotIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldWorkbookCategoryID, vs...))
}

// WorkbookCategoryIDIsNil applies the IsNil predicate on the "workbook_category_id" field.
func WorkbookCategoryIDIsNil() predicate.Problem {
	return predicate.Problem(sql.FieldIsNull(FieldWorkbookCategoryID))
}

// WorkbookCategoryIDNotNil applies the NotNil predicate on the "workbook_category_id" field.
func WorkbookCategoryIDNotNil() predicate.Problem {
	return predicate.Problem(sql.FieldNotNull(FieldWorkbookCategoryID))
}

// WorkbookCategoryDetailIDEQ applies the EQ predicate on the "workbook_category_detail_id" field.
func WorkbookCategoryDetailIDEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldWorkbookCategoryDetailID, v))
}

// WorkbookCategoryDetailIDNEQ applies the NEQ predicate on the "workbook_category_detail_id" field.
func WorkbookCategoryDetailIDNEQ(v uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldWorkbookCategoryDetailID, v))
}

// WorkbookCategoryDetailIDIn applies the In predicate on the "workbook_category_detail_id" field.
func WorkbookCategoryDetailIDIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldWorkbookCategoryDetailID, vs...))
}

// WorkbookCategoryDetailIDNotIn applies the NotIn predicate on the "workbook_category_detail_id" field.
func WorkbookCategoryDetailIDNotIn(vs ...uuid.UUID) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldWorkbookCategoryDetailID, vs...))
}

// WorkbookCategoryDetailIDIsNil applies the IsNil predicate on the "workbook_category_detail_id" field.
func WorkbookCategoryDetailIDIsNil() predicate.Problem {
	return predicate.Problem(sql.FieldIsNull(FieldWorkbookCategoryDetailID))
}

// WorkbookCategoryDetailIDNotNil applies the NotNil predicate on the "workbook_category_detail_id" field.
func WorkbookCategoryDetailIDNotNil() predicate.Problem {
	return predicate.Problem(sql.FieldNotNull(FieldWorkbookCategoryDetailID))
}

// HasAnswerType applies the HasEdge predicate on the "answer_type" edge.
func HasAnswerType() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AnswerTypeTable, AnswerTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerTypeWith applies the HasEdge predicate on the "answer_type" edge with a given conditions (other predicates).
func HasAnswerTypeWith(preds ...predicate.AnswerType) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerDescriptions applies the HasEdge predicate on the "answer_descriptions" edge.
func HasAnswerDescriptions() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AnswerDescriptionsTable, AnswerDescriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerDescriptionsWith applies the HasEdge predicate on the "answer_descriptions" edge with a given conditions (other predicates).
func HasAnswerDescriptionsWith(preds ...predicate.AnswerDescription) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerDescriptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerMultiChoices applies the HasEdge predicate on the "answer_multi_choices" edge.
func HasAnswerMultiChoices() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerMultiChoicesTable, AnswerMultiChoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerMultiChoicesWith applies the HasEdge predicate on the "answer_multi_choices" edge with a given conditions (other predicates).
func HasAnswerMultiChoicesWith(preds ...predicate.AnswerMultiChoices) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerMultiChoicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerTruths applies the HasEdge predicate on the "answer_truths" edge.
func HasAnswerTruths() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AnswerTruthsTable, AnswerTruthsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerTruthsWith applies the HasEdge predicate on the "answer_truths" edge with a given conditions (other predicates).
func HasAnswerTruthsWith(preds ...predicate.AnswerTruth) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerTruthsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkbook applies the HasEdge predicate on the "workbook" edge.
func HasWorkbook() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkbookTable, WorkbookColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkbookWith applies the HasEdge predicate on the "workbook" edge with a given conditions (other predicates).
func HasWorkbookWith(preds ...predicate.Workbook) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newWorkbookStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkbookCategory applies the HasEdge predicate on the "workbook_category" edge.
func HasWorkbookCategory() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkbookCategoryTable, WorkbookCategoryColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkbookCategoryWith applies the HasEdge predicate on the "workbook_category" edge with a given conditions (other predicates).
func HasWorkbookCategoryWith(preds ...predicate.WorkbookCategory) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newWorkbookCategoryStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkbookCategoryDetail applies the HasEdge predicate on the "workbook_category_detail" edge.
func HasWorkbookCategoryDetail() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, WorkbookCategoryDetailTable, WorkbookCategoryDetailColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkbookCategoryDetailWith applies the HasEdge predicate on the "workbook_category_detail" edge with a given conditions (other predicates).
func HasWorkbookCategoryDetailWith(preds ...predicate.WorkbookCategoryDetail) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newWorkbookCategoryDetailStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.NotPredicates(p))
}
