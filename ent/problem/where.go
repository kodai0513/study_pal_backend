// Code generated by ent, DO NOT EDIT.

package problem

import (
	"study-pal-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldID, id))
}

// AnswerTypeID applies equality check predicate on the "answer_type_id" field. It's identical to AnswerTypeIDEQ.
func AnswerTypeID(v int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldAnswerTypeID, v))
}

// Statement applies equality check predicate on the "statement" field. It's identical to StatementEQ.
func Statement(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldStatement, v))
}

// AnswerTypeIDEQ applies the EQ predicate on the "answer_type_id" field.
func AnswerTypeIDEQ(v int) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldAnswerTypeID, v))
}

// AnswerTypeIDNEQ applies the NEQ predicate on the "answer_type_id" field.
func AnswerTypeIDNEQ(v int) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldAnswerTypeID, v))
}

// AnswerTypeIDIn applies the In predicate on the "answer_type_id" field.
func AnswerTypeIDIn(vs ...int) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldAnswerTypeID, vs...))
}

// AnswerTypeIDNotIn applies the NotIn predicate on the "answer_type_id" field.
func AnswerTypeIDNotIn(vs ...int) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldAnswerTypeID, vs...))
}

// StatementEQ applies the EQ predicate on the "statement" field.
func StatementEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEQ(FieldStatement, v))
}

// StatementNEQ applies the NEQ predicate on the "statement" field.
func StatementNEQ(v string) predicate.Problem {
	return predicate.Problem(sql.FieldNEQ(FieldStatement, v))
}

// StatementIn applies the In predicate on the "statement" field.
func StatementIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldIn(FieldStatement, vs...))
}

// StatementNotIn applies the NotIn predicate on the "statement" field.
func StatementNotIn(vs ...string) predicate.Problem {
	return predicate.Problem(sql.FieldNotIn(FieldStatement, vs...))
}

// StatementGT applies the GT predicate on the "statement" field.
func StatementGT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGT(FieldStatement, v))
}

// StatementGTE applies the GTE predicate on the "statement" field.
func StatementGTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldGTE(FieldStatement, v))
}

// StatementLT applies the LT predicate on the "statement" field.
func StatementLT(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLT(FieldStatement, v))
}

// StatementLTE applies the LTE predicate on the "statement" field.
func StatementLTE(v string) predicate.Problem {
	return predicate.Problem(sql.FieldLTE(FieldStatement, v))
}

// StatementContains applies the Contains predicate on the "statement" field.
func StatementContains(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContains(FieldStatement, v))
}

// StatementHasPrefix applies the HasPrefix predicate on the "statement" field.
func StatementHasPrefix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasPrefix(FieldStatement, v))
}

// StatementHasSuffix applies the HasSuffix predicate on the "statement" field.
func StatementHasSuffix(v string) predicate.Problem {
	return predicate.Problem(sql.FieldHasSuffix(FieldStatement, v))
}

// StatementEqualFold applies the EqualFold predicate on the "statement" field.
func StatementEqualFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldEqualFold(FieldStatement, v))
}

// StatementContainsFold applies the ContainsFold predicate on the "statement" field.
func StatementContainsFold(v string) predicate.Problem {
	return predicate.Problem(sql.FieldContainsFold(FieldStatement, v))
}

// HasAnswerType applies the HasEdge predicate on the "answer_type" edge.
func HasAnswerType() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AnswerTypeTable, AnswerTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerTypeWith applies the HasEdge predicate on the "answer_type" edge with a given conditions (other predicates).
func HasAnswerTypeWith(preds ...predicate.AnswerType) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerTypeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerDescriptions applies the HasEdge predicate on the "answer_descriptions" edge.
func HasAnswerDescriptions() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerDescriptionsTable, AnswerDescriptionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerDescriptionsWith applies the HasEdge predicate on the "answer_descriptions" edge with a given conditions (other predicates).
func HasAnswerDescriptionsWith(preds ...predicate.AnswerDescription) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerDescriptionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerMultiChoices applies the HasEdge predicate on the "answer_multi_choices" edge.
func HasAnswerMultiChoices() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerMultiChoicesTable, AnswerMultiChoicesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerMultiChoicesWith applies the HasEdge predicate on the "answer_multi_choices" edge with a given conditions (other predicates).
func HasAnswerMultiChoicesWith(preds ...predicate.AnswerMultiChoices) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerMultiChoicesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAnswerTruths applies the HasEdge predicate on the "answer_truths" edge.
func HasAnswerTruths() predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AnswerTruthsTable, AnswerTruthsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAnswerTruthsWith applies the HasEdge predicate on the "answer_truths" edge with a given conditions (other predicates).
func HasAnswerTruthsWith(preds ...predicate.AnswerTruth) predicate.Problem {
	return predicate.Problem(func(s *sql.Selector) {
		step := newAnswerTruthsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Problem) predicate.Problem {
	return predicate.Problem(sql.NotPredicates(p))
}
