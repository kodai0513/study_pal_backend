// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookmember"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkbookMember is the model entity for the WorkbookMember schema.
type WorkbookMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID int `json:"role_id,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID int `json:"member_id,omitempty"`
	// WorkbookID holds the value of the "workbook_id" field.
	WorkbookID int `json:"workbook_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkbookMemberQuery when eager-loading is set.
	Edges        WorkbookMemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkbookMemberEdges holds the relations/edges for other nodes in the graph.
type WorkbookMemberEdges struct {
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// Member holds the value of the member edge.
	Member *User `json:"member,omitempty"`
	// Workbook holds the value of the workbook edge.
	Workbook *Workbook `json:"workbook,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookMemberEdges) RoleOrErr() (*Role, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookMemberEdges) MemberOrErr() (*User, error) {
	if e.Member != nil {
		return e.Member, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "member"}
}

// WorkbookOrErr returns the Workbook value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookMemberEdges) WorkbookOrErr() (*Workbook, error) {
	if e.Workbook != nil {
		return e.Workbook, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: workbook.Label}
	}
	return nil, &NotLoadedError{edge: "workbook"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkbookMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbookmember.FieldID, workbookmember.FieldRoleID, workbookmember.FieldMemberID, workbookmember.FieldWorkbookID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkbookMember fields.
func (wm *WorkbookMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbookmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wm.ID = int(value.Int64)
		case workbookmember.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				wm.RoleID = int(value.Int64)
			}
		case workbookmember.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				wm.MemberID = int(value.Int64)
			}
		case workbookmember.FieldWorkbookID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_id", values[i])
			} else if value.Valid {
				wm.WorkbookID = int(value.Int64)
			}
		default:
			wm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkbookMember.
// This includes values selected through modifiers, order, etc.
func (wm *WorkbookMember) Value(name string) (ent.Value, error) {
	return wm.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the WorkbookMember entity.
func (wm *WorkbookMember) QueryRole() *RoleQuery {
	return NewWorkbookMemberClient(wm.config).QueryRole(wm)
}

// QueryMember queries the "member" edge of the WorkbookMember entity.
func (wm *WorkbookMember) QueryMember() *UserQuery {
	return NewWorkbookMemberClient(wm.config).QueryMember(wm)
}

// QueryWorkbook queries the "workbook" edge of the WorkbookMember entity.
func (wm *WorkbookMember) QueryWorkbook() *WorkbookQuery {
	return NewWorkbookMemberClient(wm.config).QueryWorkbook(wm)
}

// Update returns a builder for updating this WorkbookMember.
// Note that you need to call WorkbookMember.Unwrap() before calling this method if this WorkbookMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (wm *WorkbookMember) Update() *WorkbookMemberUpdateOne {
	return NewWorkbookMemberClient(wm.config).UpdateOne(wm)
}

// Unwrap unwraps the WorkbookMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wm *WorkbookMember) Unwrap() *WorkbookMember {
	_tx, ok := wm.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkbookMember is not a transactional entity")
	}
	wm.config.driver = _tx.drv
	return wm
}

// String implements the fmt.Stringer.
func (wm *WorkbookMember) String() string {
	var builder strings.Builder
	builder.WriteString("WorkbookMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wm.ID))
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", wm.RoleID))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", wm.MemberID))
	builder.WriteString(", ")
	builder.WriteString("workbook_id=")
	builder.WriteString(fmt.Sprintf("%v", wm.WorkbookID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkbookMembers is a parsable slice of WorkbookMember.
type WorkbookMembers []*WorkbookMember
