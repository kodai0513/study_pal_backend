// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/answertruth"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnswerTruthUpdate is the builder for updating AnswerTruth entities.
type AnswerTruthUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerTruthMutation
}

// Where appends a list predicates to the AnswerTruthUpdate builder.
func (atu *AnswerTruthUpdate) Where(ps ...predicate.AnswerTruth) *AnswerTruthUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetCreatedAt sets the "created_at" field.
func (atu *AnswerTruthUpdate) SetCreatedAt(t time.Time) *AnswerTruthUpdate {
	atu.mutation.SetCreatedAt(t)
	return atu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atu *AnswerTruthUpdate) SetNillableCreatedAt(t *time.Time) *AnswerTruthUpdate {
	if t != nil {
		atu.SetCreatedAt(*t)
	}
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AnswerTruthUpdate) SetUpdatedAt(t time.Time) *AnswerTruthUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetProblemID sets the "problem_id" field.
func (atu *AnswerTruthUpdate) SetProblemID(i int) *AnswerTruthUpdate {
	atu.mutation.SetProblemID(i)
	return atu
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (atu *AnswerTruthUpdate) SetNillableProblemID(i *int) *AnswerTruthUpdate {
	if i != nil {
		atu.SetProblemID(*i)
	}
	return atu
}

// SetTruth sets the "truth" field.
func (atu *AnswerTruthUpdate) SetTruth(b bool) *AnswerTruthUpdate {
	atu.mutation.SetTruth(b)
	return atu
}

// SetNillableTruth sets the "truth" field if the given value is not nil.
func (atu *AnswerTruthUpdate) SetNillableTruth(b *bool) *AnswerTruthUpdate {
	if b != nil {
		atu.SetTruth(*b)
	}
	return atu
}

// SetProblem sets the "problem" edge to the Problem entity.
func (atu *AnswerTruthUpdate) SetProblem(p *Problem) *AnswerTruthUpdate {
	return atu.SetProblemID(p.ID)
}

// Mutation returns the AnswerTruthMutation object of the builder.
func (atu *AnswerTruthUpdate) Mutation() *AnswerTruthMutation {
	return atu.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (atu *AnswerTruthUpdate) ClearProblem() *AnswerTruthUpdate {
	atu.mutation.ClearProblem()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AnswerTruthUpdate) Save(ctx context.Context) (int, error) {
	atu.defaults()
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AnswerTruthUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AnswerTruthUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AnswerTruthUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AnswerTruthUpdate) defaults() {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		v := answertruth.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atu *AnswerTruthUpdate) check() error {
	if atu.mutation.ProblemCleared() && len(atu.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerTruth.problem"`)
	}
	return nil
}

func (atu *AnswerTruthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(answertruth.Table, answertruth.Columns, sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.CreatedAt(); ok {
		_spec.SetField(answertruth.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(answertruth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.Truth(); ok {
		_spec.SetField(answertruth.FieldTruth, field.TypeBool, value)
	}
	if atu.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answertruth.ProblemTable,
			Columns: []string{answertruth.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answertruth.ProblemTable,
			Columns: []string{answertruth.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answertruth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AnswerTruthUpdateOne is the builder for updating a single AnswerTruth entity.
type AnswerTruthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnswerTruthMutation
}

// SetCreatedAt sets the "created_at" field.
func (atuo *AnswerTruthUpdateOne) SetCreatedAt(t time.Time) *AnswerTruthUpdateOne {
	atuo.mutation.SetCreatedAt(t)
	return atuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atuo *AnswerTruthUpdateOne) SetNillableCreatedAt(t *time.Time) *AnswerTruthUpdateOne {
	if t != nil {
		atuo.SetCreatedAt(*t)
	}
	return atuo
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AnswerTruthUpdateOne) SetUpdatedAt(t time.Time) *AnswerTruthUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetProblemID sets the "problem_id" field.
func (atuo *AnswerTruthUpdateOne) SetProblemID(i int) *AnswerTruthUpdateOne {
	atuo.mutation.SetProblemID(i)
	return atuo
}

// SetNillableProblemID sets the "problem_id" field if the given value is not nil.
func (atuo *AnswerTruthUpdateOne) SetNillableProblemID(i *int) *AnswerTruthUpdateOne {
	if i != nil {
		atuo.SetProblemID(*i)
	}
	return atuo
}

// SetTruth sets the "truth" field.
func (atuo *AnswerTruthUpdateOne) SetTruth(b bool) *AnswerTruthUpdateOne {
	atuo.mutation.SetTruth(b)
	return atuo
}

// SetNillableTruth sets the "truth" field if the given value is not nil.
func (atuo *AnswerTruthUpdateOne) SetNillableTruth(b *bool) *AnswerTruthUpdateOne {
	if b != nil {
		atuo.SetTruth(*b)
	}
	return atuo
}

// SetProblem sets the "problem" edge to the Problem entity.
func (atuo *AnswerTruthUpdateOne) SetProblem(p *Problem) *AnswerTruthUpdateOne {
	return atuo.SetProblemID(p.ID)
}

// Mutation returns the AnswerTruthMutation object of the builder.
func (atuo *AnswerTruthUpdateOne) Mutation() *AnswerTruthMutation {
	return atuo.mutation
}

// ClearProblem clears the "problem" edge to the Problem entity.
func (atuo *AnswerTruthUpdateOne) ClearProblem() *AnswerTruthUpdateOne {
	atuo.mutation.ClearProblem()
	return atuo
}

// Where appends a list predicates to the AnswerTruthUpdate builder.
func (atuo *AnswerTruthUpdateOne) Where(ps ...predicate.AnswerTruth) *AnswerTruthUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AnswerTruthUpdateOne) Select(field string, fields ...string) *AnswerTruthUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AnswerTruth entity.
func (atuo *AnswerTruthUpdateOne) Save(ctx context.Context) (*AnswerTruth, error) {
	atuo.defaults()
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AnswerTruthUpdateOne) SaveX(ctx context.Context) *AnswerTruth {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AnswerTruthUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AnswerTruthUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AnswerTruthUpdateOne) defaults() {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		v := answertruth.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AnswerTruthUpdateOne) check() error {
	if atuo.mutation.ProblemCleared() && len(atuo.mutation.ProblemIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AnswerTruth.problem"`)
	}
	return nil
}

func (atuo *AnswerTruthUpdateOne) sqlSave(ctx context.Context) (_node *AnswerTruth, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(answertruth.Table, answertruth.Columns, sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AnswerTruth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, answertruth.FieldID)
		for _, f := range fields {
			if !answertruth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != answertruth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.CreatedAt(); ok {
		_spec.SetField(answertruth.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(answertruth.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.Truth(); ok {
		_spec.SetField(answertruth.FieldTruth, field.TypeBool, value)
	}
	if atuo.mutation.ProblemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answertruth.ProblemTable,
			Columns: []string{answertruth.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.ProblemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answertruth.ProblemTable,
			Columns: []string{answertruth.ProblemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnswerTruth{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answertruth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
