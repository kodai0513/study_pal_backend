// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategorydetail"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TrueOrFalseProblemQuery is the builder for querying TrueOrFalseProblem entities.
type TrueOrFalseProblemQuery struct {
	config
	ctx                        *QueryContext
	order                      []trueorfalseproblem.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.TrueOrFalseProblem
	withWorkbook               *WorkbookQuery
	withWorkbookCategory       *WorkbookCategoryQuery
	withWorkbookCategoryDetail *WorkbookCategoryDetailQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TrueOrFalseProblemQuery builder.
func (tofpq *TrueOrFalseProblemQuery) Where(ps ...predicate.TrueOrFalseProblem) *TrueOrFalseProblemQuery {
	tofpq.predicates = append(tofpq.predicates, ps...)
	return tofpq
}

// Limit the number of records to be returned by this query.
func (tofpq *TrueOrFalseProblemQuery) Limit(limit int) *TrueOrFalseProblemQuery {
	tofpq.ctx.Limit = &limit
	return tofpq
}

// Offset to start from.
func (tofpq *TrueOrFalseProblemQuery) Offset(offset int) *TrueOrFalseProblemQuery {
	tofpq.ctx.Offset = &offset
	return tofpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tofpq *TrueOrFalseProblemQuery) Unique(unique bool) *TrueOrFalseProblemQuery {
	tofpq.ctx.Unique = &unique
	return tofpq
}

// Order specifies how the records should be ordered.
func (tofpq *TrueOrFalseProblemQuery) Order(o ...trueorfalseproblem.OrderOption) *TrueOrFalseProblemQuery {
	tofpq.order = append(tofpq.order, o...)
	return tofpq
}

// QueryWorkbook chains the current query on the "workbook" edge.
func (tofpq *TrueOrFalseProblemQuery) QueryWorkbook() *WorkbookQuery {
	query := (&WorkbookClient{config: tofpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tofpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tofpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trueorfalseproblem.Table, trueorfalseproblem.FieldID, selector),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trueorfalseproblem.WorkbookTable, trueorfalseproblem.WorkbookColumn),
		)
		fromU = sqlgraph.SetNeighbors(tofpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkbookCategory chains the current query on the "workbook_category" edge.
func (tofpq *TrueOrFalseProblemQuery) QueryWorkbookCategory() *WorkbookCategoryQuery {
	query := (&WorkbookCategoryClient{config: tofpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tofpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tofpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trueorfalseproblem.Table, trueorfalseproblem.FieldID, selector),
			sqlgraph.To(workbookcategory.Table, workbookcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trueorfalseproblem.WorkbookCategoryTable, trueorfalseproblem.WorkbookCategoryColumn),
		)
		fromU = sqlgraph.SetNeighbors(tofpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkbookCategoryDetail chains the current query on the "workbook_category_detail" edge.
func (tofpq *TrueOrFalseProblemQuery) QueryWorkbookCategoryDetail() *WorkbookCategoryDetailQuery {
	query := (&WorkbookCategoryDetailClient{config: tofpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tofpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tofpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trueorfalseproblem.Table, trueorfalseproblem.FieldID, selector),
			sqlgraph.To(workbookcategorydetail.Table, workbookcategorydetail.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trueorfalseproblem.WorkbookCategoryDetailTable, trueorfalseproblem.WorkbookCategoryDetailColumn),
		)
		fromU = sqlgraph.SetNeighbors(tofpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TrueOrFalseProblem entity from the query.
// Returns a *NotFoundError when no TrueOrFalseProblem was found.
func (tofpq *TrueOrFalseProblemQuery) First(ctx context.Context) (*TrueOrFalseProblem, error) {
	nodes, err := tofpq.Limit(1).All(setContextOp(ctx, tofpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{trueorfalseproblem.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) FirstX(ctx context.Context) *TrueOrFalseProblem {
	node, err := tofpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TrueOrFalseProblem ID from the query.
// Returns a *NotFoundError when no TrueOrFalseProblem ID was found.
func (tofpq *TrueOrFalseProblemQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tofpq.Limit(1).IDs(setContextOp(ctx, tofpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{trueorfalseproblem.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := tofpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TrueOrFalseProblem entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TrueOrFalseProblem entity is found.
// Returns a *NotFoundError when no TrueOrFalseProblem entities are found.
func (tofpq *TrueOrFalseProblemQuery) Only(ctx context.Context) (*TrueOrFalseProblem, error) {
	nodes, err := tofpq.Limit(2).All(setContextOp(ctx, tofpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{trueorfalseproblem.Label}
	default:
		return nil, &NotSingularError{trueorfalseproblem.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) OnlyX(ctx context.Context) *TrueOrFalseProblem {
	node, err := tofpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TrueOrFalseProblem ID in the query.
// Returns a *NotSingularError when more than one TrueOrFalseProblem ID is found.
// Returns a *NotFoundError when no entities are found.
func (tofpq *TrueOrFalseProblemQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = tofpq.Limit(2).IDs(setContextOp(ctx, tofpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{trueorfalseproblem.Label}
	default:
		err = &NotSingularError{trueorfalseproblem.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := tofpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TrueOrFalseProblems.
func (tofpq *TrueOrFalseProblemQuery) All(ctx context.Context) ([]*TrueOrFalseProblem, error) {
	ctx = setContextOp(ctx, tofpq.ctx, ent.OpQueryAll)
	if err := tofpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TrueOrFalseProblem, *TrueOrFalseProblemQuery]()
	return withInterceptors[[]*TrueOrFalseProblem](ctx, tofpq, qr, tofpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) AllX(ctx context.Context) []*TrueOrFalseProblem {
	nodes, err := tofpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TrueOrFalseProblem IDs.
func (tofpq *TrueOrFalseProblemQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if tofpq.ctx.Unique == nil && tofpq.path != nil {
		tofpq.Unique(true)
	}
	ctx = setContextOp(ctx, tofpq.ctx, ent.OpQueryIDs)
	if err = tofpq.Select(trueorfalseproblem.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := tofpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tofpq *TrueOrFalseProblemQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tofpq.ctx, ent.OpQueryCount)
	if err := tofpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tofpq, querierCount[*TrueOrFalseProblemQuery](), tofpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) CountX(ctx context.Context) int {
	count, err := tofpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tofpq *TrueOrFalseProblemQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tofpq.ctx, ent.OpQueryExist)
	switch _, err := tofpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tofpq *TrueOrFalseProblemQuery) ExistX(ctx context.Context) bool {
	exist, err := tofpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TrueOrFalseProblemQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tofpq *TrueOrFalseProblemQuery) Clone() *TrueOrFalseProblemQuery {
	if tofpq == nil {
		return nil
	}
	return &TrueOrFalseProblemQuery{
		config:                     tofpq.config,
		ctx:                        tofpq.ctx.Clone(),
		order:                      append([]trueorfalseproblem.OrderOption{}, tofpq.order...),
		inters:                     append([]Interceptor{}, tofpq.inters...),
		predicates:                 append([]predicate.TrueOrFalseProblem{}, tofpq.predicates...),
		withWorkbook:               tofpq.withWorkbook.Clone(),
		withWorkbookCategory:       tofpq.withWorkbookCategory.Clone(),
		withWorkbookCategoryDetail: tofpq.withWorkbookCategoryDetail.Clone(),
		// clone intermediate query.
		sql:  tofpq.sql.Clone(),
		path: tofpq.path,
	}
}

// WithWorkbook tells the query-builder to eager-load the nodes that are connected to
// the "workbook" edge. The optional arguments are used to configure the query builder of the edge.
func (tofpq *TrueOrFalseProblemQuery) WithWorkbook(opts ...func(*WorkbookQuery)) *TrueOrFalseProblemQuery {
	query := (&WorkbookClient{config: tofpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tofpq.withWorkbook = query
	return tofpq
}

// WithWorkbookCategory tells the query-builder to eager-load the nodes that are connected to
// the "workbook_category" edge. The optional arguments are used to configure the query builder of the edge.
func (tofpq *TrueOrFalseProblemQuery) WithWorkbookCategory(opts ...func(*WorkbookCategoryQuery)) *TrueOrFalseProblemQuery {
	query := (&WorkbookCategoryClient{config: tofpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tofpq.withWorkbookCategory = query
	return tofpq
}

// WithWorkbookCategoryDetail tells the query-builder to eager-load the nodes that are connected to
// the "workbook_category_detail" edge. The optional arguments are used to configure the query builder of the edge.
func (tofpq *TrueOrFalseProblemQuery) WithWorkbookCategoryDetail(opts ...func(*WorkbookCategoryDetailQuery)) *TrueOrFalseProblemQuery {
	query := (&WorkbookCategoryDetailClient{config: tofpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tofpq.withWorkbookCategoryDetail = query
	return tofpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TrueOrFalseProblem.Query().
//		GroupBy(trueorfalseproblem.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tofpq *TrueOrFalseProblemQuery) GroupBy(field string, fields ...string) *TrueOrFalseProblemGroupBy {
	tofpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TrueOrFalseProblemGroupBy{build: tofpq}
	grbuild.flds = &tofpq.ctx.Fields
	grbuild.label = trueorfalseproblem.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TrueOrFalseProblem.Query().
//		Select(trueorfalseproblem.FieldCreatedAt).
//		Scan(ctx, &v)
func (tofpq *TrueOrFalseProblemQuery) Select(fields ...string) *TrueOrFalseProblemSelect {
	tofpq.ctx.Fields = append(tofpq.ctx.Fields, fields...)
	sbuild := &TrueOrFalseProblemSelect{TrueOrFalseProblemQuery: tofpq}
	sbuild.label = trueorfalseproblem.Label
	sbuild.flds, sbuild.scan = &tofpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TrueOrFalseProblemSelect configured with the given aggregations.
func (tofpq *TrueOrFalseProblemQuery) Aggregate(fns ...AggregateFunc) *TrueOrFalseProblemSelect {
	return tofpq.Select().Aggregate(fns...)
}

func (tofpq *TrueOrFalseProblemQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tofpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tofpq); err != nil {
				return err
			}
		}
	}
	for _, f := range tofpq.ctx.Fields {
		if !trueorfalseproblem.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tofpq.path != nil {
		prev, err := tofpq.path(ctx)
		if err != nil {
			return err
		}
		tofpq.sql = prev
	}
	return nil
}

func (tofpq *TrueOrFalseProblemQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TrueOrFalseProblem, error) {
	var (
		nodes       = []*TrueOrFalseProblem{}
		_spec       = tofpq.querySpec()
		loadedTypes = [3]bool{
			tofpq.withWorkbook != nil,
			tofpq.withWorkbookCategory != nil,
			tofpq.withWorkbookCategoryDetail != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TrueOrFalseProblem).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TrueOrFalseProblem{config: tofpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tofpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tofpq.withWorkbook; query != nil {
		if err := tofpq.loadWorkbook(ctx, query, nodes, nil,
			func(n *TrueOrFalseProblem, e *Workbook) { n.Edges.Workbook = e }); err != nil {
			return nil, err
		}
	}
	if query := tofpq.withWorkbookCategory; query != nil {
		if err := tofpq.loadWorkbookCategory(ctx, query, nodes, nil,
			func(n *TrueOrFalseProblem, e *WorkbookCategory) { n.Edges.WorkbookCategory = e }); err != nil {
			return nil, err
		}
	}
	if query := tofpq.withWorkbookCategoryDetail; query != nil {
		if err := tofpq.loadWorkbookCategoryDetail(ctx, query, nodes, nil,
			func(n *TrueOrFalseProblem, e *WorkbookCategoryDetail) { n.Edges.WorkbookCategoryDetail = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tofpq *TrueOrFalseProblemQuery) loadWorkbook(ctx context.Context, query *WorkbookQuery, nodes []*TrueOrFalseProblem, init func(*TrueOrFalseProblem), assign func(*TrueOrFalseProblem, *Workbook)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TrueOrFalseProblem)
	for i := range nodes {
		fk := nodes[i].WorkbookID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbook.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workbook_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tofpq *TrueOrFalseProblemQuery) loadWorkbookCategory(ctx context.Context, query *WorkbookCategoryQuery, nodes []*TrueOrFalseProblem, init func(*TrueOrFalseProblem), assign func(*TrueOrFalseProblem, *WorkbookCategory)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TrueOrFalseProblem)
	for i := range nodes {
		if nodes[i].WorkbookCategoryID == nil {
			continue
		}
		fk := *nodes[i].WorkbookCategoryID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbookcategory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workbook_category_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tofpq *TrueOrFalseProblemQuery) loadWorkbookCategoryDetail(ctx context.Context, query *WorkbookCategoryDetailQuery, nodes []*TrueOrFalseProblem, init func(*TrueOrFalseProblem), assign func(*TrueOrFalseProblem, *WorkbookCategoryDetail)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*TrueOrFalseProblem)
	for i := range nodes {
		if nodes[i].WorkbookCategoryDetailID == nil {
			continue
		}
		fk := *nodes[i].WorkbookCategoryDetailID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbookcategorydetail.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workbook_category_detail_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tofpq *TrueOrFalseProblemQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tofpq.querySpec()
	_spec.Node.Columns = tofpq.ctx.Fields
	if len(tofpq.ctx.Fields) > 0 {
		_spec.Unique = tofpq.ctx.Unique != nil && *tofpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tofpq.driver, _spec)
}

func (tofpq *TrueOrFalseProblemQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(trueorfalseproblem.Table, trueorfalseproblem.Columns, sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID))
	_spec.From = tofpq.sql
	if unique := tofpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tofpq.path != nil {
		_spec.Unique = true
	}
	if fields := tofpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trueorfalseproblem.FieldID)
		for i := range fields {
			if fields[i] != trueorfalseproblem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tofpq.withWorkbook != nil {
			_spec.Node.AddColumnOnce(trueorfalseproblem.FieldWorkbookID)
		}
		if tofpq.withWorkbookCategory != nil {
			_spec.Node.AddColumnOnce(trueorfalseproblem.FieldWorkbookCategoryID)
		}
		if tofpq.withWorkbookCategoryDetail != nil {
			_spec.Node.AddColumnOnce(trueorfalseproblem.FieldWorkbookCategoryDetailID)
		}
	}
	if ps := tofpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tofpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tofpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tofpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tofpq *TrueOrFalseProblemQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tofpq.driver.Dialect())
	t1 := builder.Table(trueorfalseproblem.Table)
	columns := tofpq.ctx.Fields
	if len(columns) == 0 {
		columns = trueorfalseproblem.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tofpq.sql != nil {
		selector = tofpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tofpq.ctx.Unique != nil && *tofpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tofpq.predicates {
		p(selector)
	}
	for _, p := range tofpq.order {
		p(selector)
	}
	if offset := tofpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tofpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TrueOrFalseProblemGroupBy is the group-by builder for TrueOrFalseProblem entities.
type TrueOrFalseProblemGroupBy struct {
	selector
	build *TrueOrFalseProblemQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tofpgb *TrueOrFalseProblemGroupBy) Aggregate(fns ...AggregateFunc) *TrueOrFalseProblemGroupBy {
	tofpgb.fns = append(tofpgb.fns, fns...)
	return tofpgb
}

// Scan applies the selector query and scans the result into the given value.
func (tofpgb *TrueOrFalseProblemGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tofpgb.build.ctx, ent.OpQueryGroupBy)
	if err := tofpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrueOrFalseProblemQuery, *TrueOrFalseProblemGroupBy](ctx, tofpgb.build, tofpgb, tofpgb.build.inters, v)
}

func (tofpgb *TrueOrFalseProblemGroupBy) sqlScan(ctx context.Context, root *TrueOrFalseProblemQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tofpgb.fns))
	for _, fn := range tofpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tofpgb.flds)+len(tofpgb.fns))
		for _, f := range *tofpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tofpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tofpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TrueOrFalseProblemSelect is the builder for selecting fields of TrueOrFalseProblem entities.
type TrueOrFalseProblemSelect struct {
	*TrueOrFalseProblemQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tofps *TrueOrFalseProblemSelect) Aggregate(fns ...AggregateFunc) *TrueOrFalseProblemSelect {
	tofps.fns = append(tofps.fns, fns...)
	return tofps
}

// Scan applies the selector query and scans the result into the given value.
func (tofps *TrueOrFalseProblemSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tofps.ctx, ent.OpQuerySelect)
	if err := tofps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrueOrFalseProblemQuery, *TrueOrFalseProblemSelect](ctx, tofps.TrueOrFalseProblemQuery, tofps, tofps.inters, v)
}

func (tofps *TrueOrFalseProblemSelect) sqlScan(ctx context.Context, root *TrueOrFalseProblemQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tofps.fns))
	for _, fn := range tofps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tofps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tofps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
