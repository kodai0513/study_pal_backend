// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/answertruth"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AnswerTruth is the model entity for the AnswerTruth schema.
type AnswerTruth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Truth holds the value of the "truth" field.
	Truth                 bool `json:"truth,omitempty"`
	problem_answer_truths *int
	selectValues          sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnswerTruth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case answertruth.FieldTruth:
			values[i] = new(sql.NullBool)
		case answertruth.FieldID:
			values[i] = new(sql.NullInt64)
		case answertruth.ForeignKeys[0]: // problem_answer_truths
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnswerTruth fields.
func (at *AnswerTruth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case answertruth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			at.ID = int(value.Int64)
		case answertruth.FieldTruth:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field truth", values[i])
			} else if value.Valid {
				at.Truth = value.Bool
			}
		case answertruth.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field problem_answer_truths", value)
			} else if value.Valid {
				at.problem_answer_truths = new(int)
				*at.problem_answer_truths = int(value.Int64)
			}
		default:
			at.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AnswerTruth.
// This includes values selected through modifiers, order, etc.
func (at *AnswerTruth) Value(name string) (ent.Value, error) {
	return at.selectValues.Get(name)
}

// Update returns a builder for updating this AnswerTruth.
// Note that you need to call AnswerTruth.Unwrap() before calling this method if this AnswerTruth
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *AnswerTruth) Update() *AnswerTruthUpdateOne {
	return NewAnswerTruthClient(at.config).UpdateOne(at)
}

// Unwrap unwraps the AnswerTruth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *AnswerTruth) Unwrap() *AnswerTruth {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnswerTruth is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *AnswerTruth) String() string {
	var builder strings.Builder
	builder.WriteString("AnswerTruth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("truth=")
	builder.WriteString(fmt.Sprintf("%v", at.Truth))
	builder.WriteByte(')')
	return builder.String()
}

// AnswerTruths is a parsable slice of AnswerTruth.
type AnswerTruths []*AnswerTruth
