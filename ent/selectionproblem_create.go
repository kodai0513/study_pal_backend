// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// SelectionProblemCreate is the builder for creating a SelectionProblem entity.
type SelectionProblemCreate struct {
	config
	mutation *SelectionProblemMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (spc *SelectionProblemCreate) SetCreatedAt(t time.Time) *SelectionProblemCreate {
	spc.mutation.SetCreatedAt(t)
	return spc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (spc *SelectionProblemCreate) SetNillableCreatedAt(t *time.Time) *SelectionProblemCreate {
	if t != nil {
		spc.SetCreatedAt(*t)
	}
	return spc
}

// SetUpdatedAt sets the "updated_at" field.
func (spc *SelectionProblemCreate) SetUpdatedAt(t time.Time) *SelectionProblemCreate {
	spc.mutation.SetUpdatedAt(t)
	return spc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spc *SelectionProblemCreate) SetNillableUpdatedAt(t *time.Time) *SelectionProblemCreate {
	if t != nil {
		spc.SetUpdatedAt(*t)
	}
	return spc
}

// SetStatement sets the "statement" field.
func (spc *SelectionProblemCreate) SetStatement(s string) *SelectionProblemCreate {
	spc.mutation.SetStatement(s)
	return spc
}

// SetWorkbookID sets the "workbook_id" field.
func (spc *SelectionProblemCreate) SetWorkbookID(u uuid.UUID) *SelectionProblemCreate {
	spc.mutation.SetWorkbookID(u)
	return spc
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (spc *SelectionProblemCreate) SetWorkbookCategoryID(u uuid.UUID) *SelectionProblemCreate {
	spc.mutation.SetWorkbookCategoryID(u)
	return spc
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (spc *SelectionProblemCreate) SetNillableWorkbookCategoryID(u *uuid.UUID) *SelectionProblemCreate {
	if u != nil {
		spc.SetWorkbookCategoryID(*u)
	}
	return spc
}

// SetID sets the "id" field.
func (spc *SelectionProblemCreate) SetID(u uuid.UUID) *SelectionProblemCreate {
	spc.mutation.SetID(u)
	return spc
}

// AddSelectionProblemAnswerIDs adds the "selection_problem_answers" edge to the SelectionProblemAnswer entity by IDs.
func (spc *SelectionProblemCreate) AddSelectionProblemAnswerIDs(ids ...uuid.UUID) *SelectionProblemCreate {
	spc.mutation.AddSelectionProblemAnswerIDs(ids...)
	return spc
}

// AddSelectionProblemAnswers adds the "selection_problem_answers" edges to the SelectionProblemAnswer entity.
func (spc *SelectionProblemCreate) AddSelectionProblemAnswers(s ...*SelectionProblemAnswer) *SelectionProblemCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return spc.AddSelectionProblemAnswerIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (spc *SelectionProblemCreate) SetWorkbook(w *Workbook) *SelectionProblemCreate {
	return spc.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (spc *SelectionProblemCreate) SetWorkbookCategory(w *WorkbookCategory) *SelectionProblemCreate {
	return spc.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the SelectionProblemMutation object of the builder.
func (spc *SelectionProblemCreate) Mutation() *SelectionProblemMutation {
	return spc.mutation
}

// Save creates the SelectionProblem in the database.
func (spc *SelectionProblemCreate) Save(ctx context.Context) (*SelectionProblem, error) {
	spc.defaults()
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SelectionProblemCreate) SaveX(ctx context.Context) *SelectionProblem {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SelectionProblemCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SelectionProblemCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spc *SelectionProblemCreate) defaults() {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		v := selectionproblem.DefaultCreatedAt()
		spc.mutation.SetCreatedAt(v)
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		v := selectionproblem.DefaultUpdatedAt()
		spc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SelectionProblemCreate) check() error {
	if _, ok := spc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SelectionProblem.created_at"`)}
	}
	if _, ok := spc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "SelectionProblem.updated_at"`)}
	}
	if _, ok := spc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "SelectionProblem.statement"`)}
	}
	if v, ok := spc.mutation.Statement(); ok {
		if err := selectionproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "SelectionProblem.statement": %w`, err)}
		}
	}
	if _, ok := spc.mutation.WorkbookID(); !ok {
		return &ValidationError{Name: "workbook_id", err: errors.New(`ent: missing required field "SelectionProblem.workbook_id"`)}
	}
	if len(spc.mutation.WorkbookIDs()) == 0 {
		return &ValidationError{Name: "workbook", err: errors.New(`ent: missing required edge "SelectionProblem.workbook"`)}
	}
	return nil
}

func (spc *SelectionProblemCreate) sqlSave(ctx context.Context) (*SelectionProblem, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SelectionProblemCreate) createSpec() (*SelectionProblem, *sqlgraph.CreateSpec) {
	var (
		_node = &SelectionProblem{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(selectionproblem.Table, sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID))
	)
	if id, ok := spc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := spc.mutation.CreatedAt(); ok {
		_spec.SetField(selectionproblem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := spc.mutation.UpdatedAt(); ok {
		_spec.SetField(selectionproblem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := spc.mutation.Statement(); ok {
		_spec.SetField(selectionproblem.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if nodes := spc.mutation.SelectionProblemAnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   selectionproblem.SelectionProblemAnswersTable,
			Columns: []string{selectionproblem.SelectionProblemAnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblemanswer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookTable,
			Columns: []string{selectionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := spc.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   selectionproblem.WorkbookCategoryTable,
			Columns: []string{selectionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookCategoryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SelectionProblemCreateBulk is the builder for creating many SelectionProblem entities in bulk.
type SelectionProblemCreateBulk struct {
	config
	err      error
	builders []*SelectionProblemCreate
}

// Save creates the SelectionProblem entities in the database.
func (spcb *SelectionProblemCreateBulk) Save(ctx context.Context) ([]*SelectionProblem, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SelectionProblem, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SelectionProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SelectionProblemCreateBulk) SaveX(ctx context.Context) []*SelectionProblem {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SelectionProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SelectionProblemCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}
