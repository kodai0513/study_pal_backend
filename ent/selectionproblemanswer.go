// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/selectionproblemanswer"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SelectionProblemAnswer is the model entity for the SelectionProblemAnswer schema.
type SelectionProblemAnswer struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// IsCorrect holds the value of the "is_correct" field.
	IsCorrect bool `json:"is_correct,omitempty"`
	// SelectionProblemID holds the value of the "selection_problem_id" field.
	SelectionProblemID uuid.UUID `json:"selection_problem_id,omitempty"`
	// Statement holds the value of the "statement" field.
	Statement string `json:"statement,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SelectionProblemAnswerQuery when eager-loading is set.
	Edges        SelectionProblemAnswerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SelectionProblemAnswerEdges holds the relations/edges for other nodes in the graph.
type SelectionProblemAnswerEdges struct {
	// SelectionProblem holds the value of the selection_problem edge.
	SelectionProblem *SelectionProblem `json:"selection_problem,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SelectionProblemOrErr returns the SelectionProblem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SelectionProblemAnswerEdges) SelectionProblemOrErr() (*SelectionProblem, error) {
	if e.SelectionProblem != nil {
		return e.SelectionProblem, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: selectionproblem.Label}
	}
	return nil, &NotLoadedError{edge: "selection_problem"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SelectionProblemAnswer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case selectionproblemanswer.FieldIsCorrect:
			values[i] = new(sql.NullBool)
		case selectionproblemanswer.FieldStatement:
			values[i] = new(sql.NullString)
		case selectionproblemanswer.FieldCreatedAt, selectionproblemanswer.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case selectionproblemanswer.FieldID, selectionproblemanswer.FieldSelectionProblemID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SelectionProblemAnswer fields.
func (spa *SelectionProblemAnswer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case selectionproblemanswer.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				spa.ID = *value
			}
		case selectionproblemanswer.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				spa.CreatedAt = value.Time
			}
		case selectionproblemanswer.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				spa.UpdatedAt = value.Time
			}
		case selectionproblemanswer.FieldIsCorrect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_correct", values[i])
			} else if value.Valid {
				spa.IsCorrect = value.Bool
			}
		case selectionproblemanswer.FieldSelectionProblemID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field selection_problem_id", values[i])
			} else if value != nil {
				spa.SelectionProblemID = *value
			}
		case selectionproblemanswer.FieldStatement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statement", values[i])
			} else if value.Valid {
				spa.Statement = value.String
			}
		default:
			spa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SelectionProblemAnswer.
// This includes values selected through modifiers, order, etc.
func (spa *SelectionProblemAnswer) Value(name string) (ent.Value, error) {
	return spa.selectValues.Get(name)
}

// QuerySelectionProblem queries the "selection_problem" edge of the SelectionProblemAnswer entity.
func (spa *SelectionProblemAnswer) QuerySelectionProblem() *SelectionProblemQuery {
	return NewSelectionProblemAnswerClient(spa.config).QuerySelectionProblem(spa)
}

// Update returns a builder for updating this SelectionProblemAnswer.
// Note that you need to call SelectionProblemAnswer.Unwrap() before calling this method if this SelectionProblemAnswer
// was returned from a transaction, and the transaction was committed or rolled back.
func (spa *SelectionProblemAnswer) Update() *SelectionProblemAnswerUpdateOne {
	return NewSelectionProblemAnswerClient(spa.config).UpdateOne(spa)
}

// Unwrap unwraps the SelectionProblemAnswer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (spa *SelectionProblemAnswer) Unwrap() *SelectionProblemAnswer {
	_tx, ok := spa.config.driver.(*txDriver)
	if !ok {
		panic("ent: SelectionProblemAnswer is not a transactional entity")
	}
	spa.config.driver = _tx.drv
	return spa
}

// String implements the fmt.Stringer.
func (spa *SelectionProblemAnswer) String() string {
	var builder strings.Builder
	builder.WriteString("SelectionProblemAnswer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", spa.ID))
	builder.WriteString("created_at=")
	builder.WriteString(spa.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(spa.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_correct=")
	builder.WriteString(fmt.Sprintf("%v", spa.IsCorrect))
	builder.WriteString(", ")
	builder.WriteString("selection_problem_id=")
	builder.WriteString(fmt.Sprintf("%v", spa.SelectionProblemID))
	builder.WriteString(", ")
	builder.WriteString("statement=")
	builder.WriteString(spa.Statement)
	builder.WriteByte(')')
	return builder.String()
}

// SelectionProblemAnswers is a parsable slice of SelectionProblemAnswer.
type SelectionProblemAnswers []*SelectionProblemAnswer
