// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Workbook is the model entity for the Workbook schema.
type Workbook struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// IsPublic holds the value of the "is_public" field.
	IsPublic bool `json:"is_public,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkbookQuery when eager-loading is set.
	Edges        WorkbookEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkbookEdges holds the relations/edges for other nodes in the graph.
type WorkbookEdges struct {
	// DescriptionProblems holds the value of the description_problems edge.
	DescriptionProblems []*DescriptionProblem `json:"description_problems,omitempty"`
	// SelectionProblems holds the value of the selection_problems edge.
	SelectionProblems []*SelectionProblem `json:"selection_problems,omitempty"`
	// TrueOrFalseProblems holds the value of the true_or_false_problems edge.
	TrueOrFalseProblems []*TrueOrFalseProblem `json:"true_or_false_problems,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// WorkbookCategories holds the value of the workbook_categories edge.
	WorkbookCategories []*WorkbookCategory `json:"workbook_categories,omitempty"`
	// WorkbookMembers holds the value of the workbook_members edge.
	WorkbookMembers []*WorkbookMember `json:"workbook_members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// DescriptionProblemsOrErr returns the DescriptionProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookEdges) DescriptionProblemsOrErr() ([]*DescriptionProblem, error) {
	if e.loadedTypes[0] {
		return e.DescriptionProblems, nil
	}
	return nil, &NotLoadedError{edge: "description_problems"}
}

// SelectionProblemsOrErr returns the SelectionProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookEdges) SelectionProblemsOrErr() ([]*SelectionProblem, error) {
	if e.loadedTypes[1] {
		return e.SelectionProblems, nil
	}
	return nil, &NotLoadedError{edge: "selection_problems"}
}

// TrueOrFalseProblemsOrErr returns the TrueOrFalseProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookEdges) TrueOrFalseProblemsOrErr() ([]*TrueOrFalseProblem, error) {
	if e.loadedTypes[2] {
		return e.TrueOrFalseProblems, nil
	}
	return nil, &NotLoadedError{edge: "true_or_false_problems"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// WorkbookCategoriesOrErr returns the WorkbookCategories value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookEdges) WorkbookCategoriesOrErr() ([]*WorkbookCategory, error) {
	if e.loadedTypes[4] {
		return e.WorkbookCategories, nil
	}
	return nil, &NotLoadedError{edge: "workbook_categories"}
}

// WorkbookMembersOrErr returns the WorkbookMembers value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookEdges) WorkbookMembersOrErr() ([]*WorkbookMember, error) {
	if e.loadedTypes[5] {
		return e.WorkbookMembers, nil
	}
	return nil, &NotLoadedError{edge: "workbook_members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Workbook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbook.FieldIsPublic:
			values[i] = new(sql.NullBool)
		case workbook.FieldDescription, workbook.FieldTitle:
			values[i] = new(sql.NullString)
		case workbook.FieldCreatedAt, workbook.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workbook.FieldID, workbook.FieldUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Workbook fields.
func (w *Workbook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbook.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				w.ID = *value
			}
		case workbook.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				w.CreatedAt = value.Time
			}
		case workbook.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				w.UpdatedAt = value.Time
			}
		case workbook.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				w.UserID = *value
			}
		case workbook.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				w.Description = new(string)
				*w.Description = value.String
			}
		case workbook.FieldIsPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_public", values[i])
			} else if value.Valid {
				w.IsPublic = value.Bool
			}
		case workbook.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				w.Title = value.String
			}
		default:
			w.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Workbook.
// This includes values selected through modifiers, order, etc.
func (w *Workbook) Value(name string) (ent.Value, error) {
	return w.selectValues.Get(name)
}

// QueryDescriptionProblems queries the "description_problems" edge of the Workbook entity.
func (w *Workbook) QueryDescriptionProblems() *DescriptionProblemQuery {
	return NewWorkbookClient(w.config).QueryDescriptionProblems(w)
}

// QuerySelectionProblems queries the "selection_problems" edge of the Workbook entity.
func (w *Workbook) QuerySelectionProblems() *SelectionProblemQuery {
	return NewWorkbookClient(w.config).QuerySelectionProblems(w)
}

// QueryTrueOrFalseProblems queries the "true_or_false_problems" edge of the Workbook entity.
func (w *Workbook) QueryTrueOrFalseProblems() *TrueOrFalseProblemQuery {
	return NewWorkbookClient(w.config).QueryTrueOrFalseProblems(w)
}

// QueryUser queries the "user" edge of the Workbook entity.
func (w *Workbook) QueryUser() *UserQuery {
	return NewWorkbookClient(w.config).QueryUser(w)
}

// QueryWorkbookCategories queries the "workbook_categories" edge of the Workbook entity.
func (w *Workbook) QueryWorkbookCategories() *WorkbookCategoryQuery {
	return NewWorkbookClient(w.config).QueryWorkbookCategories(w)
}

// QueryWorkbookMembers queries the "workbook_members" edge of the Workbook entity.
func (w *Workbook) QueryWorkbookMembers() *WorkbookMemberQuery {
	return NewWorkbookClient(w.config).QueryWorkbookMembers(w)
}

// Update returns a builder for updating this Workbook.
// Note that you need to call Workbook.Unwrap() before calling this method if this Workbook
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Workbook) Update() *WorkbookUpdateOne {
	return NewWorkbookClient(w.config).UpdateOne(w)
}

// Unwrap unwraps the Workbook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (w *Workbook) Unwrap() *Workbook {
	_tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Workbook is not a transactional entity")
	}
	w.config.driver = _tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Workbook) String() string {
	var builder strings.Builder
	builder.WriteString("Workbook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", w.ID))
	builder.WriteString("created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", w.UserID))
	builder.WriteString(", ")
	if v := w.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("is_public=")
	builder.WriteString(fmt.Sprintf("%v", w.IsPublic))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(w.Title)
	builder.WriteByte(')')
	return builder.String()
}

// Workbooks is a parsable slice of Workbook.
type Workbooks []*Workbook
