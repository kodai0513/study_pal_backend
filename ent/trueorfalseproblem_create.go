// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategorydetail"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TrueOrFalseProblemCreate is the builder for creating a TrueOrFalseProblem entity.
type TrueOrFalseProblemCreate struct {
	config
	mutation *TrueOrFalseProblemMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tofpc *TrueOrFalseProblemCreate) SetCreatedAt(t time.Time) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetCreatedAt(t)
	return tofpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tofpc *TrueOrFalseProblemCreate) SetNillableCreatedAt(t *time.Time) *TrueOrFalseProblemCreate {
	if t != nil {
		tofpc.SetCreatedAt(*t)
	}
	return tofpc
}

// SetUpdatedAt sets the "updated_at" field.
func (tofpc *TrueOrFalseProblemCreate) SetUpdatedAt(t time.Time) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetUpdatedAt(t)
	return tofpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tofpc *TrueOrFalseProblemCreate) SetNillableUpdatedAt(t *time.Time) *TrueOrFalseProblemCreate {
	if t != nil {
		tofpc.SetUpdatedAt(*t)
	}
	return tofpc
}

// SetIsCorrect sets the "is_correct" field.
func (tofpc *TrueOrFalseProblemCreate) SetIsCorrect(b bool) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetIsCorrect(b)
	return tofpc
}

// SetStatement sets the "statement" field.
func (tofpc *TrueOrFalseProblemCreate) SetStatement(s string) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetStatement(s)
	return tofpc
}

// SetWorkbookID sets the "workbook_id" field.
func (tofpc *TrueOrFalseProblemCreate) SetWorkbookID(u uuid.UUID) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetWorkbookID(u)
	return tofpc
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (tofpc *TrueOrFalseProblemCreate) SetWorkbookCategoryID(u uuid.UUID) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetWorkbookCategoryID(u)
	return tofpc
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (tofpc *TrueOrFalseProblemCreate) SetNillableWorkbookCategoryID(u *uuid.UUID) *TrueOrFalseProblemCreate {
	if u != nil {
		tofpc.SetWorkbookCategoryID(*u)
	}
	return tofpc
}

// SetWorkbookCategoryDetailID sets the "workbook_category_detail_id" field.
func (tofpc *TrueOrFalseProblemCreate) SetWorkbookCategoryDetailID(u uuid.UUID) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetWorkbookCategoryDetailID(u)
	return tofpc
}

// SetNillableWorkbookCategoryDetailID sets the "workbook_category_detail_id" field if the given value is not nil.
func (tofpc *TrueOrFalseProblemCreate) SetNillableWorkbookCategoryDetailID(u *uuid.UUID) *TrueOrFalseProblemCreate {
	if u != nil {
		tofpc.SetWorkbookCategoryDetailID(*u)
	}
	return tofpc
}

// SetID sets the "id" field.
func (tofpc *TrueOrFalseProblemCreate) SetID(u uuid.UUID) *TrueOrFalseProblemCreate {
	tofpc.mutation.SetID(u)
	return tofpc
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (tofpc *TrueOrFalseProblemCreate) SetWorkbook(w *Workbook) *TrueOrFalseProblemCreate {
	return tofpc.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (tofpc *TrueOrFalseProblemCreate) SetWorkbookCategory(w *WorkbookCategory) *TrueOrFalseProblemCreate {
	return tofpc.SetWorkbookCategoryID(w.ID)
}

// SetWorkbookCategoryDetail sets the "workbook_category_detail" edge to the WorkbookCategoryDetail entity.
func (tofpc *TrueOrFalseProblemCreate) SetWorkbookCategoryDetail(w *WorkbookCategoryDetail) *TrueOrFalseProblemCreate {
	return tofpc.SetWorkbookCategoryDetailID(w.ID)
}

// Mutation returns the TrueOrFalseProblemMutation object of the builder.
func (tofpc *TrueOrFalseProblemCreate) Mutation() *TrueOrFalseProblemMutation {
	return tofpc.mutation
}

// Save creates the TrueOrFalseProblem in the database.
func (tofpc *TrueOrFalseProblemCreate) Save(ctx context.Context) (*TrueOrFalseProblem, error) {
	tofpc.defaults()
	return withHooks(ctx, tofpc.sqlSave, tofpc.mutation, tofpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tofpc *TrueOrFalseProblemCreate) SaveX(ctx context.Context) *TrueOrFalseProblem {
	v, err := tofpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tofpc *TrueOrFalseProblemCreate) Exec(ctx context.Context) error {
	_, err := tofpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tofpc *TrueOrFalseProblemCreate) ExecX(ctx context.Context) {
	if err := tofpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tofpc *TrueOrFalseProblemCreate) defaults() {
	if _, ok := tofpc.mutation.CreatedAt(); !ok {
		v := trueorfalseproblem.DefaultCreatedAt()
		tofpc.mutation.SetCreatedAt(v)
	}
	if _, ok := tofpc.mutation.UpdatedAt(); !ok {
		v := trueorfalseproblem.DefaultUpdatedAt()
		tofpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tofpc *TrueOrFalseProblemCreate) check() error {
	if _, ok := tofpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TrueOrFalseProblem.created_at"`)}
	}
	if _, ok := tofpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TrueOrFalseProblem.updated_at"`)}
	}
	if _, ok := tofpc.mutation.IsCorrect(); !ok {
		return &ValidationError{Name: "is_correct", err: errors.New(`ent: missing required field "TrueOrFalseProblem.is_correct"`)}
	}
	if _, ok := tofpc.mutation.Statement(); !ok {
		return &ValidationError{Name: "statement", err: errors.New(`ent: missing required field "TrueOrFalseProblem.statement"`)}
	}
	if v, ok := tofpc.mutation.Statement(); ok {
		if err := trueorfalseproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "TrueOrFalseProblem.statement": %w`, err)}
		}
	}
	if _, ok := tofpc.mutation.WorkbookID(); !ok {
		return &ValidationError{Name: "workbook_id", err: errors.New(`ent: missing required field "TrueOrFalseProblem.workbook_id"`)}
	}
	if len(tofpc.mutation.WorkbookIDs()) == 0 {
		return &ValidationError{Name: "workbook", err: errors.New(`ent: missing required edge "TrueOrFalseProblem.workbook"`)}
	}
	return nil
}

func (tofpc *TrueOrFalseProblemCreate) sqlSave(ctx context.Context) (*TrueOrFalseProblem, error) {
	if err := tofpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tofpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tofpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	tofpc.mutation.id = &_node.ID
	tofpc.mutation.done = true
	return _node, nil
}

func (tofpc *TrueOrFalseProblemCreate) createSpec() (*TrueOrFalseProblem, *sqlgraph.CreateSpec) {
	var (
		_node = &TrueOrFalseProblem{config: tofpc.config}
		_spec = sqlgraph.NewCreateSpec(trueorfalseproblem.Table, sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID))
	)
	if id, ok := tofpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := tofpc.mutation.CreatedAt(); ok {
		_spec.SetField(trueorfalseproblem.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tofpc.mutation.UpdatedAt(); ok {
		_spec.SetField(trueorfalseproblem.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tofpc.mutation.IsCorrect(); ok {
		_spec.SetField(trueorfalseproblem.FieldIsCorrect, field.TypeBool, value)
		_node.IsCorrect = value
	}
	if value, ok := tofpc.mutation.Statement(); ok {
		_spec.SetField(trueorfalseproblem.FieldStatement, field.TypeString, value)
		_node.Statement = value
	}
	if nodes := tofpc.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookTable,
			Columns: []string{trueorfalseproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tofpc.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookCategoryTable,
			Columns: []string{trueorfalseproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookCategoryID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tofpc.mutation.WorkbookCategoryDetailIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trueorfalseproblem.WorkbookCategoryDetailTable,
			Columns: []string{trueorfalseproblem.WorkbookCategoryDetailColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategorydetail.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkbookCategoryDetailID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TrueOrFalseProblemCreateBulk is the builder for creating many TrueOrFalseProblem entities in bulk.
type TrueOrFalseProblemCreateBulk struct {
	config
	err      error
	builders []*TrueOrFalseProblemCreate
}

// Save creates the TrueOrFalseProblem entities in the database.
func (tofpcb *TrueOrFalseProblemCreateBulk) Save(ctx context.Context) ([]*TrueOrFalseProblem, error) {
	if tofpcb.err != nil {
		return nil, tofpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tofpcb.builders))
	nodes := make([]*TrueOrFalseProblem, len(tofpcb.builders))
	mutators := make([]Mutator, len(tofpcb.builders))
	for i := range tofpcb.builders {
		func(i int, root context.Context) {
			builder := tofpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrueOrFalseProblemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tofpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tofpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tofpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tofpcb *TrueOrFalseProblemCreateBulk) SaveX(ctx context.Context) []*TrueOrFalseProblem {
	v, err := tofpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tofpcb *TrueOrFalseProblemCreateBulk) Exec(ctx context.Context) error {
	_, err := tofpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tofpcb *TrueOrFalseProblemCreateBulk) ExecX(ctx context.Context) {
	if err := tofpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
