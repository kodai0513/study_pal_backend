// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/workbookcategorydetail"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkbookCategoryDetail is the model entity for the WorkbookCategoryDetail schema.
type WorkbookCategoryDetail struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// WorkbookCategoryID holds the value of the "workbook_category_id" field.
	WorkbookCategoryID uuid.UUID `json:"workbook_category_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkbookCategoryDetailQuery when eager-loading is set.
	Edges                                       WorkbookCategoryDetailEdges `json:"edges"`
	workbook_category_workbook_category_details *uuid.UUID
	selectValues                                sql.SelectValues
}

// WorkbookCategoryDetailEdges holds the relations/edges for other nodes in the graph.
type WorkbookCategoryDetailEdges struct {
	// DescriptionProblems holds the value of the description_problems edge.
	DescriptionProblems []*DescriptionProblem `json:"description_problems,omitempty"`
	// SelectionProblems holds the value of the selection_problems edge.
	SelectionProblems []*SelectionProblem `json:"selection_problems,omitempty"`
	// TrueOrFalseProblems holds the value of the true_or_false_problems edge.
	TrueOrFalseProblems []*TrueOrFalseProblem `json:"true_or_false_problems,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DescriptionProblemsOrErr returns the DescriptionProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryDetailEdges) DescriptionProblemsOrErr() ([]*DescriptionProblem, error) {
	if e.loadedTypes[0] {
		return e.DescriptionProblems, nil
	}
	return nil, &NotLoadedError{edge: "description_problems"}
}

// SelectionProblemsOrErr returns the SelectionProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryDetailEdges) SelectionProblemsOrErr() ([]*SelectionProblem, error) {
	if e.loadedTypes[1] {
		return e.SelectionProblems, nil
	}
	return nil, &NotLoadedError{edge: "selection_problems"}
}

// TrueOrFalseProblemsOrErr returns the TrueOrFalseProblems value or an error if the edge
// was not loaded in eager-loading.
func (e WorkbookCategoryDetailEdges) TrueOrFalseProblemsOrErr() ([]*TrueOrFalseProblem, error) {
	if e.loadedTypes[2] {
		return e.TrueOrFalseProblems, nil
	}
	return nil, &NotLoadedError{edge: "true_or_false_problems"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkbookCategoryDetail) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbookcategorydetail.FieldName:
			values[i] = new(sql.NullString)
		case workbookcategorydetail.FieldCreatedAt, workbookcategorydetail.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case workbookcategorydetail.FieldID, workbookcategorydetail.FieldWorkbookCategoryID:
			values[i] = new(uuid.UUID)
		case workbookcategorydetail.ForeignKeys[0]: // workbook_category_workbook_category_details
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkbookCategoryDetail fields.
func (wcd *WorkbookCategoryDetail) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbookcategorydetail.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wcd.ID = *value
			}
		case workbookcategorydetail.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wcd.CreatedAt = value.Time
			}
		case workbookcategorydetail.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wcd.UpdatedAt = value.Time
			}
		case workbookcategorydetail.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wcd.Name = value.String
			}
		case workbookcategorydetail.FieldWorkbookCategoryID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_category_id", values[i])
			} else if value != nil {
				wcd.WorkbookCategoryID = *value
			}
		case workbookcategorydetail.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_category_workbook_category_details", values[i])
			} else if value.Valid {
				wcd.workbook_category_workbook_category_details = new(uuid.UUID)
				*wcd.workbook_category_workbook_category_details = *value.S.(*uuid.UUID)
			}
		default:
			wcd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkbookCategoryDetail.
// This includes values selected through modifiers, order, etc.
func (wcd *WorkbookCategoryDetail) Value(name string) (ent.Value, error) {
	return wcd.selectValues.Get(name)
}

// QueryDescriptionProblems queries the "description_problems" edge of the WorkbookCategoryDetail entity.
func (wcd *WorkbookCategoryDetail) QueryDescriptionProblems() *DescriptionProblemQuery {
	return NewWorkbookCategoryDetailClient(wcd.config).QueryDescriptionProblems(wcd)
}

// QuerySelectionProblems queries the "selection_problems" edge of the WorkbookCategoryDetail entity.
func (wcd *WorkbookCategoryDetail) QuerySelectionProblems() *SelectionProblemQuery {
	return NewWorkbookCategoryDetailClient(wcd.config).QuerySelectionProblems(wcd)
}

// QueryTrueOrFalseProblems queries the "true_or_false_problems" edge of the WorkbookCategoryDetail entity.
func (wcd *WorkbookCategoryDetail) QueryTrueOrFalseProblems() *TrueOrFalseProblemQuery {
	return NewWorkbookCategoryDetailClient(wcd.config).QueryTrueOrFalseProblems(wcd)
}

// Update returns a builder for updating this WorkbookCategoryDetail.
// Note that you need to call WorkbookCategoryDetail.Unwrap() before calling this method if this WorkbookCategoryDetail
// was returned from a transaction, and the transaction was committed or rolled back.
func (wcd *WorkbookCategoryDetail) Update() *WorkbookCategoryDetailUpdateOne {
	return NewWorkbookCategoryDetailClient(wcd.config).UpdateOne(wcd)
}

// Unwrap unwraps the WorkbookCategoryDetail entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wcd *WorkbookCategoryDetail) Unwrap() *WorkbookCategoryDetail {
	_tx, ok := wcd.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkbookCategoryDetail is not a transactional entity")
	}
	wcd.config.driver = _tx.drv
	return wcd
}

// String implements the fmt.Stringer.
func (wcd *WorkbookCategoryDetail) String() string {
	var builder strings.Builder
	builder.WriteString("WorkbookCategoryDetail(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wcd.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wcd.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wcd.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wcd.Name)
	builder.WriteString(", ")
	builder.WriteString("workbook_category_id=")
	builder.WriteString(fmt.Sprintf("%v", wcd.WorkbookCategoryID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkbookCategoryDetails is a parsable slice of WorkbookCategoryDetail.
type WorkbookCategoryDetails []*WorkbookCategoryDetail
