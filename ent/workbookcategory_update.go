// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/trueorfalseproblem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryUpdate is the builder for updating WorkbookCategory entities.
type WorkbookCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookCategoryMutation
}

// Where appends a list predicates to the WorkbookCategoryUpdate builder.
func (wcu *WorkbookCategoryUpdate) Where(ps ...predicate.WorkbookCategory) *WorkbookCategoryUpdate {
	wcu.mutation.Where(ps...)
	return wcu
}

// SetCreatedAt sets the "created_at" field.
func (wcu *WorkbookCategoryUpdate) SetCreatedAt(t time.Time) *WorkbookCategoryUpdate {
	wcu.mutation.SetCreatedAt(t)
	return wcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcu *WorkbookCategoryUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryUpdate {
	if t != nil {
		wcu.SetCreatedAt(*t)
	}
	return wcu
}

// SetUpdatedAt sets the "updated_at" field.
func (wcu *WorkbookCategoryUpdate) SetUpdatedAt(t time.Time) *WorkbookCategoryUpdate {
	wcu.mutation.SetUpdatedAt(t)
	return wcu
}

// SetName sets the "name" field.
func (wcu *WorkbookCategoryUpdate) SetName(s string) *WorkbookCategoryUpdate {
	wcu.mutation.SetName(s)
	return wcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcu *WorkbookCategoryUpdate) SetNillableName(s *string) *WorkbookCategoryUpdate {
	if s != nil {
		wcu.SetName(*s)
	}
	return wcu
}

// SetWorkbookID sets the "workbook_id" field.
func (wcu *WorkbookCategoryUpdate) SetWorkbookID(u uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.SetWorkbookID(u)
	return wcu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wcu *WorkbookCategoryUpdate) SetNillableWorkbookID(u *uuid.UUID) *WorkbookCategoryUpdate {
	if u != nil {
		wcu.SetWorkbookID(*u)
	}
	return wcu
}

// AddDescriptionProblemIDs adds the "description_problems" edge to the DescriptionProblem entity by IDs.
func (wcu *WorkbookCategoryUpdate) AddDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.AddDescriptionProblemIDs(ids...)
	return wcu
}

// AddDescriptionProblems adds the "description_problems" edges to the DescriptionProblem entity.
func (wcu *WorkbookCategoryUpdate) AddDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcu.AddDescriptionProblemIDs(ids...)
}

// AddSelectionProblemIDs adds the "selection_problems" edge to the SelectionProblem entity by IDs.
func (wcu *WorkbookCategoryUpdate) AddSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.AddSelectionProblemIDs(ids...)
	return wcu
}

// AddSelectionProblems adds the "selection_problems" edges to the SelectionProblem entity.
func (wcu *WorkbookCategoryUpdate) AddSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcu.AddSelectionProblemIDs(ids...)
}

// AddTrueOrFalseProblemIDs adds the "true_or_false_problems" edge to the TrueOrFalseProblem entity by IDs.
func (wcu *WorkbookCategoryUpdate) AddTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.AddTrueOrFalseProblemIDs(ids...)
	return wcu
}

// AddTrueOrFalseProblems adds the "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcu *WorkbookCategoryUpdate) AddTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcu.AddTrueOrFalseProblemIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wcu *WorkbookCategoryUpdate) SetWorkbook(w *Workbook) *WorkbookCategoryUpdate {
	return wcu.SetWorkbookID(w.ID)
}

// Mutation returns the WorkbookCategoryMutation object of the builder.
func (wcu *WorkbookCategoryUpdate) Mutation() *WorkbookCategoryMutation {
	return wcu.mutation
}

// ClearDescriptionProblems clears all "description_problems" edges to the DescriptionProblem entity.
func (wcu *WorkbookCategoryUpdate) ClearDescriptionProblems() *WorkbookCategoryUpdate {
	wcu.mutation.ClearDescriptionProblems()
	return wcu
}

// RemoveDescriptionProblemIDs removes the "description_problems" edge to DescriptionProblem entities by IDs.
func (wcu *WorkbookCategoryUpdate) RemoveDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.RemoveDescriptionProblemIDs(ids...)
	return wcu
}

// RemoveDescriptionProblems removes "description_problems" edges to DescriptionProblem entities.
func (wcu *WorkbookCategoryUpdate) RemoveDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcu.RemoveDescriptionProblemIDs(ids...)
}

// ClearSelectionProblems clears all "selection_problems" edges to the SelectionProblem entity.
func (wcu *WorkbookCategoryUpdate) ClearSelectionProblems() *WorkbookCategoryUpdate {
	wcu.mutation.ClearSelectionProblems()
	return wcu
}

// RemoveSelectionProblemIDs removes the "selection_problems" edge to SelectionProblem entities by IDs.
func (wcu *WorkbookCategoryUpdate) RemoveSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.RemoveSelectionProblemIDs(ids...)
	return wcu
}

// RemoveSelectionProblems removes "selection_problems" edges to SelectionProblem entities.
func (wcu *WorkbookCategoryUpdate) RemoveSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcu.RemoveSelectionProblemIDs(ids...)
}

// ClearTrueOrFalseProblems clears all "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcu *WorkbookCategoryUpdate) ClearTrueOrFalseProblems() *WorkbookCategoryUpdate {
	wcu.mutation.ClearTrueOrFalseProblems()
	return wcu
}

// RemoveTrueOrFalseProblemIDs removes the "true_or_false_problems" edge to TrueOrFalseProblem entities by IDs.
func (wcu *WorkbookCategoryUpdate) RemoveTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.RemoveTrueOrFalseProblemIDs(ids...)
	return wcu
}

// RemoveTrueOrFalseProblems removes "true_or_false_problems" edges to TrueOrFalseProblem entities.
func (wcu *WorkbookCategoryUpdate) RemoveTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcu.RemoveTrueOrFalseProblemIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wcu *WorkbookCategoryUpdate) ClearWorkbook() *WorkbookCategoryUpdate {
	wcu.mutation.ClearWorkbook()
	return wcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcu *WorkbookCategoryUpdate) Save(ctx context.Context) (int, error) {
	wcu.defaults()
	return withHooks(ctx, wcu.sqlSave, wcu.mutation, wcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcu *WorkbookCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := wcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcu *WorkbookCategoryUpdate) Exec(ctx context.Context) error {
	_, err := wcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcu *WorkbookCategoryUpdate) ExecX(ctx context.Context) {
	if err := wcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcu *WorkbookCategoryUpdate) defaults() {
	if _, ok := wcu.mutation.UpdatedAt(); !ok {
		v := workbookcategory.UpdateDefaultUpdatedAt()
		wcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcu *WorkbookCategoryUpdate) check() error {
	if v, ok := wcu.mutation.Name(); ok {
		if err := workbookcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategory.name": %w`, err)}
		}
	}
	if wcu.mutation.WorkbookCleared() && len(wcu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategory.workbook"`)
	}
	return nil
}

func (wcu *WorkbookCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategory.Table, workbookcategory.Columns, sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID))
	if ps := wcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcu.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wcu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcu.mutation.Name(); ok {
		_spec.SetField(workbookcategory.FieldName, field.TypeString, value)
	}
	if wcu.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.DescriptionProblemsTable,
			Columns: []string{workbookcategory.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.RemovedDescriptionProblemsIDs(); len(nodes) > 0 && !wcu.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.DescriptionProblemsTable,
			Columns: []string{workbookcategory.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.DescriptionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.DescriptionProblemsTable,
			Columns: []string{workbookcategory.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcu.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.SelectionProblemsTable,
			Columns: []string{workbookcategory.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.RemovedSelectionProblemsIDs(); len(nodes) > 0 && !wcu.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.SelectionProblemsTable,
			Columns: []string{workbookcategory.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.SelectionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.SelectionProblemsTable,
			Columns: []string{workbookcategory.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcu.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategory.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.RemovedTrueOrFalseProblemsIDs(); len(nodes) > 0 && !wcu.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategory.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.TrueOrFalseProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategory.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wcu.mutation.done = true
	return n, nil
}

// WorkbookCategoryUpdateOne is the builder for updating a single WorkbookCategory entity.
type WorkbookCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookCategoryMutation
}

// SetCreatedAt sets the "created_at" field.
func (wcuo *WorkbookCategoryUpdateOne) SetCreatedAt(t time.Time) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetCreatedAt(t)
	return wcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcuo *WorkbookCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryUpdateOne {
	if t != nil {
		wcuo.SetCreatedAt(*t)
	}
	return wcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wcuo *WorkbookCategoryUpdateOne) SetUpdatedAt(t time.Time) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetUpdatedAt(t)
	return wcuo
}

// SetName sets the "name" field.
func (wcuo *WorkbookCategoryUpdateOne) SetName(s string) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetName(s)
	return wcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcuo *WorkbookCategoryUpdateOne) SetNillableName(s *string) *WorkbookCategoryUpdateOne {
	if s != nil {
		wcuo.SetName(*s)
	}
	return wcuo
}

// SetWorkbookID sets the "workbook_id" field.
func (wcuo *WorkbookCategoryUpdateOne) SetWorkbookID(u uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetWorkbookID(u)
	return wcuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wcuo *WorkbookCategoryUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *WorkbookCategoryUpdateOne {
	if u != nil {
		wcuo.SetWorkbookID(*u)
	}
	return wcuo
}

// AddDescriptionProblemIDs adds the "description_problems" edge to the DescriptionProblem entity by IDs.
func (wcuo *WorkbookCategoryUpdateOne) AddDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.AddDescriptionProblemIDs(ids...)
	return wcuo
}

// AddDescriptionProblems adds the "description_problems" edges to the DescriptionProblem entity.
func (wcuo *WorkbookCategoryUpdateOne) AddDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcuo.AddDescriptionProblemIDs(ids...)
}

// AddSelectionProblemIDs adds the "selection_problems" edge to the SelectionProblem entity by IDs.
func (wcuo *WorkbookCategoryUpdateOne) AddSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.AddSelectionProblemIDs(ids...)
	return wcuo
}

// AddSelectionProblems adds the "selection_problems" edges to the SelectionProblem entity.
func (wcuo *WorkbookCategoryUpdateOne) AddSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcuo.AddSelectionProblemIDs(ids...)
}

// AddTrueOrFalseProblemIDs adds the "true_or_false_problems" edge to the TrueOrFalseProblem entity by IDs.
func (wcuo *WorkbookCategoryUpdateOne) AddTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.AddTrueOrFalseProblemIDs(ids...)
	return wcuo
}

// AddTrueOrFalseProblems adds the "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcuo *WorkbookCategoryUpdateOne) AddTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcuo.AddTrueOrFalseProblemIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wcuo *WorkbookCategoryUpdateOne) SetWorkbook(w *Workbook) *WorkbookCategoryUpdateOne {
	return wcuo.SetWorkbookID(w.ID)
}

// Mutation returns the WorkbookCategoryMutation object of the builder.
func (wcuo *WorkbookCategoryUpdateOne) Mutation() *WorkbookCategoryMutation {
	return wcuo.mutation
}

// ClearDescriptionProblems clears all "description_problems" edges to the DescriptionProblem entity.
func (wcuo *WorkbookCategoryUpdateOne) ClearDescriptionProblems() *WorkbookCategoryUpdateOne {
	wcuo.mutation.ClearDescriptionProblems()
	return wcuo
}

// RemoveDescriptionProblemIDs removes the "description_problems" edge to DescriptionProblem entities by IDs.
func (wcuo *WorkbookCategoryUpdateOne) RemoveDescriptionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.RemoveDescriptionProblemIDs(ids...)
	return wcuo
}

// RemoveDescriptionProblems removes "description_problems" edges to DescriptionProblem entities.
func (wcuo *WorkbookCategoryUpdateOne) RemoveDescriptionProblems(d ...*DescriptionProblem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return wcuo.RemoveDescriptionProblemIDs(ids...)
}

// ClearSelectionProblems clears all "selection_problems" edges to the SelectionProblem entity.
func (wcuo *WorkbookCategoryUpdateOne) ClearSelectionProblems() *WorkbookCategoryUpdateOne {
	wcuo.mutation.ClearSelectionProblems()
	return wcuo
}

// RemoveSelectionProblemIDs removes the "selection_problems" edge to SelectionProblem entities by IDs.
func (wcuo *WorkbookCategoryUpdateOne) RemoveSelectionProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.RemoveSelectionProblemIDs(ids...)
	return wcuo
}

// RemoveSelectionProblems removes "selection_problems" edges to SelectionProblem entities.
func (wcuo *WorkbookCategoryUpdateOne) RemoveSelectionProblems(s ...*SelectionProblem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return wcuo.RemoveSelectionProblemIDs(ids...)
}

// ClearTrueOrFalseProblems clears all "true_or_false_problems" edges to the TrueOrFalseProblem entity.
func (wcuo *WorkbookCategoryUpdateOne) ClearTrueOrFalseProblems() *WorkbookCategoryUpdateOne {
	wcuo.mutation.ClearTrueOrFalseProblems()
	return wcuo
}

// RemoveTrueOrFalseProblemIDs removes the "true_or_false_problems" edge to TrueOrFalseProblem entities by IDs.
func (wcuo *WorkbookCategoryUpdateOne) RemoveTrueOrFalseProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.RemoveTrueOrFalseProblemIDs(ids...)
	return wcuo
}

// RemoveTrueOrFalseProblems removes "true_or_false_problems" edges to TrueOrFalseProblem entities.
func (wcuo *WorkbookCategoryUpdateOne) RemoveTrueOrFalseProblems(t ...*TrueOrFalseProblem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return wcuo.RemoveTrueOrFalseProblemIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wcuo *WorkbookCategoryUpdateOne) ClearWorkbook() *WorkbookCategoryUpdateOne {
	wcuo.mutation.ClearWorkbook()
	return wcuo
}

// Where appends a list predicates to the WorkbookCategoryUpdate builder.
func (wcuo *WorkbookCategoryUpdateOne) Where(ps ...predicate.WorkbookCategory) *WorkbookCategoryUpdateOne {
	wcuo.mutation.Where(ps...)
	return wcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcuo *WorkbookCategoryUpdateOne) Select(field string, fields ...string) *WorkbookCategoryUpdateOne {
	wcuo.fields = append([]string{field}, fields...)
	return wcuo
}

// Save executes the query and returns the updated WorkbookCategory entity.
func (wcuo *WorkbookCategoryUpdateOne) Save(ctx context.Context) (*WorkbookCategory, error) {
	wcuo.defaults()
	return withHooks(ctx, wcuo.sqlSave, wcuo.mutation, wcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcuo *WorkbookCategoryUpdateOne) SaveX(ctx context.Context) *WorkbookCategory {
	node, err := wcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcuo *WorkbookCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := wcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcuo *WorkbookCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := wcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcuo *WorkbookCategoryUpdateOne) defaults() {
	if _, ok := wcuo.mutation.UpdatedAt(); !ok {
		v := workbookcategory.UpdateDefaultUpdatedAt()
		wcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcuo *WorkbookCategoryUpdateOne) check() error {
	if v, ok := wcuo.mutation.Name(); ok {
		if err := workbookcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategory.name": %w`, err)}
		}
	}
	if wcuo.mutation.WorkbookCleared() && len(wcuo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategory.workbook"`)
	}
	return nil
}

func (wcuo *WorkbookCategoryUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookCategory, err error) {
	if err := wcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategory.Table, workbookcategory.Columns, sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID))
	id, ok := wcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategory.FieldID)
		for _, f := range fields {
			if !workbookcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcuo.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcuo.mutation.Name(); ok {
		_spec.SetField(workbookcategory.FieldName, field.TypeString, value)
	}
	if wcuo.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.DescriptionProblemsTable,
			Columns: []string{workbookcategory.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.RemovedDescriptionProblemsIDs(); len(nodes) > 0 && !wcuo.mutation.DescriptionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.DescriptionProblemsTable,
			Columns: []string{workbookcategory.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.DescriptionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.DescriptionProblemsTable,
			Columns: []string{workbookcategory.DescriptionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcuo.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.SelectionProblemsTable,
			Columns: []string{workbookcategory.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.RemovedSelectionProblemsIDs(); len(nodes) > 0 && !wcuo.mutation.SelectionProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.SelectionProblemsTable,
			Columns: []string{workbookcategory.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.SelectionProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.SelectionProblemsTable,
			Columns: []string{workbookcategory.SelectionProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(selectionproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcuo.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategory.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.RemovedTrueOrFalseProblemsIDs(); len(nodes) > 0 && !wcuo.mutation.TrueOrFalseProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategory.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.TrueOrFalseProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.TrueOrFalseProblemsTable,
			Columns: []string{workbookcategory.TrueOrFalseProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trueorfalseproblem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcuo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkbookCategory{config: wcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcuo.mutation.done = true
	return _node, nil
}
