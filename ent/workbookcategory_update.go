// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategoryclassification"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryUpdate is the builder for updating WorkbookCategory entities.
type WorkbookCategoryUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookCategoryMutation
}

// Where appends a list predicates to the WorkbookCategoryUpdate builder.
func (wcu *WorkbookCategoryUpdate) Where(ps ...predicate.WorkbookCategory) *WorkbookCategoryUpdate {
	wcu.mutation.Where(ps...)
	return wcu
}

// SetCreatedAt sets the "created_at" field.
func (wcu *WorkbookCategoryUpdate) SetCreatedAt(t time.Time) *WorkbookCategoryUpdate {
	wcu.mutation.SetCreatedAt(t)
	return wcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcu *WorkbookCategoryUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryUpdate {
	if t != nil {
		wcu.SetCreatedAt(*t)
	}
	return wcu
}

// SetUpdatedAt sets the "updated_at" field.
func (wcu *WorkbookCategoryUpdate) SetUpdatedAt(t time.Time) *WorkbookCategoryUpdate {
	wcu.mutation.SetUpdatedAt(t)
	return wcu
}

// SetName sets the "name" field.
func (wcu *WorkbookCategoryUpdate) SetName(s string) *WorkbookCategoryUpdate {
	wcu.mutation.SetName(s)
	return wcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcu *WorkbookCategoryUpdate) SetNillableName(s *string) *WorkbookCategoryUpdate {
	if s != nil {
		wcu.SetName(*s)
	}
	return wcu
}

// SetWorkbookID sets the "workbook_id" field.
func (wcu *WorkbookCategoryUpdate) SetWorkbookID(u uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.SetWorkbookID(u)
	return wcu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wcu *WorkbookCategoryUpdate) SetNillableWorkbookID(u *uuid.UUID) *WorkbookCategoryUpdate {
	if u != nil {
		wcu.SetWorkbookID(*u)
	}
	return wcu
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (wcu *WorkbookCategoryUpdate) AddProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.AddProblemIDs(ids...)
	return wcu
}

// AddProblems adds the "problems" edges to the Problem entity.
func (wcu *WorkbookCategoryUpdate) AddProblems(p ...*Problem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wcu.AddProblemIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wcu *WorkbookCategoryUpdate) SetWorkbook(w *Workbook) *WorkbookCategoryUpdate {
	return wcu.SetWorkbookID(w.ID)
}

// AddWorkbookCategoryClassificationIDs adds the "workbook_category_classifications" edge to the WorkbookCategoryClassification entity by IDs.
func (wcu *WorkbookCategoryUpdate) AddWorkbookCategoryClassificationIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.AddWorkbookCategoryClassificationIDs(ids...)
	return wcu
}

// AddWorkbookCategoryClassifications adds the "workbook_category_classifications" edges to the WorkbookCategoryClassification entity.
func (wcu *WorkbookCategoryUpdate) AddWorkbookCategoryClassifications(w ...*WorkbookCategoryClassification) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wcu.AddWorkbookCategoryClassificationIDs(ids...)
}

// Mutation returns the WorkbookCategoryMutation object of the builder.
func (wcu *WorkbookCategoryUpdate) Mutation() *WorkbookCategoryMutation {
	return wcu.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (wcu *WorkbookCategoryUpdate) ClearProblems() *WorkbookCategoryUpdate {
	wcu.mutation.ClearProblems()
	return wcu
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (wcu *WorkbookCategoryUpdate) RemoveProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.RemoveProblemIDs(ids...)
	return wcu
}

// RemoveProblems removes "problems" edges to Problem entities.
func (wcu *WorkbookCategoryUpdate) RemoveProblems(p ...*Problem) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wcu.RemoveProblemIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wcu *WorkbookCategoryUpdate) ClearWorkbook() *WorkbookCategoryUpdate {
	wcu.mutation.ClearWorkbook()
	return wcu
}

// ClearWorkbookCategoryClassifications clears all "workbook_category_classifications" edges to the WorkbookCategoryClassification entity.
func (wcu *WorkbookCategoryUpdate) ClearWorkbookCategoryClassifications() *WorkbookCategoryUpdate {
	wcu.mutation.ClearWorkbookCategoryClassifications()
	return wcu
}

// RemoveWorkbookCategoryClassificationIDs removes the "workbook_category_classifications" edge to WorkbookCategoryClassification entities by IDs.
func (wcu *WorkbookCategoryUpdate) RemoveWorkbookCategoryClassificationIDs(ids ...uuid.UUID) *WorkbookCategoryUpdate {
	wcu.mutation.RemoveWorkbookCategoryClassificationIDs(ids...)
	return wcu
}

// RemoveWorkbookCategoryClassifications removes "workbook_category_classifications" edges to WorkbookCategoryClassification entities.
func (wcu *WorkbookCategoryUpdate) RemoveWorkbookCategoryClassifications(w ...*WorkbookCategoryClassification) *WorkbookCategoryUpdate {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wcu.RemoveWorkbookCategoryClassificationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wcu *WorkbookCategoryUpdate) Save(ctx context.Context) (int, error) {
	wcu.defaults()
	return withHooks(ctx, wcu.sqlSave, wcu.mutation, wcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcu *WorkbookCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := wcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wcu *WorkbookCategoryUpdate) Exec(ctx context.Context) error {
	_, err := wcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcu *WorkbookCategoryUpdate) ExecX(ctx context.Context) {
	if err := wcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcu *WorkbookCategoryUpdate) defaults() {
	if _, ok := wcu.mutation.UpdatedAt(); !ok {
		v := workbookcategory.UpdateDefaultUpdatedAt()
		wcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcu *WorkbookCategoryUpdate) check() error {
	if v, ok := wcu.mutation.Name(); ok {
		if err := workbookcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategory.name": %w`, err)}
		}
	}
	if wcu.mutation.WorkbookCleared() && len(wcu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategory.workbook"`)
	}
	return nil
}

func (wcu *WorkbookCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategory.Table, workbookcategory.Columns, sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID))
	if ps := wcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcu.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wcu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcu.mutation.Name(); ok {
		_spec.SetField(workbookcategory.FieldName, field.TypeString, value)
	}
	if wcu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.ProblemsTable,
			Columns: []string{workbookcategory.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !wcu.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.ProblemsTable,
			Columns: []string{workbookcategory.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.ProblemsTable,
			Columns: []string{workbookcategory.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcu.mutation.WorkbookCategoryClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.WorkbookCategoryClassificationsTable,
			Columns: []string{workbookcategory.WorkbookCategoryClassificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.RemovedWorkbookCategoryClassificationsIDs(); len(nodes) > 0 && !wcu.mutation.WorkbookCategoryClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.WorkbookCategoryClassificationsTable,
			Columns: []string{workbookcategory.WorkbookCategoryClassificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcu.mutation.WorkbookCategoryClassificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.WorkbookCategoryClassificationsTable,
			Columns: []string{workbookcategory.WorkbookCategoryClassificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wcu.mutation.done = true
	return n, nil
}

// WorkbookCategoryUpdateOne is the builder for updating a single WorkbookCategory entity.
type WorkbookCategoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookCategoryMutation
}

// SetCreatedAt sets the "created_at" field.
func (wcuo *WorkbookCategoryUpdateOne) SetCreatedAt(t time.Time) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetCreatedAt(t)
	return wcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wcuo *WorkbookCategoryUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryUpdateOne {
	if t != nil {
		wcuo.SetCreatedAt(*t)
	}
	return wcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wcuo *WorkbookCategoryUpdateOne) SetUpdatedAt(t time.Time) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetUpdatedAt(t)
	return wcuo
}

// SetName sets the "name" field.
func (wcuo *WorkbookCategoryUpdateOne) SetName(s string) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetName(s)
	return wcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wcuo *WorkbookCategoryUpdateOne) SetNillableName(s *string) *WorkbookCategoryUpdateOne {
	if s != nil {
		wcuo.SetName(*s)
	}
	return wcuo
}

// SetWorkbookID sets the "workbook_id" field.
func (wcuo *WorkbookCategoryUpdateOne) SetWorkbookID(u uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.SetWorkbookID(u)
	return wcuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wcuo *WorkbookCategoryUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *WorkbookCategoryUpdateOne {
	if u != nil {
		wcuo.SetWorkbookID(*u)
	}
	return wcuo
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (wcuo *WorkbookCategoryUpdateOne) AddProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.AddProblemIDs(ids...)
	return wcuo
}

// AddProblems adds the "problems" edges to the Problem entity.
func (wcuo *WorkbookCategoryUpdateOne) AddProblems(p ...*Problem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wcuo.AddProblemIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (wcuo *WorkbookCategoryUpdateOne) SetWorkbook(w *Workbook) *WorkbookCategoryUpdateOne {
	return wcuo.SetWorkbookID(w.ID)
}

// AddWorkbookCategoryClassificationIDs adds the "workbook_category_classifications" edge to the WorkbookCategoryClassification entity by IDs.
func (wcuo *WorkbookCategoryUpdateOne) AddWorkbookCategoryClassificationIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.AddWorkbookCategoryClassificationIDs(ids...)
	return wcuo
}

// AddWorkbookCategoryClassifications adds the "workbook_category_classifications" edges to the WorkbookCategoryClassification entity.
func (wcuo *WorkbookCategoryUpdateOne) AddWorkbookCategoryClassifications(w ...*WorkbookCategoryClassification) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wcuo.AddWorkbookCategoryClassificationIDs(ids...)
}

// Mutation returns the WorkbookCategoryMutation object of the builder.
func (wcuo *WorkbookCategoryUpdateOne) Mutation() *WorkbookCategoryMutation {
	return wcuo.mutation
}

// ClearProblems clears all "problems" edges to the Problem entity.
func (wcuo *WorkbookCategoryUpdateOne) ClearProblems() *WorkbookCategoryUpdateOne {
	wcuo.mutation.ClearProblems()
	return wcuo
}

// RemoveProblemIDs removes the "problems" edge to Problem entities by IDs.
func (wcuo *WorkbookCategoryUpdateOne) RemoveProblemIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.RemoveProblemIDs(ids...)
	return wcuo
}

// RemoveProblems removes "problems" edges to Problem entities.
func (wcuo *WorkbookCategoryUpdateOne) RemoveProblems(p ...*Problem) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wcuo.RemoveProblemIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (wcuo *WorkbookCategoryUpdateOne) ClearWorkbook() *WorkbookCategoryUpdateOne {
	wcuo.mutation.ClearWorkbook()
	return wcuo
}

// ClearWorkbookCategoryClassifications clears all "workbook_category_classifications" edges to the WorkbookCategoryClassification entity.
func (wcuo *WorkbookCategoryUpdateOne) ClearWorkbookCategoryClassifications() *WorkbookCategoryUpdateOne {
	wcuo.mutation.ClearWorkbookCategoryClassifications()
	return wcuo
}

// RemoveWorkbookCategoryClassificationIDs removes the "workbook_category_classifications" edge to WorkbookCategoryClassification entities by IDs.
func (wcuo *WorkbookCategoryUpdateOne) RemoveWorkbookCategoryClassificationIDs(ids ...uuid.UUID) *WorkbookCategoryUpdateOne {
	wcuo.mutation.RemoveWorkbookCategoryClassificationIDs(ids...)
	return wcuo
}

// RemoveWorkbookCategoryClassifications removes "workbook_category_classifications" edges to WorkbookCategoryClassification entities.
func (wcuo *WorkbookCategoryUpdateOne) RemoveWorkbookCategoryClassifications(w ...*WorkbookCategoryClassification) *WorkbookCategoryUpdateOne {
	ids := make([]uuid.UUID, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wcuo.RemoveWorkbookCategoryClassificationIDs(ids...)
}

// Where appends a list predicates to the WorkbookCategoryUpdate builder.
func (wcuo *WorkbookCategoryUpdateOne) Where(ps ...predicate.WorkbookCategory) *WorkbookCategoryUpdateOne {
	wcuo.mutation.Where(ps...)
	return wcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wcuo *WorkbookCategoryUpdateOne) Select(field string, fields ...string) *WorkbookCategoryUpdateOne {
	wcuo.fields = append([]string{field}, fields...)
	return wcuo
}

// Save executes the query and returns the updated WorkbookCategory entity.
func (wcuo *WorkbookCategoryUpdateOne) Save(ctx context.Context) (*WorkbookCategory, error) {
	wcuo.defaults()
	return withHooks(ctx, wcuo.sqlSave, wcuo.mutation, wcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wcuo *WorkbookCategoryUpdateOne) SaveX(ctx context.Context) *WorkbookCategory {
	node, err := wcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wcuo *WorkbookCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := wcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcuo *WorkbookCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := wcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wcuo *WorkbookCategoryUpdateOne) defaults() {
	if _, ok := wcuo.mutation.UpdatedAt(); !ok {
		v := workbookcategory.UpdateDefaultUpdatedAt()
		wcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wcuo *WorkbookCategoryUpdateOne) check() error {
	if v, ok := wcuo.mutation.Name(); ok {
		if err := workbookcategory.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategory.name": %w`, err)}
		}
	}
	if wcuo.mutation.WorkbookCleared() && len(wcuo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategory.workbook"`)
	}
	return nil
}

func (wcuo *WorkbookCategoryUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookCategory, err error) {
	if err := wcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategory.Table, workbookcategory.Columns, sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID))
	id, ok := wcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategory.FieldID)
		for _, f := range fields {
			if !workbookcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wcuo.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategory.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wcuo.mutation.Name(); ok {
		_spec.SetField(workbookcategory.FieldName, field.TypeString, value)
	}
	if wcuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.ProblemsTable,
			Columns: []string{workbookcategory.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.RemovedProblemsIDs(); len(nodes) > 0 && !wcuo.mutation.ProblemsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.ProblemsTable,
			Columns: []string{workbookcategory.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.ProblemsTable,
			Columns: []string{workbookcategory.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcuo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workbookcategory.WorkbookTable,
			Columns: []string{workbookcategory.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wcuo.mutation.WorkbookCategoryClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.WorkbookCategoryClassificationsTable,
			Columns: []string{workbookcategory.WorkbookCategoryClassificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.RemovedWorkbookCategoryClassificationsIDs(); len(nodes) > 0 && !wcuo.mutation.WorkbookCategoryClassificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.WorkbookCategoryClassificationsTable,
			Columns: []string{workbookcategory.WorkbookCategoryClassificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wcuo.mutation.WorkbookCategoryClassificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategory.WorkbookCategoryClassificationsTable,
			Columns: []string{workbookcategory.WorkbookCategoryClassificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkbookCategory{config: wcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wcuo.mutation.done = true
	return _node, nil
}
