// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookinvitationmember"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// WorkbookInvitationMember is the model entity for the WorkbookInvitationMember schema.
type WorkbookInvitationMember struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// EffectiveAt holds the value of the "effective_at" field.
	EffectiveAt time.Time `json:"effective_at,omitempty"`
	// IsInvited holds the value of the "is_invited" field.
	IsInvited bool `json:"is_invited,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID uuid.UUID `json:"role_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// WorkbookID holds the value of the "workbook_id" field.
	WorkbookID uuid.UUID `json:"workbook_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkbookInvitationMemberQuery when eager-loading is set.
	Edges        WorkbookInvitationMemberEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkbookInvitationMemberEdges holds the relations/edges for other nodes in the graph.
type WorkbookInvitationMemberEdges struct {
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Workbook holds the value of the workbook edge.
	Workbook *Workbook `json:"workbook,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookInvitationMemberEdges) RoleOrErr() (*Role, error) {
	if e.Role != nil {
		return e.Role, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: role.Label}
	}
	return nil, &NotLoadedError{edge: "role"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookInvitationMemberEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// WorkbookOrErr returns the Workbook value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkbookInvitationMemberEdges) WorkbookOrErr() (*Workbook, error) {
	if e.Workbook != nil {
		return e.Workbook, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: workbook.Label}
	}
	return nil, &NotLoadedError{edge: "workbook"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkbookInvitationMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workbookinvitationmember.FieldIsInvited:
			values[i] = new(sql.NullBool)
		case workbookinvitationmember.FieldCreatedAt, workbookinvitationmember.FieldUpdatedAt, workbookinvitationmember.FieldEffectiveAt:
			values[i] = new(sql.NullTime)
		case workbookinvitationmember.FieldID, workbookinvitationmember.FieldRoleID, workbookinvitationmember.FieldUserID, workbookinvitationmember.FieldWorkbookID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkbookInvitationMember fields.
func (wim *WorkbookInvitationMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workbookinvitationmember.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				wim.ID = *value
			}
		case workbookinvitationmember.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wim.CreatedAt = value.Time
			}
		case workbookinvitationmember.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wim.UpdatedAt = value.Time
			}
		case workbookinvitationmember.FieldEffectiveAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field effective_at", values[i])
			} else if value.Valid {
				wim.EffectiveAt = value.Time
			}
		case workbookinvitationmember.FieldIsInvited:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_invited", values[i])
			} else if value.Valid {
				wim.IsInvited = value.Bool
			}
		case workbookinvitationmember.FieldRoleID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value != nil {
				wim.RoleID = *value
			}
		case workbookinvitationmember.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				wim.UserID = *value
			}
		case workbookinvitationmember.FieldWorkbookID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_id", values[i])
			} else if value != nil {
				wim.WorkbookID = *value
			}
		default:
			wim.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkbookInvitationMember.
// This includes values selected through modifiers, order, etc.
func (wim *WorkbookInvitationMember) Value(name string) (ent.Value, error) {
	return wim.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the WorkbookInvitationMember entity.
func (wim *WorkbookInvitationMember) QueryRole() *RoleQuery {
	return NewWorkbookInvitationMemberClient(wim.config).QueryRole(wim)
}

// QueryUser queries the "user" edge of the WorkbookInvitationMember entity.
func (wim *WorkbookInvitationMember) QueryUser() *UserQuery {
	return NewWorkbookInvitationMemberClient(wim.config).QueryUser(wim)
}

// QueryWorkbook queries the "workbook" edge of the WorkbookInvitationMember entity.
func (wim *WorkbookInvitationMember) QueryWorkbook() *WorkbookQuery {
	return NewWorkbookInvitationMemberClient(wim.config).QueryWorkbook(wim)
}

// Update returns a builder for updating this WorkbookInvitationMember.
// Note that you need to call WorkbookInvitationMember.Unwrap() before calling this method if this WorkbookInvitationMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (wim *WorkbookInvitationMember) Update() *WorkbookInvitationMemberUpdateOne {
	return NewWorkbookInvitationMemberClient(wim.config).UpdateOne(wim)
}

// Unwrap unwraps the WorkbookInvitationMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wim *WorkbookInvitationMember) Unwrap() *WorkbookInvitationMember {
	_tx, ok := wim.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkbookInvitationMember is not a transactional entity")
	}
	wim.config.driver = _tx.drv
	return wim
}

// String implements the fmt.Stringer.
func (wim *WorkbookInvitationMember) String() string {
	var builder strings.Builder
	builder.WriteString("WorkbookInvitationMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wim.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wim.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wim.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("effective_at=")
	builder.WriteString(wim.EffectiveAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_invited=")
	builder.WriteString(fmt.Sprintf("%v", wim.IsInvited))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", wim.RoleID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", wim.UserID))
	builder.WriteString(", ")
	builder.WriteString("workbook_id=")
	builder.WriteString(fmt.Sprintf("%v", wim.WorkbookID))
	builder.WriteByte(')')
	return builder.String()
}

// WorkbookInvitationMembers is a parsable slice of WorkbookInvitationMember.
type WorkbookInvitationMembers []*WorkbookInvitationMember
