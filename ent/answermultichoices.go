// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/answermultichoices"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AnswerMultiChoices is the model entity for the AnswerMultiChoices schema.
type AnswerMultiChoices struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IsCorrect holds the value of the "is_correct" field.
	IsCorrect                    bool `json:"is_correct,omitempty"`
	problem_answer_multi_choices *int
	selectValues                 sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnswerMultiChoices) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case answermultichoices.FieldIsCorrect:
			values[i] = new(sql.NullBool)
		case answermultichoices.FieldID:
			values[i] = new(sql.NullInt64)
		case answermultichoices.FieldName:
			values[i] = new(sql.NullString)
		case answermultichoices.ForeignKeys[0]: // problem_answer_multi_choices
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnswerMultiChoices fields.
func (amc *AnswerMultiChoices) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case answermultichoices.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			amc.ID = int(value.Int64)
		case answermultichoices.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				amc.Name = value.String
			}
		case answermultichoices.FieldIsCorrect:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_correct", values[i])
			} else if value.Valid {
				amc.IsCorrect = value.Bool
			}
		case answermultichoices.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field problem_answer_multi_choices", value)
			} else if value.Valid {
				amc.problem_answer_multi_choices = new(int)
				*amc.problem_answer_multi_choices = int(value.Int64)
			}
		default:
			amc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AnswerMultiChoices.
// This includes values selected through modifiers, order, etc.
func (amc *AnswerMultiChoices) Value(name string) (ent.Value, error) {
	return amc.selectValues.Get(name)
}

// Update returns a builder for updating this AnswerMultiChoices.
// Note that you need to call AnswerMultiChoices.Unwrap() before calling this method if this AnswerMultiChoices
// was returned from a transaction, and the transaction was committed or rolled back.
func (amc *AnswerMultiChoices) Update() *AnswerMultiChoicesUpdateOne {
	return NewAnswerMultiChoicesClient(amc.config).UpdateOne(amc)
}

// Unwrap unwraps the AnswerMultiChoices entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (amc *AnswerMultiChoices) Unwrap() *AnswerMultiChoices {
	_tx, ok := amc.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnswerMultiChoices is not a transactional entity")
	}
	amc.config.driver = _tx.drv
	return amc
}

// String implements the fmt.Stringer.
func (amc *AnswerMultiChoices) String() string {
	var builder strings.Builder
	builder.WriteString("AnswerMultiChoices(")
	builder.WriteString(fmt.Sprintf("id=%v, ", amc.ID))
	builder.WriteString("name=")
	builder.WriteString(amc.Name)
	builder.WriteString(", ")
	builder.WriteString("is_correct=")
	builder.WriteString(fmt.Sprintf("%v", amc.IsCorrect))
	builder.WriteByte(')')
	return builder.String()
}

// AnswerMultiChoicesSlice is a parsable slice of AnswerMultiChoices.
type AnswerMultiChoicesSlice []*AnswerMultiChoices
