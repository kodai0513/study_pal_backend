// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DescriptionProblemUpdate is the builder for updating DescriptionProblem entities.
type DescriptionProblemUpdate struct {
	config
	hooks    []Hook
	mutation *DescriptionProblemMutation
}

// Where appends a list predicates to the DescriptionProblemUpdate builder.
func (dpu *DescriptionProblemUpdate) Where(ps ...predicate.DescriptionProblem) *DescriptionProblemUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetCreatedAt sets the "created_at" field.
func (dpu *DescriptionProblemUpdate) SetCreatedAt(t time.Time) *DescriptionProblemUpdate {
	dpu.mutation.SetCreatedAt(t)
	return dpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpu *DescriptionProblemUpdate) SetNillableCreatedAt(t *time.Time) *DescriptionProblemUpdate {
	if t != nil {
		dpu.SetCreatedAt(*t)
	}
	return dpu
}

// SetUpdatedAt sets the "updated_at" field.
func (dpu *DescriptionProblemUpdate) SetUpdatedAt(t time.Time) *DescriptionProblemUpdate {
	dpu.mutation.SetUpdatedAt(t)
	return dpu
}

// SetCorrectStatement sets the "correct_statement" field.
func (dpu *DescriptionProblemUpdate) SetCorrectStatement(s string) *DescriptionProblemUpdate {
	dpu.mutation.SetCorrectStatement(s)
	return dpu
}

// SetNillableCorrectStatement sets the "correct_statement" field if the given value is not nil.
func (dpu *DescriptionProblemUpdate) SetNillableCorrectStatement(s *string) *DescriptionProblemUpdate {
	if s != nil {
		dpu.SetCorrectStatement(*s)
	}
	return dpu
}

// SetStatement sets the "statement" field.
func (dpu *DescriptionProblemUpdate) SetStatement(s string) *DescriptionProblemUpdate {
	dpu.mutation.SetStatement(s)
	return dpu
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (dpu *DescriptionProblemUpdate) SetNillableStatement(s *string) *DescriptionProblemUpdate {
	if s != nil {
		dpu.SetStatement(*s)
	}
	return dpu
}

// SetWorkbookID sets the "workbook_id" field.
func (dpu *DescriptionProblemUpdate) SetWorkbookID(u uuid.UUID) *DescriptionProblemUpdate {
	dpu.mutation.SetWorkbookID(u)
	return dpu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (dpu *DescriptionProblemUpdate) SetNillableWorkbookID(u *uuid.UUID) *DescriptionProblemUpdate {
	if u != nil {
		dpu.SetWorkbookID(*u)
	}
	return dpu
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (dpu *DescriptionProblemUpdate) SetWorkbookCategoryID(u uuid.UUID) *DescriptionProblemUpdate {
	dpu.mutation.SetWorkbookCategoryID(u)
	return dpu
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (dpu *DescriptionProblemUpdate) SetNillableWorkbookCategoryID(u *uuid.UUID) *DescriptionProblemUpdate {
	if u != nil {
		dpu.SetWorkbookCategoryID(*u)
	}
	return dpu
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (dpu *DescriptionProblemUpdate) ClearWorkbookCategoryID() *DescriptionProblemUpdate {
	dpu.mutation.ClearWorkbookCategoryID()
	return dpu
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (dpu *DescriptionProblemUpdate) SetWorkbook(w *Workbook) *DescriptionProblemUpdate {
	return dpu.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (dpu *DescriptionProblemUpdate) SetWorkbookCategory(w *WorkbookCategory) *DescriptionProblemUpdate {
	return dpu.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the DescriptionProblemMutation object of the builder.
func (dpu *DescriptionProblemUpdate) Mutation() *DescriptionProblemMutation {
	return dpu.mutation
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (dpu *DescriptionProblemUpdate) ClearWorkbook() *DescriptionProblemUpdate {
	dpu.mutation.ClearWorkbook()
	return dpu
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (dpu *DescriptionProblemUpdate) ClearWorkbookCategory() *DescriptionProblemUpdate {
	dpu.mutation.ClearWorkbookCategory()
	return dpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DescriptionProblemUpdate) Save(ctx context.Context) (int, error) {
	dpu.defaults()
	return withHooks(ctx, dpu.sqlSave, dpu.mutation, dpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DescriptionProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DescriptionProblemUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DescriptionProblemUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpu *DescriptionProblemUpdate) defaults() {
	if _, ok := dpu.mutation.UpdatedAt(); !ok {
		v := descriptionproblem.UpdateDefaultUpdatedAt()
		dpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DescriptionProblemUpdate) check() error {
	if v, ok := dpu.mutation.CorrectStatement(); ok {
		if err := descriptionproblem.CorrectStatementValidator(v); err != nil {
			return &ValidationError{Name: "correct_statement", err: fmt.Errorf(`ent: validator failed for field "DescriptionProblem.correct_statement": %w`, err)}
		}
	}
	if v, ok := dpu.mutation.Statement(); ok {
		if err := descriptionproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "DescriptionProblem.statement": %w`, err)}
		}
	}
	if dpu.mutation.WorkbookCleared() && len(dpu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DescriptionProblem.workbook"`)
	}
	return nil
}

func (dpu *DescriptionProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(descriptionproblem.Table, descriptionproblem.Columns, sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID))
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.CreatedAt(); ok {
		_spec.SetField(descriptionproblem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dpu.mutation.UpdatedAt(); ok {
		_spec.SetField(descriptionproblem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dpu.mutation.CorrectStatement(); ok {
		_spec.SetField(descriptionproblem.FieldCorrectStatement, field.TypeString, value)
	}
	if value, ok := dpu.mutation.Statement(); ok {
		_spec.SetField(descriptionproblem.FieldStatement, field.TypeString, value)
	}
	if dpu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookTable,
			Columns: []string{descriptionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookTable,
			Columns: []string{descriptionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookCategoryTable,
			Columns: []string{descriptionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookCategoryTable,
			Columns: []string{descriptionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{descriptionproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dpu.mutation.done = true
	return n, nil
}

// DescriptionProblemUpdateOne is the builder for updating a single DescriptionProblem entity.
type DescriptionProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DescriptionProblemMutation
}

// SetCreatedAt sets the "created_at" field.
func (dpuo *DescriptionProblemUpdateOne) SetCreatedAt(t time.Time) *DescriptionProblemUpdateOne {
	dpuo.mutation.SetCreatedAt(t)
	return dpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpuo *DescriptionProblemUpdateOne) SetNillableCreatedAt(t *time.Time) *DescriptionProblemUpdateOne {
	if t != nil {
		dpuo.SetCreatedAt(*t)
	}
	return dpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dpuo *DescriptionProblemUpdateOne) SetUpdatedAt(t time.Time) *DescriptionProblemUpdateOne {
	dpuo.mutation.SetUpdatedAt(t)
	return dpuo
}

// SetCorrectStatement sets the "correct_statement" field.
func (dpuo *DescriptionProblemUpdateOne) SetCorrectStatement(s string) *DescriptionProblemUpdateOne {
	dpuo.mutation.SetCorrectStatement(s)
	return dpuo
}

// SetNillableCorrectStatement sets the "correct_statement" field if the given value is not nil.
func (dpuo *DescriptionProblemUpdateOne) SetNillableCorrectStatement(s *string) *DescriptionProblemUpdateOne {
	if s != nil {
		dpuo.SetCorrectStatement(*s)
	}
	return dpuo
}

// SetStatement sets the "statement" field.
func (dpuo *DescriptionProblemUpdateOne) SetStatement(s string) *DescriptionProblemUpdateOne {
	dpuo.mutation.SetStatement(s)
	return dpuo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (dpuo *DescriptionProblemUpdateOne) SetNillableStatement(s *string) *DescriptionProblemUpdateOne {
	if s != nil {
		dpuo.SetStatement(*s)
	}
	return dpuo
}

// SetWorkbookID sets the "workbook_id" field.
func (dpuo *DescriptionProblemUpdateOne) SetWorkbookID(u uuid.UUID) *DescriptionProblemUpdateOne {
	dpuo.mutation.SetWorkbookID(u)
	return dpuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (dpuo *DescriptionProblemUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *DescriptionProblemUpdateOne {
	if u != nil {
		dpuo.SetWorkbookID(*u)
	}
	return dpuo
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (dpuo *DescriptionProblemUpdateOne) SetWorkbookCategoryID(u uuid.UUID) *DescriptionProblemUpdateOne {
	dpuo.mutation.SetWorkbookCategoryID(u)
	return dpuo
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (dpuo *DescriptionProblemUpdateOne) SetNillableWorkbookCategoryID(u *uuid.UUID) *DescriptionProblemUpdateOne {
	if u != nil {
		dpuo.SetWorkbookCategoryID(*u)
	}
	return dpuo
}

// ClearWorkbookCategoryID clears the value of the "workbook_category_id" field.
func (dpuo *DescriptionProblemUpdateOne) ClearWorkbookCategoryID() *DescriptionProblemUpdateOne {
	dpuo.mutation.ClearWorkbookCategoryID()
	return dpuo
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (dpuo *DescriptionProblemUpdateOne) SetWorkbook(w *Workbook) *DescriptionProblemUpdateOne {
	return dpuo.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (dpuo *DescriptionProblemUpdateOne) SetWorkbookCategory(w *WorkbookCategory) *DescriptionProblemUpdateOne {
	return dpuo.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the DescriptionProblemMutation object of the builder.
func (dpuo *DescriptionProblemUpdateOne) Mutation() *DescriptionProblemMutation {
	return dpuo.mutation
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (dpuo *DescriptionProblemUpdateOne) ClearWorkbook() *DescriptionProblemUpdateOne {
	dpuo.mutation.ClearWorkbook()
	return dpuo
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (dpuo *DescriptionProblemUpdateOne) ClearWorkbookCategory() *DescriptionProblemUpdateOne {
	dpuo.mutation.ClearWorkbookCategory()
	return dpuo
}

// Where appends a list predicates to the DescriptionProblemUpdate builder.
func (dpuo *DescriptionProblemUpdateOne) Where(ps ...predicate.DescriptionProblem) *DescriptionProblemUpdateOne {
	dpuo.mutation.Where(ps...)
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DescriptionProblemUpdateOne) Select(field string, fields ...string) *DescriptionProblemUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DescriptionProblem entity.
func (dpuo *DescriptionProblemUpdateOne) Save(ctx context.Context) (*DescriptionProblem, error) {
	dpuo.defaults()
	return withHooks(ctx, dpuo.sqlSave, dpuo.mutation, dpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DescriptionProblemUpdateOne) SaveX(ctx context.Context) *DescriptionProblem {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DescriptionProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DescriptionProblemUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpuo *DescriptionProblemUpdateOne) defaults() {
	if _, ok := dpuo.mutation.UpdatedAt(); !ok {
		v := descriptionproblem.UpdateDefaultUpdatedAt()
		dpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DescriptionProblemUpdateOne) check() error {
	if v, ok := dpuo.mutation.CorrectStatement(); ok {
		if err := descriptionproblem.CorrectStatementValidator(v); err != nil {
			return &ValidationError{Name: "correct_statement", err: fmt.Errorf(`ent: validator failed for field "DescriptionProblem.correct_statement": %w`, err)}
		}
	}
	if v, ok := dpuo.mutation.Statement(); ok {
		if err := descriptionproblem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "DescriptionProblem.statement": %w`, err)}
		}
	}
	if dpuo.mutation.WorkbookCleared() && len(dpuo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "DescriptionProblem.workbook"`)
	}
	return nil
}

func (dpuo *DescriptionProblemUpdateOne) sqlSave(ctx context.Context) (_node *DescriptionProblem, err error) {
	if err := dpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(descriptionproblem.Table, descriptionproblem.Columns, sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID))
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DescriptionProblem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, descriptionproblem.FieldID)
		for _, f := range fields {
			if !descriptionproblem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != descriptionproblem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.CreatedAt(); ok {
		_spec.SetField(descriptionproblem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := dpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(descriptionproblem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := dpuo.mutation.CorrectStatement(); ok {
		_spec.SetField(descriptionproblem.FieldCorrectStatement, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.Statement(); ok {
		_spec.SetField(descriptionproblem.FieldStatement, field.TypeString, value)
	}
	if dpuo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookTable,
			Columns: []string{descriptionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookTable,
			Columns: []string{descriptionproblem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookCategoryTable,
			Columns: []string{descriptionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   descriptionproblem.WorkbookCategoryTable,
			Columns: []string{descriptionproblem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DescriptionProblem{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{descriptionproblem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dpuo.mutation.done = true
	return _node, nil
}
