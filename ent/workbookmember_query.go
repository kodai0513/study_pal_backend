// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/role"
	"study-pal-backend/ent/user"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookmember"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkbookMemberQuery is the builder for querying WorkbookMember entities.
type WorkbookMemberQuery struct {
	config
	ctx          *QueryContext
	order        []workbookmember.OrderOption
	inters       []Interceptor
	predicates   []predicate.WorkbookMember
	withRole     *RoleQuery
	withMember   *UserQuery
	withWorkbook *WorkbookQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkbookMemberQuery builder.
func (wmq *WorkbookMemberQuery) Where(ps ...predicate.WorkbookMember) *WorkbookMemberQuery {
	wmq.predicates = append(wmq.predicates, ps...)
	return wmq
}

// Limit the number of records to be returned by this query.
func (wmq *WorkbookMemberQuery) Limit(limit int) *WorkbookMemberQuery {
	wmq.ctx.Limit = &limit
	return wmq
}

// Offset to start from.
func (wmq *WorkbookMemberQuery) Offset(offset int) *WorkbookMemberQuery {
	wmq.ctx.Offset = &offset
	return wmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wmq *WorkbookMemberQuery) Unique(unique bool) *WorkbookMemberQuery {
	wmq.ctx.Unique = &unique
	return wmq
}

// Order specifies how the records should be ordered.
func (wmq *WorkbookMemberQuery) Order(o ...workbookmember.OrderOption) *WorkbookMemberQuery {
	wmq.order = append(wmq.order, o...)
	return wmq
}

// QueryRole chains the current query on the "role" edge.
func (wmq *WorkbookMemberQuery) QueryRole() *RoleQuery {
	query := (&RoleClient{config: wmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookmember.Table, workbookmember.FieldID, selector),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbookmember.RoleTable, workbookmember.RoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(wmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMember chains the current query on the "member" edge.
func (wmq *WorkbookMemberQuery) QueryMember() *UserQuery {
	query := (&UserClient{config: wmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookmember.Table, workbookmember.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbookmember.MemberTable, workbookmember.MemberColumn),
		)
		fromU = sqlgraph.SetNeighbors(wmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkbook chains the current query on the "workbook" edge.
func (wmq *WorkbookMemberQuery) QueryWorkbook() *WorkbookQuery {
	query := (&WorkbookClient{config: wmq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workbookmember.Table, workbookmember.FieldID, selector),
			sqlgraph.To(workbook.Table, workbook.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workbookmember.WorkbookTable, workbookmember.WorkbookColumn),
		)
		fromU = sqlgraph.SetNeighbors(wmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkbookMember entity from the query.
// Returns a *NotFoundError when no WorkbookMember was found.
func (wmq *WorkbookMemberQuery) First(ctx context.Context) (*WorkbookMember, error) {
	nodes, err := wmq.Limit(1).All(setContextOp(ctx, wmq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workbookmember.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) FirstX(ctx context.Context) *WorkbookMember {
	node, err := wmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkbookMember ID from the query.
// Returns a *NotFoundError when no WorkbookMember ID was found.
func (wmq *WorkbookMemberQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wmq.Limit(1).IDs(setContextOp(ctx, wmq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workbookmember.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) FirstIDX(ctx context.Context) int {
	id, err := wmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkbookMember entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkbookMember entity is found.
// Returns a *NotFoundError when no WorkbookMember entities are found.
func (wmq *WorkbookMemberQuery) Only(ctx context.Context) (*WorkbookMember, error) {
	nodes, err := wmq.Limit(2).All(setContextOp(ctx, wmq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workbookmember.Label}
	default:
		return nil, &NotSingularError{workbookmember.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) OnlyX(ctx context.Context) *WorkbookMember {
	node, err := wmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkbookMember ID in the query.
// Returns a *NotSingularError when more than one WorkbookMember ID is found.
// Returns a *NotFoundError when no entities are found.
func (wmq *WorkbookMemberQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wmq.Limit(2).IDs(setContextOp(ctx, wmq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workbookmember.Label}
	default:
		err = &NotSingularError{workbookmember.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) OnlyIDX(ctx context.Context) int {
	id, err := wmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkbookMembers.
func (wmq *WorkbookMemberQuery) All(ctx context.Context) ([]*WorkbookMember, error) {
	ctx = setContextOp(ctx, wmq.ctx, ent.OpQueryAll)
	if err := wmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkbookMember, *WorkbookMemberQuery]()
	return withInterceptors[[]*WorkbookMember](ctx, wmq, qr, wmq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) AllX(ctx context.Context) []*WorkbookMember {
	nodes, err := wmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkbookMember IDs.
func (wmq *WorkbookMemberQuery) IDs(ctx context.Context) (ids []int, err error) {
	if wmq.ctx.Unique == nil && wmq.path != nil {
		wmq.Unique(true)
	}
	ctx = setContextOp(ctx, wmq.ctx, ent.OpQueryIDs)
	if err = wmq.Select(workbookmember.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) IDsX(ctx context.Context) []int {
	ids, err := wmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wmq *WorkbookMemberQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wmq.ctx, ent.OpQueryCount)
	if err := wmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wmq, querierCount[*WorkbookMemberQuery](), wmq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) CountX(ctx context.Context) int {
	count, err := wmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wmq *WorkbookMemberQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wmq.ctx, ent.OpQueryExist)
	switch _, err := wmq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wmq *WorkbookMemberQuery) ExistX(ctx context.Context) bool {
	exist, err := wmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkbookMemberQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wmq *WorkbookMemberQuery) Clone() *WorkbookMemberQuery {
	if wmq == nil {
		return nil
	}
	return &WorkbookMemberQuery{
		config:       wmq.config,
		ctx:          wmq.ctx.Clone(),
		order:        append([]workbookmember.OrderOption{}, wmq.order...),
		inters:       append([]Interceptor{}, wmq.inters...),
		predicates:   append([]predicate.WorkbookMember{}, wmq.predicates...),
		withRole:     wmq.withRole.Clone(),
		withMember:   wmq.withMember.Clone(),
		withWorkbook: wmq.withWorkbook.Clone(),
		// clone intermediate query.
		sql:  wmq.sql.Clone(),
		path: wmq.path,
	}
}

// WithRole tells the query-builder to eager-load the nodes that are connected to
// the "role" edge. The optional arguments are used to configure the query builder of the edge.
func (wmq *WorkbookMemberQuery) WithRole(opts ...func(*RoleQuery)) *WorkbookMemberQuery {
	query := (&RoleClient{config: wmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wmq.withRole = query
	return wmq
}

// WithMember tells the query-builder to eager-load the nodes that are connected to
// the "member" edge. The optional arguments are used to configure the query builder of the edge.
func (wmq *WorkbookMemberQuery) WithMember(opts ...func(*UserQuery)) *WorkbookMemberQuery {
	query := (&UserClient{config: wmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wmq.withMember = query
	return wmq
}

// WithWorkbook tells the query-builder to eager-load the nodes that are connected to
// the "workbook" edge. The optional arguments are used to configure the query builder of the edge.
func (wmq *WorkbookMemberQuery) WithWorkbook(opts ...func(*WorkbookQuery)) *WorkbookMemberQuery {
	query := (&WorkbookClient{config: wmq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wmq.withWorkbook = query
	return wmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkbookMember.Query().
//		GroupBy(workbookmember.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wmq *WorkbookMemberQuery) GroupBy(field string, fields ...string) *WorkbookMemberGroupBy {
	wmq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkbookMemberGroupBy{build: wmq}
	grbuild.flds = &wmq.ctx.Fields
	grbuild.label = workbookmember.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.WorkbookMember.Query().
//		Select(workbookmember.FieldCreatedAt).
//		Scan(ctx, &v)
func (wmq *WorkbookMemberQuery) Select(fields ...string) *WorkbookMemberSelect {
	wmq.ctx.Fields = append(wmq.ctx.Fields, fields...)
	sbuild := &WorkbookMemberSelect{WorkbookMemberQuery: wmq}
	sbuild.label = workbookmember.Label
	sbuild.flds, sbuild.scan = &wmq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkbookMemberSelect configured with the given aggregations.
func (wmq *WorkbookMemberQuery) Aggregate(fns ...AggregateFunc) *WorkbookMemberSelect {
	return wmq.Select().Aggregate(fns...)
}

func (wmq *WorkbookMemberQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wmq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wmq); err != nil {
				return err
			}
		}
	}
	for _, f := range wmq.ctx.Fields {
		if !workbookmember.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wmq.path != nil {
		prev, err := wmq.path(ctx)
		if err != nil {
			return err
		}
		wmq.sql = prev
	}
	return nil
}

func (wmq *WorkbookMemberQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkbookMember, error) {
	var (
		nodes       = []*WorkbookMember{}
		_spec       = wmq.querySpec()
		loadedTypes = [3]bool{
			wmq.withRole != nil,
			wmq.withMember != nil,
			wmq.withWorkbook != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkbookMember).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkbookMember{config: wmq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wmq.withRole; query != nil {
		if err := wmq.loadRole(ctx, query, nodes, nil,
			func(n *WorkbookMember, e *Role) { n.Edges.Role = e }); err != nil {
			return nil, err
		}
	}
	if query := wmq.withMember; query != nil {
		if err := wmq.loadMember(ctx, query, nodes, nil,
			func(n *WorkbookMember, e *User) { n.Edges.Member = e }); err != nil {
			return nil, err
		}
	}
	if query := wmq.withWorkbook; query != nil {
		if err := wmq.loadWorkbook(ctx, query, nodes, nil,
			func(n *WorkbookMember, e *Workbook) { n.Edges.Workbook = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wmq *WorkbookMemberQuery) loadRole(ctx context.Context, query *RoleQuery, nodes []*WorkbookMember, init func(*WorkbookMember), assign func(*WorkbookMember, *Role)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*WorkbookMember)
	for i := range nodes {
		fk := nodes[i].RoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(role.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wmq *WorkbookMemberQuery) loadMember(ctx context.Context, query *UserQuery, nodes []*WorkbookMember, init func(*WorkbookMember), assign func(*WorkbookMember, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*WorkbookMember)
	for i := range nodes {
		fk := nodes[i].MemberID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "member_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (wmq *WorkbookMemberQuery) loadWorkbook(ctx context.Context, query *WorkbookQuery, nodes []*WorkbookMember, init func(*WorkbookMember), assign func(*WorkbookMember, *Workbook)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*WorkbookMember)
	for i := range nodes {
		fk := nodes[i].WorkbookID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workbook.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "workbook_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wmq *WorkbookMemberQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wmq.querySpec()
	_spec.Node.Columns = wmq.ctx.Fields
	if len(wmq.ctx.Fields) > 0 {
		_spec.Unique = wmq.ctx.Unique != nil && *wmq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wmq.driver, _spec)
}

func (wmq *WorkbookMemberQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workbookmember.Table, workbookmember.Columns, sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeInt))
	_spec.From = wmq.sql
	if unique := wmq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wmq.path != nil {
		_spec.Unique = true
	}
	if fields := wmq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookmember.FieldID)
		for i := range fields {
			if fields[i] != workbookmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if wmq.withRole != nil {
			_spec.Node.AddColumnOnce(workbookmember.FieldRoleID)
		}
		if wmq.withMember != nil {
			_spec.Node.AddColumnOnce(workbookmember.FieldMemberID)
		}
		if wmq.withWorkbook != nil {
			_spec.Node.AddColumnOnce(workbookmember.FieldWorkbookID)
		}
	}
	if ps := wmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wmq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wmq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wmq *WorkbookMemberQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wmq.driver.Dialect())
	t1 := builder.Table(workbookmember.Table)
	columns := wmq.ctx.Fields
	if len(columns) == 0 {
		columns = workbookmember.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wmq.sql != nil {
		selector = wmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wmq.ctx.Unique != nil && *wmq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range wmq.predicates {
		p(selector)
	}
	for _, p := range wmq.order {
		p(selector)
	}
	if offset := wmq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wmq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkbookMemberGroupBy is the group-by builder for WorkbookMember entities.
type WorkbookMemberGroupBy struct {
	selector
	build *WorkbookMemberQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wmgb *WorkbookMemberGroupBy) Aggregate(fns ...AggregateFunc) *WorkbookMemberGroupBy {
	wmgb.fns = append(wmgb.fns, fns...)
	return wmgb
}

// Scan applies the selector query and scans the result into the given value.
func (wmgb *WorkbookMemberGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wmgb.build.ctx, ent.OpQueryGroupBy)
	if err := wmgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkbookMemberQuery, *WorkbookMemberGroupBy](ctx, wmgb.build, wmgb, wmgb.build.inters, v)
}

func (wmgb *WorkbookMemberGroupBy) sqlScan(ctx context.Context, root *WorkbookMemberQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wmgb.fns))
	for _, fn := range wmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wmgb.flds)+len(wmgb.fns))
		for _, f := range *wmgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wmgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wmgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkbookMemberSelect is the builder for selecting fields of WorkbookMember entities.
type WorkbookMemberSelect struct {
	*WorkbookMemberQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wms *WorkbookMemberSelect) Aggregate(fns ...AggregateFunc) *WorkbookMemberSelect {
	wms.fns = append(wms.fns, fns...)
	return wms
}

// Scan applies the selector query and scans the result into the given value.
func (wms *WorkbookMemberSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wms.ctx, ent.OpQuerySelect)
	if err := wms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkbookMemberQuery, *WorkbookMemberSelect](ctx, wms.WorkbookMemberQuery, wms, wms.inters, v)
}

func (wms *WorkbookMemberSelect) sqlScan(ctx context.Context, root *WorkbookMemberQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wms.fns))
	for _, fn := range wms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
