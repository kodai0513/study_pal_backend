// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbookcategoryclassification"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryClassificationCreate is the builder for creating a WorkbookCategoryClassification entity.
type WorkbookCategoryClassificationCreate struct {
	config
	mutation *WorkbookCategoryClassificationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (wccc *WorkbookCategoryClassificationCreate) SetCreatedAt(t time.Time) *WorkbookCategoryClassificationCreate {
	wccc.mutation.SetCreatedAt(t)
	return wccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wccc *WorkbookCategoryClassificationCreate) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryClassificationCreate {
	if t != nil {
		wccc.SetCreatedAt(*t)
	}
	return wccc
}

// SetUpdatedAt sets the "updated_at" field.
func (wccc *WorkbookCategoryClassificationCreate) SetUpdatedAt(t time.Time) *WorkbookCategoryClassificationCreate {
	wccc.mutation.SetUpdatedAt(t)
	return wccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wccc *WorkbookCategoryClassificationCreate) SetNillableUpdatedAt(t *time.Time) *WorkbookCategoryClassificationCreate {
	if t != nil {
		wccc.SetUpdatedAt(*t)
	}
	return wccc
}

// SetName sets the "name" field.
func (wccc *WorkbookCategoryClassificationCreate) SetName(s string) *WorkbookCategoryClassificationCreate {
	wccc.mutation.SetName(s)
	return wccc
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (wccc *WorkbookCategoryClassificationCreate) SetWorkbookCategoryID(u uuid.UUID) *WorkbookCategoryClassificationCreate {
	wccc.mutation.SetWorkbookCategoryID(u)
	return wccc
}

// SetID sets the "id" field.
func (wccc *WorkbookCategoryClassificationCreate) SetID(u uuid.UUID) *WorkbookCategoryClassificationCreate {
	wccc.mutation.SetID(u)
	return wccc
}

// AddProblemIDs adds the "problems" edge to the Problem entity by IDs.
func (wccc *WorkbookCategoryClassificationCreate) AddProblemIDs(ids ...uuid.UUID) *WorkbookCategoryClassificationCreate {
	wccc.mutation.AddProblemIDs(ids...)
	return wccc
}

// AddProblems adds the "problems" edges to the Problem entity.
func (wccc *WorkbookCategoryClassificationCreate) AddProblems(p ...*Problem) *WorkbookCategoryClassificationCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return wccc.AddProblemIDs(ids...)
}

// Mutation returns the WorkbookCategoryClassificationMutation object of the builder.
func (wccc *WorkbookCategoryClassificationCreate) Mutation() *WorkbookCategoryClassificationMutation {
	return wccc.mutation
}

// Save creates the WorkbookCategoryClassification in the database.
func (wccc *WorkbookCategoryClassificationCreate) Save(ctx context.Context) (*WorkbookCategoryClassification, error) {
	wccc.defaults()
	return withHooks(ctx, wccc.sqlSave, wccc.mutation, wccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wccc *WorkbookCategoryClassificationCreate) SaveX(ctx context.Context) *WorkbookCategoryClassification {
	v, err := wccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wccc *WorkbookCategoryClassificationCreate) Exec(ctx context.Context) error {
	_, err := wccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccc *WorkbookCategoryClassificationCreate) ExecX(ctx context.Context) {
	if err := wccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wccc *WorkbookCategoryClassificationCreate) defaults() {
	if _, ok := wccc.mutation.CreatedAt(); !ok {
		v := workbookcategoryclassification.DefaultCreatedAt()
		wccc.mutation.SetCreatedAt(v)
	}
	if _, ok := wccc.mutation.UpdatedAt(); !ok {
		v := workbookcategoryclassification.DefaultUpdatedAt()
		wccc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wccc *WorkbookCategoryClassificationCreate) check() error {
	if _, ok := wccc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkbookCategoryClassification.created_at"`)}
	}
	if _, ok := wccc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkbookCategoryClassification.updated_at"`)}
	}
	if _, ok := wccc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "WorkbookCategoryClassification.name"`)}
	}
	if v, ok := wccc.mutation.Name(); ok {
		if err := workbookcategoryclassification.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "WorkbookCategoryClassification.name": %w`, err)}
		}
	}
	if _, ok := wccc.mutation.WorkbookCategoryID(); !ok {
		return &ValidationError{Name: "workbook_category_id", err: errors.New(`ent: missing required field "WorkbookCategoryClassification.workbook_category_id"`)}
	}
	return nil
}

func (wccc *WorkbookCategoryClassificationCreate) sqlSave(ctx context.Context) (*WorkbookCategoryClassification, error) {
	if err := wccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	wccc.mutation.id = &_node.ID
	wccc.mutation.done = true
	return _node, nil
}

func (wccc *WorkbookCategoryClassificationCreate) createSpec() (*WorkbookCategoryClassification, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkbookCategoryClassification{config: wccc.config}
		_spec = sqlgraph.NewCreateSpec(workbookcategoryclassification.Table, sqlgraph.NewFieldSpec(workbookcategoryclassification.FieldID, field.TypeUUID))
	)
	if id, ok := wccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := wccc.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategoryclassification.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wccc.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategoryclassification.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wccc.mutation.Name(); ok {
		_spec.SetField(workbookcategoryclassification.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wccc.mutation.WorkbookCategoryID(); ok {
		_spec.SetField(workbookcategoryclassification.FieldWorkbookCategoryID, field.TypeUUID, value)
		_node.WorkbookCategoryID = value
	}
	if nodes := wccc.mutation.ProblemsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbookcategoryclassification.ProblemsTable,
			Columns: []string{workbookcategoryclassification.ProblemsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(problem.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkbookCategoryClassificationCreateBulk is the builder for creating many WorkbookCategoryClassification entities in bulk.
type WorkbookCategoryClassificationCreateBulk struct {
	config
	err      error
	builders []*WorkbookCategoryClassificationCreate
}

// Save creates the WorkbookCategoryClassification entities in the database.
func (wcccb *WorkbookCategoryClassificationCreateBulk) Save(ctx context.Context) ([]*WorkbookCategoryClassification, error) {
	if wcccb.err != nil {
		return nil, wcccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcccb.builders))
	nodes := make([]*WorkbookCategoryClassification, len(wcccb.builders))
	mutators := make([]Mutator, len(wcccb.builders))
	for i := range wcccb.builders {
		func(i int, root context.Context) {
			builder := wcccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkbookCategoryClassificationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcccb *WorkbookCategoryClassificationCreateBulk) SaveX(ctx context.Context) []*WorkbookCategoryClassification {
	v, err := wcccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcccb *WorkbookCategoryClassificationCreateBulk) Exec(ctx context.Context) error {
	_, err := wcccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcccb *WorkbookCategoryClassificationCreateBulk) ExecX(ctx context.Context) {
	if err := wcccb.Exec(ctx); err != nil {
		panic(err)
	}
}
