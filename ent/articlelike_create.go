// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/article"
	"study-pal-backend/ent/articlelike"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ArticleLikeCreate is the builder for creating a ArticleLike entity.
type ArticleLikeCreate struct {
	config
	mutation *ArticleLikeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (alc *ArticleLikeCreate) SetCreatedAt(t time.Time) *ArticleLikeCreate {
	alc.mutation.SetCreatedAt(t)
	return alc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (alc *ArticleLikeCreate) SetNillableCreatedAt(t *time.Time) *ArticleLikeCreate {
	if t != nil {
		alc.SetCreatedAt(*t)
	}
	return alc
}

// SetUpdatedAt sets the "updated_at" field.
func (alc *ArticleLikeCreate) SetUpdatedAt(t time.Time) *ArticleLikeCreate {
	alc.mutation.SetUpdatedAt(t)
	return alc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (alc *ArticleLikeCreate) SetNillableUpdatedAt(t *time.Time) *ArticleLikeCreate {
	if t != nil {
		alc.SetUpdatedAt(*t)
	}
	return alc
}

// SetArticleID sets the "article_id" field.
func (alc *ArticleLikeCreate) SetArticleID(u uuid.UUID) *ArticleLikeCreate {
	alc.mutation.SetArticleID(u)
	return alc
}

// SetUserID sets the "user_id" field.
func (alc *ArticleLikeCreate) SetUserID(u uuid.UUID) *ArticleLikeCreate {
	alc.mutation.SetUserID(u)
	return alc
}

// SetID sets the "id" field.
func (alc *ArticleLikeCreate) SetID(u uuid.UUID) *ArticleLikeCreate {
	alc.mutation.SetID(u)
	return alc
}

// SetArticle sets the "article" edge to the Article entity.
func (alc *ArticleLikeCreate) SetArticle(a *Article) *ArticleLikeCreate {
	return alc.SetArticleID(a.ID)
}

// Mutation returns the ArticleLikeMutation object of the builder.
func (alc *ArticleLikeCreate) Mutation() *ArticleLikeMutation {
	return alc.mutation
}

// Save creates the ArticleLike in the database.
func (alc *ArticleLikeCreate) Save(ctx context.Context) (*ArticleLike, error) {
	alc.defaults()
	return withHooks(ctx, alc.sqlSave, alc.mutation, alc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (alc *ArticleLikeCreate) SaveX(ctx context.Context) *ArticleLike {
	v, err := alc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alc *ArticleLikeCreate) Exec(ctx context.Context) error {
	_, err := alc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alc *ArticleLikeCreate) ExecX(ctx context.Context) {
	if err := alc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (alc *ArticleLikeCreate) defaults() {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		v := articlelike.DefaultCreatedAt()
		alc.mutation.SetCreatedAt(v)
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		v := articlelike.DefaultUpdatedAt()
		alc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alc *ArticleLikeCreate) check() error {
	if _, ok := alc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ArticleLike.created_at"`)}
	}
	if _, ok := alc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ArticleLike.updated_at"`)}
	}
	if _, ok := alc.mutation.ArticleID(); !ok {
		return &ValidationError{Name: "article_id", err: errors.New(`ent: missing required field "ArticleLike.article_id"`)}
	}
	if _, ok := alc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ArticleLike.user_id"`)}
	}
	if len(alc.mutation.ArticleIDs()) == 0 {
		return &ValidationError{Name: "article", err: errors.New(`ent: missing required edge "ArticleLike.article"`)}
	}
	return nil
}

func (alc *ArticleLikeCreate) sqlSave(ctx context.Context) (*ArticleLike, error) {
	if err := alc.check(); err != nil {
		return nil, err
	}
	_node, _spec := alc.createSpec()
	if err := sqlgraph.CreateNode(ctx, alc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	alc.mutation.id = &_node.ID
	alc.mutation.done = true
	return _node, nil
}

func (alc *ArticleLikeCreate) createSpec() (*ArticleLike, *sqlgraph.CreateSpec) {
	var (
		_node = &ArticleLike{config: alc.config}
		_spec = sqlgraph.NewCreateSpec(articlelike.Table, sqlgraph.NewFieldSpec(articlelike.FieldID, field.TypeUUID))
	)
	if id, ok := alc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := alc.mutation.CreatedAt(); ok {
		_spec.SetField(articlelike.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := alc.mutation.UpdatedAt(); ok {
		_spec.SetField(articlelike.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := alc.mutation.UserID(); ok {
		_spec.SetField(articlelike.FieldUserID, field.TypeUUID, value)
		_node.UserID = value
	}
	if nodes := alc.mutation.ArticleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   articlelike.ArticleTable,
			Columns: []string{articlelike.ArticleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(article.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ArticleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ArticleLikeCreateBulk is the builder for creating many ArticleLike entities in bulk.
type ArticleLikeCreateBulk struct {
	config
	err      error
	builders []*ArticleLikeCreate
}

// Save creates the ArticleLike entities in the database.
func (alcb *ArticleLikeCreateBulk) Save(ctx context.Context) ([]*ArticleLike, error) {
	if alcb.err != nil {
		return nil, alcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(alcb.builders))
	nodes := make([]*ArticleLike, len(alcb.builders))
	mutators := make([]Mutator, len(alcb.builders))
	for i := range alcb.builders {
		func(i int, root context.Context) {
			builder := alcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArticleLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, alcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, alcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, alcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (alcb *ArticleLikeCreateBulk) SaveX(ctx context.Context) []*ArticleLike {
	v, err := alcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (alcb *ArticleLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := alcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alcb *ArticleLikeCreateBulk) ExecX(ctx context.Context) {
	if err := alcb.Exec(ctx); err != nil {
		panic(err)
	}
}
