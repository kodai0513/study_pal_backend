// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategoryclosure"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// WorkbookCategoryClosureUpdate is the builder for updating WorkbookCategoryClosure entities.
type WorkbookCategoryClosureUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookCategoryClosureMutation
}

// Where appends a list predicates to the WorkbookCategoryClosureUpdate builder.
func (wccu *WorkbookCategoryClosureUpdate) Where(ps ...predicate.WorkbookCategoryClosure) *WorkbookCategoryClosureUpdate {
	wccu.mutation.Where(ps...)
	return wccu
}

// SetCreatedAt sets the "created_at" field.
func (wccu *WorkbookCategoryClosureUpdate) SetCreatedAt(t time.Time) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetCreatedAt(t)
	return wccu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryClosureUpdate {
	if t != nil {
		wccu.SetCreatedAt(*t)
	}
	return wccu
}

// SetUpdatedAt sets the "updated_at" field.
func (wccu *WorkbookCategoryClosureUpdate) SetUpdatedAt(t time.Time) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetUpdatedAt(t)
	return wccu
}

// SetWorkbookID sets the "workbook_id" field.
func (wccu *WorkbookCategoryClosureUpdate) SetWorkbookID(u uuid.UUID) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetWorkbookID(u)
	return wccu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableWorkbookID(u *uuid.UUID) *WorkbookCategoryClosureUpdate {
	if u != nil {
		wccu.SetWorkbookID(*u)
	}
	return wccu
}

// SetChildID sets the "child_id" field.
func (wccu *WorkbookCategoryClosureUpdate) SetChildID(u uuid.UUID) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetChildID(u)
	return wccu
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableChildID(u *uuid.UUID) *WorkbookCategoryClosureUpdate {
	if u != nil {
		wccu.SetChildID(*u)
	}
	return wccu
}

// SetIsRoot sets the "is_root" field.
func (wccu *WorkbookCategoryClosureUpdate) SetIsRoot(b bool) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetIsRoot(b)
	return wccu
}

// SetNillableIsRoot sets the "is_root" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableIsRoot(b *bool) *WorkbookCategoryClosureUpdate {
	if b != nil {
		wccu.SetIsRoot(*b)
	}
	return wccu
}

// SetParentID sets the "parent_id" field.
func (wccu *WorkbookCategoryClosureUpdate) SetParentID(u uuid.UUID) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetParentID(u)
	return wccu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableParentID(u *uuid.UUID) *WorkbookCategoryClosureUpdate {
	if u != nil {
		wccu.SetParentID(*u)
	}
	return wccu
}

// SetPosition sets the "position" field.
func (wccu *WorkbookCategoryClosureUpdate) SetPosition(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.ResetPosition()
	wccu.mutation.SetPosition(i)
	return wccu
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillablePosition(i *int) *WorkbookCategoryClosureUpdate {
	if i != nil {
		wccu.SetPosition(*i)
	}
	return wccu
}

// AddPosition adds i to the "position" field.
func (wccu *WorkbookCategoryClosureUpdate) AddPosition(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.AddPosition(i)
	return wccu
}

// SetLevel sets the "level" field.
func (wccu *WorkbookCategoryClosureUpdate) SetLevel(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.ResetLevel()
	wccu.mutation.SetLevel(i)
	return wccu
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableLevel(i *int) *WorkbookCategoryClosureUpdate {
	if i != nil {
		wccu.SetLevel(*i)
	}
	return wccu
}

// AddLevel adds i to the "level" field.
func (wccu *WorkbookCategoryClosureUpdate) AddLevel(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.AddLevel(i)
	return wccu
}

// SetChildCategoryID sets the "child_category" edge to the WorkbookCategory entity by ID.
func (wccu *WorkbookCategoryClosureUpdate) SetChildCategoryID(id uuid.UUID) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetChildCategoryID(id)
	return wccu
}

// SetChildCategory sets the "child_category" edge to the WorkbookCategory entity.
func (wccu *WorkbookCategoryClosureUpdate) SetChildCategory(w *WorkbookCategory) *WorkbookCategoryClosureUpdate {
	return wccu.SetChildCategoryID(w.ID)
}

// SetParentCategoryID sets the "parent_category" edge to the WorkbookCategory entity by ID.
func (wccu *WorkbookCategoryClosureUpdate) SetParentCategoryID(id uuid.UUID) *WorkbookCategoryClosureUpdate {
	wccu.mutation.SetParentCategoryID(id)
	return wccu
}

// SetParentCategory sets the "parent_category" edge to the WorkbookCategory entity.
func (wccu *WorkbookCategoryClosureUpdate) SetParentCategory(w *WorkbookCategory) *WorkbookCategoryClosureUpdate {
	return wccu.SetParentCategoryID(w.ID)
}

// Mutation returns the WorkbookCategoryClosureMutation object of the builder.
func (wccu *WorkbookCategoryClosureUpdate) Mutation() *WorkbookCategoryClosureMutation {
	return wccu.mutation
}

// ClearChildCategory clears the "child_category" edge to the WorkbookCategory entity.
func (wccu *WorkbookCategoryClosureUpdate) ClearChildCategory() *WorkbookCategoryClosureUpdate {
	wccu.mutation.ClearChildCategory()
	return wccu
}

// ClearParentCategory clears the "parent_category" edge to the WorkbookCategory entity.
func (wccu *WorkbookCategoryClosureUpdate) ClearParentCategory() *WorkbookCategoryClosureUpdate {
	wccu.mutation.ClearParentCategory()
	return wccu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wccu *WorkbookCategoryClosureUpdate) Save(ctx context.Context) (int, error) {
	wccu.defaults()
	return withHooks(ctx, wccu.sqlSave, wccu.mutation, wccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wccu *WorkbookCategoryClosureUpdate) SaveX(ctx context.Context) int {
	affected, err := wccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wccu *WorkbookCategoryClosureUpdate) Exec(ctx context.Context) error {
	_, err := wccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccu *WorkbookCategoryClosureUpdate) ExecX(ctx context.Context) {
	if err := wccu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wccu *WorkbookCategoryClosureUpdate) defaults() {
	if _, ok := wccu.mutation.UpdatedAt(); !ok {
		v := workbookcategoryclosure.UpdateDefaultUpdatedAt()
		wccu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wccu *WorkbookCategoryClosureUpdate) check() error {
	if wccu.mutation.ChildCategoryCleared() && len(wccu.mutation.ChildCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategoryClosure.child_category"`)
	}
	if wccu.mutation.ParentCategoryCleared() && len(wccu.mutation.ParentCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategoryClosure.parent_category"`)
	}
	return nil
}

func (wccu *WorkbookCategoryClosureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wccu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategoryclosure.Table, workbookcategoryclosure.Columns, sqlgraph.NewFieldSpec(workbookcategoryclosure.FieldID, field.TypeUUID))
	if ps := wccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wccu.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategoryclosure.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wccu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategoryclosure.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wccu.mutation.WorkbookID(); ok {
		_spec.SetField(workbookcategoryclosure.FieldWorkbookID, field.TypeUUID, value)
	}
	if value, ok := wccu.mutation.IsRoot(); ok {
		_spec.SetField(workbookcategoryclosure.FieldIsRoot, field.TypeBool, value)
	}
	if value, ok := wccu.mutation.Position(); ok {
		_spec.SetField(workbookcategoryclosure.FieldPosition, field.TypeInt, value)
	}
	if value, ok := wccu.mutation.AddedPosition(); ok {
		_spec.AddField(workbookcategoryclosure.FieldPosition, field.TypeInt, value)
	}
	if value, ok := wccu.mutation.Level(); ok {
		_spec.SetField(workbookcategoryclosure.FieldLevel, field.TypeInt, value)
	}
	if value, ok := wccu.mutation.AddedLevel(); ok {
		_spec.AddField(workbookcategoryclosure.FieldLevel, field.TypeInt, value)
	}
	if wccu.mutation.ChildCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ChildCategoryTable,
			Columns: []string{workbookcategoryclosure.ChildCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccu.mutation.ChildCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ChildCategoryTable,
			Columns: []string{workbookcategoryclosure.ChildCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wccu.mutation.ParentCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ParentCategoryTable,
			Columns: []string{workbookcategoryclosure.ParentCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccu.mutation.ParentCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ParentCategoryTable,
			Columns: []string{workbookcategoryclosure.ParentCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategoryclosure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wccu.mutation.done = true
	return n, nil
}

// WorkbookCategoryClosureUpdateOne is the builder for updating a single WorkbookCategoryClosure entity.
type WorkbookCategoryClosureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookCategoryClosureMutation
}

// SetCreatedAt sets the "created_at" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetCreatedAt(t time.Time) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetCreatedAt(t)
	return wccuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookCategoryClosureUpdateOne {
	if t != nil {
		wccuo.SetCreatedAt(*t)
	}
	return wccuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetUpdatedAt(t time.Time) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetUpdatedAt(t)
	return wccuo
}

// SetWorkbookID sets the "workbook_id" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetWorkbookID(u uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetWorkbookID(u)
	return wccuo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableWorkbookID(u *uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	if u != nil {
		wccuo.SetWorkbookID(*u)
	}
	return wccuo
}

// SetChildID sets the "child_id" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetChildID(u uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetChildID(u)
	return wccuo
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableChildID(u *uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	if u != nil {
		wccuo.SetChildID(*u)
	}
	return wccuo
}

// SetIsRoot sets the "is_root" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetIsRoot(b bool) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetIsRoot(b)
	return wccuo
}

// SetNillableIsRoot sets the "is_root" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableIsRoot(b *bool) *WorkbookCategoryClosureUpdateOne {
	if b != nil {
		wccuo.SetIsRoot(*b)
	}
	return wccuo
}

// SetParentID sets the "parent_id" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetParentID(u uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetParentID(u)
	return wccuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableParentID(u *uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	if u != nil {
		wccuo.SetParentID(*u)
	}
	return wccuo
}

// SetPosition sets the "position" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetPosition(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.ResetPosition()
	wccuo.mutation.SetPosition(i)
	return wccuo
}

// SetNillablePosition sets the "position" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillablePosition(i *int) *WorkbookCategoryClosureUpdateOne {
	if i != nil {
		wccuo.SetPosition(*i)
	}
	return wccuo
}

// AddPosition adds i to the "position" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) AddPosition(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.AddPosition(i)
	return wccuo
}

// SetLevel sets the "level" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetLevel(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.ResetLevel()
	wccuo.mutation.SetLevel(i)
	return wccuo
}

// SetNillableLevel sets the "level" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableLevel(i *int) *WorkbookCategoryClosureUpdateOne {
	if i != nil {
		wccuo.SetLevel(*i)
	}
	return wccuo
}

// AddLevel adds i to the "level" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) AddLevel(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.AddLevel(i)
	return wccuo
}

// SetChildCategoryID sets the "child_category" edge to the WorkbookCategory entity by ID.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetChildCategoryID(id uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetChildCategoryID(id)
	return wccuo
}

// SetChildCategory sets the "child_category" edge to the WorkbookCategory entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetChildCategory(w *WorkbookCategory) *WorkbookCategoryClosureUpdateOne {
	return wccuo.SetChildCategoryID(w.ID)
}

// SetParentCategoryID sets the "parent_category" edge to the WorkbookCategory entity by ID.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetParentCategoryID(id uuid.UUID) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.SetParentCategoryID(id)
	return wccuo
}

// SetParentCategory sets the "parent_category" edge to the WorkbookCategory entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetParentCategory(w *WorkbookCategory) *WorkbookCategoryClosureUpdateOne {
	return wccuo.SetParentCategoryID(w.ID)
}

// Mutation returns the WorkbookCategoryClosureMutation object of the builder.
func (wccuo *WorkbookCategoryClosureUpdateOne) Mutation() *WorkbookCategoryClosureMutation {
	return wccuo.mutation
}

// ClearChildCategory clears the "child_category" edge to the WorkbookCategory entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) ClearChildCategory() *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.ClearChildCategory()
	return wccuo
}

// ClearParentCategory clears the "parent_category" edge to the WorkbookCategory entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) ClearParentCategory() *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.ClearParentCategory()
	return wccuo
}

// Where appends a list predicates to the WorkbookCategoryClosureUpdate builder.
func (wccuo *WorkbookCategoryClosureUpdateOne) Where(ps ...predicate.WorkbookCategoryClosure) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.Where(ps...)
	return wccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wccuo *WorkbookCategoryClosureUpdateOne) Select(field string, fields ...string) *WorkbookCategoryClosureUpdateOne {
	wccuo.fields = append([]string{field}, fields...)
	return wccuo
}

// Save executes the query and returns the updated WorkbookCategoryClosure entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) Save(ctx context.Context) (*WorkbookCategoryClosure, error) {
	wccuo.defaults()
	return withHooks(ctx, wccuo.sqlSave, wccuo.mutation, wccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wccuo *WorkbookCategoryClosureUpdateOne) SaveX(ctx context.Context) *WorkbookCategoryClosure {
	node, err := wccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) Exec(ctx context.Context) error {
	_, err := wccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccuo *WorkbookCategoryClosureUpdateOne) ExecX(ctx context.Context) {
	if err := wccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wccuo *WorkbookCategoryClosureUpdateOne) defaults() {
	if _, ok := wccuo.mutation.UpdatedAt(); !ok {
		v := workbookcategoryclosure.UpdateDefaultUpdatedAt()
		wccuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wccuo *WorkbookCategoryClosureUpdateOne) check() error {
	if wccuo.mutation.ChildCategoryCleared() && len(wccuo.mutation.ChildCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategoryClosure.child_category"`)
	}
	if wccuo.mutation.ParentCategoryCleared() && len(wccuo.mutation.ParentCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WorkbookCategoryClosure.parent_category"`)
	}
	return nil
}

func (wccuo *WorkbookCategoryClosureUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookCategoryClosure, err error) {
	if err := wccuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbookcategoryclosure.Table, workbookcategoryclosure.Columns, sqlgraph.NewFieldSpec(workbookcategoryclosure.FieldID, field.TypeUUID))
	id, ok := wccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookCategoryClosure.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategoryclosure.FieldID)
		for _, f := range fields {
			if !workbookcategoryclosure.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookcategoryclosure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wccuo.mutation.CreatedAt(); ok {
		_spec.SetField(workbookcategoryclosure.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wccuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbookcategoryclosure.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wccuo.mutation.WorkbookID(); ok {
		_spec.SetField(workbookcategoryclosure.FieldWorkbookID, field.TypeUUID, value)
	}
	if value, ok := wccuo.mutation.IsRoot(); ok {
		_spec.SetField(workbookcategoryclosure.FieldIsRoot, field.TypeBool, value)
	}
	if value, ok := wccuo.mutation.Position(); ok {
		_spec.SetField(workbookcategoryclosure.FieldPosition, field.TypeInt, value)
	}
	if value, ok := wccuo.mutation.AddedPosition(); ok {
		_spec.AddField(workbookcategoryclosure.FieldPosition, field.TypeInt, value)
	}
	if value, ok := wccuo.mutation.Level(); ok {
		_spec.SetField(workbookcategoryclosure.FieldLevel, field.TypeInt, value)
	}
	if value, ok := wccuo.mutation.AddedLevel(); ok {
		_spec.AddField(workbookcategoryclosure.FieldLevel, field.TypeInt, value)
	}
	if wccuo.mutation.ChildCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ChildCategoryTable,
			Columns: []string{workbookcategoryclosure.ChildCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccuo.mutation.ChildCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ChildCategoryTable,
			Columns: []string{workbookcategoryclosure.ChildCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wccuo.mutation.ParentCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ParentCategoryTable,
			Columns: []string{workbookcategoryclosure.ParentCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wccuo.mutation.ParentCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workbookcategoryclosure.ParentCategoryTable,
			Columns: []string{workbookcategoryclosure.ParentCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkbookCategoryClosure{config: wccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategoryclosure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wccuo.mutation.done = true
	return _node, nil
}
