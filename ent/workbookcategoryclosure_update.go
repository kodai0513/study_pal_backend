// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/workbookcategoryclosure"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkbookCategoryClosureUpdate is the builder for updating WorkbookCategoryClosure entities.
type WorkbookCategoryClosureUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookCategoryClosureMutation
}

// Where appends a list predicates to the WorkbookCategoryClosureUpdate builder.
func (wccu *WorkbookCategoryClosureUpdate) Where(ps ...predicate.WorkbookCategoryClosure) *WorkbookCategoryClosureUpdate {
	wccu.mutation.Where(ps...)
	return wccu
}

// SetChildID sets the "child_id" field.
func (wccu *WorkbookCategoryClosureUpdate) SetChildID(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.ResetChildID()
	wccu.mutation.SetChildID(i)
	return wccu
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableChildID(i *int) *WorkbookCategoryClosureUpdate {
	if i != nil {
		wccu.SetChildID(*i)
	}
	return wccu
}

// AddChildID adds i to the "child_id" field.
func (wccu *WorkbookCategoryClosureUpdate) AddChildID(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.AddChildID(i)
	return wccu
}

// SetParentID sets the "parent_id" field.
func (wccu *WorkbookCategoryClosureUpdate) SetParentID(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.ResetParentID()
	wccu.mutation.SetParentID(i)
	return wccu
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (wccu *WorkbookCategoryClosureUpdate) SetNillableParentID(i *int) *WorkbookCategoryClosureUpdate {
	if i != nil {
		wccu.SetParentID(*i)
	}
	return wccu
}

// AddParentID adds i to the "parent_id" field.
func (wccu *WorkbookCategoryClosureUpdate) AddParentID(i int) *WorkbookCategoryClosureUpdate {
	wccu.mutation.AddParentID(i)
	return wccu
}

// Mutation returns the WorkbookCategoryClosureMutation object of the builder.
func (wccu *WorkbookCategoryClosureUpdate) Mutation() *WorkbookCategoryClosureMutation {
	return wccu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wccu *WorkbookCategoryClosureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wccu.sqlSave, wccu.mutation, wccu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wccu *WorkbookCategoryClosureUpdate) SaveX(ctx context.Context) int {
	affected, err := wccu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wccu *WorkbookCategoryClosureUpdate) Exec(ctx context.Context) error {
	_, err := wccu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccu *WorkbookCategoryClosureUpdate) ExecX(ctx context.Context) {
	if err := wccu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wccu *WorkbookCategoryClosureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workbookcategoryclosure.Table, workbookcategoryclosure.Columns, sqlgraph.NewFieldSpec(workbookcategoryclosure.FieldID, field.TypeInt))
	if ps := wccu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wccu.mutation.ChildID(); ok {
		_spec.SetField(workbookcategoryclosure.FieldChildID, field.TypeInt, value)
	}
	if value, ok := wccu.mutation.AddedChildID(); ok {
		_spec.AddField(workbookcategoryclosure.FieldChildID, field.TypeInt, value)
	}
	if value, ok := wccu.mutation.ParentID(); ok {
		_spec.SetField(workbookcategoryclosure.FieldParentID, field.TypeInt, value)
	}
	if value, ok := wccu.mutation.AddedParentID(); ok {
		_spec.AddField(workbookcategoryclosure.FieldParentID, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wccu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategoryclosure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wccu.mutation.done = true
	return n, nil
}

// WorkbookCategoryClosureUpdateOne is the builder for updating a single WorkbookCategoryClosure entity.
type WorkbookCategoryClosureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookCategoryClosureMutation
}

// SetChildID sets the "child_id" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetChildID(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.ResetChildID()
	wccuo.mutation.SetChildID(i)
	return wccuo
}

// SetNillableChildID sets the "child_id" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableChildID(i *int) *WorkbookCategoryClosureUpdateOne {
	if i != nil {
		wccuo.SetChildID(*i)
	}
	return wccuo
}

// AddChildID adds i to the "child_id" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) AddChildID(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.AddChildID(i)
	return wccuo
}

// SetParentID sets the "parent_id" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetParentID(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.ResetParentID()
	wccuo.mutation.SetParentID(i)
	return wccuo
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (wccuo *WorkbookCategoryClosureUpdateOne) SetNillableParentID(i *int) *WorkbookCategoryClosureUpdateOne {
	if i != nil {
		wccuo.SetParentID(*i)
	}
	return wccuo
}

// AddParentID adds i to the "parent_id" field.
func (wccuo *WorkbookCategoryClosureUpdateOne) AddParentID(i int) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.AddParentID(i)
	return wccuo
}

// Mutation returns the WorkbookCategoryClosureMutation object of the builder.
func (wccuo *WorkbookCategoryClosureUpdateOne) Mutation() *WorkbookCategoryClosureMutation {
	return wccuo.mutation
}

// Where appends a list predicates to the WorkbookCategoryClosureUpdate builder.
func (wccuo *WorkbookCategoryClosureUpdateOne) Where(ps ...predicate.WorkbookCategoryClosure) *WorkbookCategoryClosureUpdateOne {
	wccuo.mutation.Where(ps...)
	return wccuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wccuo *WorkbookCategoryClosureUpdateOne) Select(field string, fields ...string) *WorkbookCategoryClosureUpdateOne {
	wccuo.fields = append([]string{field}, fields...)
	return wccuo
}

// Save executes the query and returns the updated WorkbookCategoryClosure entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) Save(ctx context.Context) (*WorkbookCategoryClosure, error) {
	return withHooks(ctx, wccuo.sqlSave, wccuo.mutation, wccuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wccuo *WorkbookCategoryClosureUpdateOne) SaveX(ctx context.Context) *WorkbookCategoryClosure {
	node, err := wccuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wccuo *WorkbookCategoryClosureUpdateOne) Exec(ctx context.Context) error {
	_, err := wccuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wccuo *WorkbookCategoryClosureUpdateOne) ExecX(ctx context.Context) {
	if err := wccuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wccuo *WorkbookCategoryClosureUpdateOne) sqlSave(ctx context.Context) (_node *WorkbookCategoryClosure, err error) {
	_spec := sqlgraph.NewUpdateSpec(workbookcategoryclosure.Table, workbookcategoryclosure.Columns, sqlgraph.NewFieldSpec(workbookcategoryclosure.FieldID, field.TypeInt))
	id, ok := wccuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkbookCategoryClosure.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wccuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbookcategoryclosure.FieldID)
		for _, f := range fields {
			if !workbookcategoryclosure.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbookcategoryclosure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wccuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wccuo.mutation.ChildID(); ok {
		_spec.SetField(workbookcategoryclosure.FieldChildID, field.TypeInt, value)
	}
	if value, ok := wccuo.mutation.AddedChildID(); ok {
		_spec.AddField(workbookcategoryclosure.FieldChildID, field.TypeInt, value)
	}
	if value, ok := wccuo.mutation.ParentID(); ok {
		_spec.SetField(workbookcategoryclosure.FieldParentID, field.TypeInt, value)
	}
	if value, ok := wccuo.mutation.AddedParentID(); ok {
		_spec.AddField(workbookcategoryclosure.FieldParentID, field.TypeInt, value)
	}
	_node = &WorkbookCategoryClosure{config: wccuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wccuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbookcategoryclosure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wccuo.mutation.done = true
	return _node, nil
}
