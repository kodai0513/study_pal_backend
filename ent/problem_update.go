// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/answerdescription"
	"study-pal-backend/ent/answermultichoices"
	"study-pal-backend/ent/answertruth"
	"study-pal-backend/ent/answertype"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/problem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProblemUpdate is the builder for updating Problem entities.
type ProblemUpdate struct {
	config
	hooks    []Hook
	mutation *ProblemMutation
}

// Where appends a list predicates to the ProblemUpdate builder.
func (pu *ProblemUpdate) Where(ps ...predicate.Problem) *ProblemUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *ProblemUpdate) SetCreatedAt(t time.Time) *ProblemUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableCreatedAt(t *time.Time) *ProblemUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProblemUpdate) SetUpdatedAt(t time.Time) *ProblemUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetAnswerTypeID sets the "answer_type_id" field.
func (pu *ProblemUpdate) SetAnswerTypeID(i int) *ProblemUpdate {
	pu.mutation.SetAnswerTypeID(i)
	return pu
}

// SetNillableAnswerTypeID sets the "answer_type_id" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableAnswerTypeID(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetAnswerTypeID(*i)
	}
	return pu
}

// SetStatement sets the "statement" field.
func (pu *ProblemUpdate) SetStatement(s string) *ProblemUpdate {
	pu.mutation.SetStatement(s)
	return pu
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableStatement(s *string) *ProblemUpdate {
	if s != nil {
		pu.SetStatement(*s)
	}
	return pu
}

// SetWorkbookID sets the "workbook_id" field.
func (pu *ProblemUpdate) SetWorkbookID(i int) *ProblemUpdate {
	pu.mutation.SetWorkbookID(i)
	return pu
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableWorkbookID(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetWorkbookID(*i)
	}
	return pu
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (pu *ProblemUpdate) SetWorkbookCategoryID(i int) *ProblemUpdate {
	pu.mutation.SetWorkbookCategoryID(i)
	return pu
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (pu *ProblemUpdate) SetNillableWorkbookCategoryID(i *int) *ProblemUpdate {
	if i != nil {
		pu.SetWorkbookCategoryID(*i)
	}
	return pu
}

// SetAnswerType sets the "answer_type" edge to the AnswerType entity.
func (pu *ProblemUpdate) SetAnswerType(a *AnswerType) *ProblemUpdate {
	return pu.SetAnswerTypeID(a.ID)
}

// AddAnswerDescriptionIDs adds the "answer_descriptions" edge to the AnswerDescription entity by IDs.
func (pu *ProblemUpdate) AddAnswerDescriptionIDs(ids ...int) *ProblemUpdate {
	pu.mutation.AddAnswerDescriptionIDs(ids...)
	return pu
}

// AddAnswerDescriptions adds the "answer_descriptions" edges to the AnswerDescription entity.
func (pu *ProblemUpdate) AddAnswerDescriptions(a ...*AnswerDescription) *ProblemUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAnswerDescriptionIDs(ids...)
}

// AddAnswerMultiChoiceIDs adds the "answer_multi_choices" edge to the AnswerMultiChoices entity by IDs.
func (pu *ProblemUpdate) AddAnswerMultiChoiceIDs(ids ...int) *ProblemUpdate {
	pu.mutation.AddAnswerMultiChoiceIDs(ids...)
	return pu
}

// AddAnswerMultiChoices adds the "answer_multi_choices" edges to the AnswerMultiChoices entity.
func (pu *ProblemUpdate) AddAnswerMultiChoices(a ...*AnswerMultiChoices) *ProblemUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAnswerMultiChoiceIDs(ids...)
}

// AddAnswerTruthIDs adds the "answer_truths" edge to the AnswerTruth entity by IDs.
func (pu *ProblemUpdate) AddAnswerTruthIDs(ids ...int) *ProblemUpdate {
	pu.mutation.AddAnswerTruthIDs(ids...)
	return pu
}

// AddAnswerTruths adds the "answer_truths" edges to the AnswerTruth entity.
func (pu *ProblemUpdate) AddAnswerTruths(a ...*AnswerTruth) *ProblemUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAnswerTruthIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (pu *ProblemUpdate) SetWorkbook(w *Workbook) *ProblemUpdate {
	return pu.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (pu *ProblemUpdate) SetWorkbookCategory(w *WorkbookCategory) *ProblemUpdate {
	return pu.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the ProblemMutation object of the builder.
func (pu *ProblemUpdate) Mutation() *ProblemMutation {
	return pu.mutation
}

// ClearAnswerType clears the "answer_type" edge to the AnswerType entity.
func (pu *ProblemUpdate) ClearAnswerType() *ProblemUpdate {
	pu.mutation.ClearAnswerType()
	return pu
}

// ClearAnswerDescriptions clears all "answer_descriptions" edges to the AnswerDescription entity.
func (pu *ProblemUpdate) ClearAnswerDescriptions() *ProblemUpdate {
	pu.mutation.ClearAnswerDescriptions()
	return pu
}

// RemoveAnswerDescriptionIDs removes the "answer_descriptions" edge to AnswerDescription entities by IDs.
func (pu *ProblemUpdate) RemoveAnswerDescriptionIDs(ids ...int) *ProblemUpdate {
	pu.mutation.RemoveAnswerDescriptionIDs(ids...)
	return pu
}

// RemoveAnswerDescriptions removes "answer_descriptions" edges to AnswerDescription entities.
func (pu *ProblemUpdate) RemoveAnswerDescriptions(a ...*AnswerDescription) *ProblemUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAnswerDescriptionIDs(ids...)
}

// ClearAnswerMultiChoices clears all "answer_multi_choices" edges to the AnswerMultiChoices entity.
func (pu *ProblemUpdate) ClearAnswerMultiChoices() *ProblemUpdate {
	pu.mutation.ClearAnswerMultiChoices()
	return pu
}

// RemoveAnswerMultiChoiceIDs removes the "answer_multi_choices" edge to AnswerMultiChoices entities by IDs.
func (pu *ProblemUpdate) RemoveAnswerMultiChoiceIDs(ids ...int) *ProblemUpdate {
	pu.mutation.RemoveAnswerMultiChoiceIDs(ids...)
	return pu
}

// RemoveAnswerMultiChoices removes "answer_multi_choices" edges to AnswerMultiChoices entities.
func (pu *ProblemUpdate) RemoveAnswerMultiChoices(a ...*AnswerMultiChoices) *ProblemUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAnswerMultiChoiceIDs(ids...)
}

// ClearAnswerTruths clears all "answer_truths" edges to the AnswerTruth entity.
func (pu *ProblemUpdate) ClearAnswerTruths() *ProblemUpdate {
	pu.mutation.ClearAnswerTruths()
	return pu
}

// RemoveAnswerTruthIDs removes the "answer_truths" edge to AnswerTruth entities by IDs.
func (pu *ProblemUpdate) RemoveAnswerTruthIDs(ids ...int) *ProblemUpdate {
	pu.mutation.RemoveAnswerTruthIDs(ids...)
	return pu
}

// RemoveAnswerTruths removes "answer_truths" edges to AnswerTruth entities.
func (pu *ProblemUpdate) RemoveAnswerTruths(a ...*AnswerTruth) *ProblemUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAnswerTruthIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (pu *ProblemUpdate) ClearWorkbook() *ProblemUpdate {
	pu.mutation.ClearWorkbook()
	return pu
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (pu *ProblemUpdate) ClearWorkbookCategory() *ProblemUpdate {
	pu.mutation.ClearWorkbookCategory()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProblemUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProblemUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProblemUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProblemUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProblemUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := problem.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProblemUpdate) check() error {
	if v, ok := pu.mutation.Statement(); ok {
		if err := problem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "Problem.statement": %w`, err)}
		}
	}
	if pu.mutation.AnswerTypeCleared() && len(pu.mutation.AnswerTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.answer_type"`)
	}
	if pu.mutation.WorkbookCleared() && len(pu.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.workbook"`)
	}
	if pu.mutation.WorkbookCategoryCleared() && len(pu.mutation.WorkbookCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.workbook_category"`)
	}
	return nil
}

func (pu *ProblemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(problem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(problem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Statement(); ok {
		_spec.SetField(problem.FieldStatement, field.TypeString, value)
	}
	if pu.mutation.AnswerTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.AnswerTypeTable,
			Columns: []string{problem.AnswerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AnswerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.AnswerTypeTable,
			Columns: []string{problem.AnswerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AnswerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerDescriptionsTable,
			Columns: []string{problem.AnswerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAnswerDescriptionsIDs(); len(nodes) > 0 && !pu.mutation.AnswerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerDescriptionsTable,
			Columns: []string{problem.AnswerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AnswerDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerDescriptionsTable,
			Columns: []string{problem.AnswerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AnswerMultiChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerMultiChoicesTable,
			Columns: []string{problem.AnswerMultiChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAnswerMultiChoicesIDs(); len(nodes) > 0 && !pu.mutation.AnswerMultiChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerMultiChoicesTable,
			Columns: []string{problem.AnswerMultiChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AnswerMultiChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerMultiChoicesTable,
			Columns: []string{problem.AnswerMultiChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.AnswerTruthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerTruthsTable,
			Columns: []string{problem.AnswerTruthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedAnswerTruthsIDs(); len(nodes) > 0 && !pu.mutation.AnswerTruthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerTruthsTable,
			Columns: []string{problem.AnswerTruthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.AnswerTruthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerTruthsTable,
			Columns: []string{problem.AnswerTruthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookTable,
			Columns: []string{problem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookTable,
			Columns: []string{problem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookCategoryTable,
			Columns: []string{problem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookCategoryTable,
			Columns: []string{problem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProblemUpdateOne is the builder for updating a single Problem entity.
type ProblemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProblemMutation
}

// SetCreatedAt sets the "created_at" field.
func (puo *ProblemUpdateOne) SetCreatedAt(t time.Time) *ProblemUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableCreatedAt(t *time.Time) *ProblemUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProblemUpdateOne) SetUpdatedAt(t time.Time) *ProblemUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetAnswerTypeID sets the "answer_type_id" field.
func (puo *ProblemUpdateOne) SetAnswerTypeID(i int) *ProblemUpdateOne {
	puo.mutation.SetAnswerTypeID(i)
	return puo
}

// SetNillableAnswerTypeID sets the "answer_type_id" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableAnswerTypeID(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetAnswerTypeID(*i)
	}
	return puo
}

// SetStatement sets the "statement" field.
func (puo *ProblemUpdateOne) SetStatement(s string) *ProblemUpdateOne {
	puo.mutation.SetStatement(s)
	return puo
}

// SetNillableStatement sets the "statement" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableStatement(s *string) *ProblemUpdateOne {
	if s != nil {
		puo.SetStatement(*s)
	}
	return puo
}

// SetWorkbookID sets the "workbook_id" field.
func (puo *ProblemUpdateOne) SetWorkbookID(i int) *ProblemUpdateOne {
	puo.mutation.SetWorkbookID(i)
	return puo
}

// SetNillableWorkbookID sets the "workbook_id" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableWorkbookID(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetWorkbookID(*i)
	}
	return puo
}

// SetWorkbookCategoryID sets the "workbook_category_id" field.
func (puo *ProblemUpdateOne) SetWorkbookCategoryID(i int) *ProblemUpdateOne {
	puo.mutation.SetWorkbookCategoryID(i)
	return puo
}

// SetNillableWorkbookCategoryID sets the "workbook_category_id" field if the given value is not nil.
func (puo *ProblemUpdateOne) SetNillableWorkbookCategoryID(i *int) *ProblemUpdateOne {
	if i != nil {
		puo.SetWorkbookCategoryID(*i)
	}
	return puo
}

// SetAnswerType sets the "answer_type" edge to the AnswerType entity.
func (puo *ProblemUpdateOne) SetAnswerType(a *AnswerType) *ProblemUpdateOne {
	return puo.SetAnswerTypeID(a.ID)
}

// AddAnswerDescriptionIDs adds the "answer_descriptions" edge to the AnswerDescription entity by IDs.
func (puo *ProblemUpdateOne) AddAnswerDescriptionIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.AddAnswerDescriptionIDs(ids...)
	return puo
}

// AddAnswerDescriptions adds the "answer_descriptions" edges to the AnswerDescription entity.
func (puo *ProblemUpdateOne) AddAnswerDescriptions(a ...*AnswerDescription) *ProblemUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAnswerDescriptionIDs(ids...)
}

// AddAnswerMultiChoiceIDs adds the "answer_multi_choices" edge to the AnswerMultiChoices entity by IDs.
func (puo *ProblemUpdateOne) AddAnswerMultiChoiceIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.AddAnswerMultiChoiceIDs(ids...)
	return puo
}

// AddAnswerMultiChoices adds the "answer_multi_choices" edges to the AnswerMultiChoices entity.
func (puo *ProblemUpdateOne) AddAnswerMultiChoices(a ...*AnswerMultiChoices) *ProblemUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAnswerMultiChoiceIDs(ids...)
}

// AddAnswerTruthIDs adds the "answer_truths" edge to the AnswerTruth entity by IDs.
func (puo *ProblemUpdateOne) AddAnswerTruthIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.AddAnswerTruthIDs(ids...)
	return puo
}

// AddAnswerTruths adds the "answer_truths" edges to the AnswerTruth entity.
func (puo *ProblemUpdateOne) AddAnswerTruths(a ...*AnswerTruth) *ProblemUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAnswerTruthIDs(ids...)
}

// SetWorkbook sets the "workbook" edge to the Workbook entity.
func (puo *ProblemUpdateOne) SetWorkbook(w *Workbook) *ProblemUpdateOne {
	return puo.SetWorkbookID(w.ID)
}

// SetWorkbookCategory sets the "workbook_category" edge to the WorkbookCategory entity.
func (puo *ProblemUpdateOne) SetWorkbookCategory(w *WorkbookCategory) *ProblemUpdateOne {
	return puo.SetWorkbookCategoryID(w.ID)
}

// Mutation returns the ProblemMutation object of the builder.
func (puo *ProblemUpdateOne) Mutation() *ProblemMutation {
	return puo.mutation
}

// ClearAnswerType clears the "answer_type" edge to the AnswerType entity.
func (puo *ProblemUpdateOne) ClearAnswerType() *ProblemUpdateOne {
	puo.mutation.ClearAnswerType()
	return puo
}

// ClearAnswerDescriptions clears all "answer_descriptions" edges to the AnswerDescription entity.
func (puo *ProblemUpdateOne) ClearAnswerDescriptions() *ProblemUpdateOne {
	puo.mutation.ClearAnswerDescriptions()
	return puo
}

// RemoveAnswerDescriptionIDs removes the "answer_descriptions" edge to AnswerDescription entities by IDs.
func (puo *ProblemUpdateOne) RemoveAnswerDescriptionIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.RemoveAnswerDescriptionIDs(ids...)
	return puo
}

// RemoveAnswerDescriptions removes "answer_descriptions" edges to AnswerDescription entities.
func (puo *ProblemUpdateOne) RemoveAnswerDescriptions(a ...*AnswerDescription) *ProblemUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAnswerDescriptionIDs(ids...)
}

// ClearAnswerMultiChoices clears all "answer_multi_choices" edges to the AnswerMultiChoices entity.
func (puo *ProblemUpdateOne) ClearAnswerMultiChoices() *ProblemUpdateOne {
	puo.mutation.ClearAnswerMultiChoices()
	return puo
}

// RemoveAnswerMultiChoiceIDs removes the "answer_multi_choices" edge to AnswerMultiChoices entities by IDs.
func (puo *ProblemUpdateOne) RemoveAnswerMultiChoiceIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.RemoveAnswerMultiChoiceIDs(ids...)
	return puo
}

// RemoveAnswerMultiChoices removes "answer_multi_choices" edges to AnswerMultiChoices entities.
func (puo *ProblemUpdateOne) RemoveAnswerMultiChoices(a ...*AnswerMultiChoices) *ProblemUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAnswerMultiChoiceIDs(ids...)
}

// ClearAnswerTruths clears all "answer_truths" edges to the AnswerTruth entity.
func (puo *ProblemUpdateOne) ClearAnswerTruths() *ProblemUpdateOne {
	puo.mutation.ClearAnswerTruths()
	return puo
}

// RemoveAnswerTruthIDs removes the "answer_truths" edge to AnswerTruth entities by IDs.
func (puo *ProblemUpdateOne) RemoveAnswerTruthIDs(ids ...int) *ProblemUpdateOne {
	puo.mutation.RemoveAnswerTruthIDs(ids...)
	return puo
}

// RemoveAnswerTruths removes "answer_truths" edges to AnswerTruth entities.
func (puo *ProblemUpdateOne) RemoveAnswerTruths(a ...*AnswerTruth) *ProblemUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAnswerTruthIDs(ids...)
}

// ClearWorkbook clears the "workbook" edge to the Workbook entity.
func (puo *ProblemUpdateOne) ClearWorkbook() *ProblemUpdateOne {
	puo.mutation.ClearWorkbook()
	return puo
}

// ClearWorkbookCategory clears the "workbook_category" edge to the WorkbookCategory entity.
func (puo *ProblemUpdateOne) ClearWorkbookCategory() *ProblemUpdateOne {
	puo.mutation.ClearWorkbookCategory()
	return puo
}

// Where appends a list predicates to the ProblemUpdate builder.
func (puo *ProblemUpdateOne) Where(ps ...predicate.Problem) *ProblemUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProblemUpdateOne) Select(field string, fields ...string) *ProblemUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Problem entity.
func (puo *ProblemUpdateOne) Save(ctx context.Context) (*Problem, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProblemUpdateOne) SaveX(ctx context.Context) *Problem {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProblemUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProblemUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProblemUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := problem.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProblemUpdateOne) check() error {
	if v, ok := puo.mutation.Statement(); ok {
		if err := problem.StatementValidator(v); err != nil {
			return &ValidationError{Name: "statement", err: fmt.Errorf(`ent: validator failed for field "Problem.statement": %w`, err)}
		}
	}
	if puo.mutation.AnswerTypeCleared() && len(puo.mutation.AnswerTypeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.answer_type"`)
	}
	if puo.mutation.WorkbookCleared() && len(puo.mutation.WorkbookIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.workbook"`)
	}
	if puo.mutation.WorkbookCategoryCleared() && len(puo.mutation.WorkbookCategoryIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Problem.workbook_category"`)
	}
	return nil
}

func (puo *ProblemUpdateOne) sqlSave(ctx context.Context) (_node *Problem, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(problem.Table, problem.Columns, sqlgraph.NewFieldSpec(problem.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Problem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, problem.FieldID)
		for _, f := range fields {
			if !problem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != problem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(problem.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(problem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Statement(); ok {
		_spec.SetField(problem.FieldStatement, field.TypeString, value)
	}
	if puo.mutation.AnswerTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.AnswerTypeTable,
			Columns: []string{problem.AnswerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AnswerTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.AnswerTypeTable,
			Columns: []string{problem.AnswerTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AnswerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerDescriptionsTable,
			Columns: []string{problem.AnswerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAnswerDescriptionsIDs(); len(nodes) > 0 && !puo.mutation.AnswerDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerDescriptionsTable,
			Columns: []string{problem.AnswerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AnswerDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerDescriptionsTable,
			Columns: []string{problem.AnswerDescriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answerdescription.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AnswerMultiChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerMultiChoicesTable,
			Columns: []string{problem.AnswerMultiChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAnswerMultiChoicesIDs(); len(nodes) > 0 && !puo.mutation.AnswerMultiChoicesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerMultiChoicesTable,
			Columns: []string{problem.AnswerMultiChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AnswerMultiChoicesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerMultiChoicesTable,
			Columns: []string{problem.AnswerMultiChoicesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answermultichoices.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.AnswerTruthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerTruthsTable,
			Columns: []string{problem.AnswerTruthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedAnswerTruthsIDs(); len(nodes) > 0 && !puo.mutation.AnswerTruthsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerTruthsTable,
			Columns: []string{problem.AnswerTruthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.AnswerTruthsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   problem.AnswerTruthsTable,
			Columns: []string{problem.AnswerTruthsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(answertruth.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.WorkbookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookTable,
			Columns: []string{problem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WorkbookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookTable,
			Columns: []string{problem.WorkbookColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.WorkbookCategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookCategoryTable,
			Columns: []string{problem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.WorkbookCategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   problem.WorkbookCategoryTable,
			Columns: []string{problem.WorkbookCategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Problem{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{problem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
