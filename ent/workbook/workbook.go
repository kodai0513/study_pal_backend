// Code generated by ent, DO NOT EDIT.

package workbook

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workbook type in the database.
	Label = "workbook"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedID holds the string denoting the created_id field in the database.
	FieldCreatedID = "created_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// EdgeProblems holds the string denoting the problems edge name in mutations.
	EdgeProblems = "problems"
	// EdgeWorkbookCategories holds the string denoting the workbook_categories edge name in mutations.
	EdgeWorkbookCategories = "workbook_categories"
	// EdgeWorkbookMembers holds the string denoting the workbook_members edge name in mutations.
	EdgeWorkbookMembers = "workbook_members"
	// Table holds the table name of the workbook in the database.
	Table = "workbooks"
	// ProblemsTable is the table that holds the problems relation/edge.
	ProblemsTable = "problems"
	// ProblemsInverseTable is the table name for the Problem entity.
	// It exists in this package in order to avoid circular dependency with the "problem" package.
	ProblemsInverseTable = "problems"
	// ProblemsColumn is the table column denoting the problems relation/edge.
	ProblemsColumn = "workbook_id"
	// WorkbookCategoriesTable is the table that holds the workbook_categories relation/edge.
	WorkbookCategoriesTable = "workbook_categories"
	// WorkbookCategoriesInverseTable is the table name for the WorkbookCategory entity.
	// It exists in this package in order to avoid circular dependency with the "workbookcategory" package.
	WorkbookCategoriesInverseTable = "workbook_categories"
	// WorkbookCategoriesColumn is the table column denoting the workbook_categories relation/edge.
	WorkbookCategoriesColumn = "workbook_id"
	// WorkbookMembersTable is the table that holds the workbook_members relation/edge.
	WorkbookMembersTable = "workbook_members"
	// WorkbookMembersInverseTable is the table name for the WorkbookMember entity.
	// It exists in this package in order to avoid circular dependency with the "workbookmember" package.
	WorkbookMembersInverseTable = "workbook_members"
	// WorkbookMembersColumn is the table column denoting the workbook_members relation/edge.
	WorkbookMembersColumn = "workbook_id"
)

// Columns holds all SQL columns for workbook fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedID,
	FieldDescription,
	FieldTitle,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
)

// OrderOption defines the ordering options for the Workbook queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedID orders the results by the created_id field.
func ByCreatedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByProblemsCount orders the results by problems count.
func ByProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProblemsStep(), opts...)
	}
}

// ByProblems orders the results by problems terms.
func ByProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkbookCategoriesCount orders the results by workbook_categories count.
func ByWorkbookCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkbookCategoriesStep(), opts...)
	}
}

// ByWorkbookCategories orders the results by workbook_categories terms.
func ByWorkbookCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkbookMembersCount orders the results by workbook_members count.
func ByWorkbookMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkbookMembersStep(), opts...)
	}
}

// ByWorkbookMembers orders the results by workbook_members terms.
func ByWorkbookMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProblemsTable, ProblemsColumn),
	)
}
func newWorkbookCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkbookCategoriesTable, WorkbookCategoriesColumn),
	)
}
func newWorkbookMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkbookMembersTable, WorkbookMembersColumn),
	)
}
