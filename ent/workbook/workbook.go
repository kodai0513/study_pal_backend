// Code generated by ent, DO NOT EDIT.

package workbook

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workbook type in the database.
	Label = "workbook"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsPublic holds the string denoting the is_public field in the database.
	FieldIsPublic = "is_public"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// EdgeDescriptionProblems holds the string denoting the description_problems edge name in mutations.
	EdgeDescriptionProblems = "description_problems"
	// EdgeSelectionProblems holds the string denoting the selection_problems edge name in mutations.
	EdgeSelectionProblems = "selection_problems"
	// EdgeTrueOrFalseProblems holds the string denoting the true_or_false_problems edge name in mutations.
	EdgeTrueOrFalseProblems = "true_or_false_problems"
	// EdgeWorkbookCategories holds the string denoting the workbook_categories edge name in mutations.
	EdgeWorkbookCategories = "workbook_categories"
	// EdgeWorkbookMembers holds the string denoting the workbook_members edge name in mutations.
	EdgeWorkbookMembers = "workbook_members"
	// Table holds the table name of the workbook in the database.
	Table = "workbooks"
	// DescriptionProblemsTable is the table that holds the description_problems relation/edge.
	DescriptionProblemsTable = "description_problems"
	// DescriptionProblemsInverseTable is the table name for the DescriptionProblem entity.
	// It exists in this package in order to avoid circular dependency with the "descriptionproblem" package.
	DescriptionProblemsInverseTable = "description_problems"
	// DescriptionProblemsColumn is the table column denoting the description_problems relation/edge.
	DescriptionProblemsColumn = "workbook_id"
	// SelectionProblemsTable is the table that holds the selection_problems relation/edge.
	SelectionProblemsTable = "selection_problems"
	// SelectionProblemsInverseTable is the table name for the SelectionProblem entity.
	// It exists in this package in order to avoid circular dependency with the "selectionproblem" package.
	SelectionProblemsInverseTable = "selection_problems"
	// SelectionProblemsColumn is the table column denoting the selection_problems relation/edge.
	SelectionProblemsColumn = "workbook_id"
	// TrueOrFalseProblemsTable is the table that holds the true_or_false_problems relation/edge.
	TrueOrFalseProblemsTable = "true_or_false_problems"
	// TrueOrFalseProblemsInverseTable is the table name for the TrueOrFalseProblem entity.
	// It exists in this package in order to avoid circular dependency with the "trueorfalseproblem" package.
	TrueOrFalseProblemsInverseTable = "true_or_false_problems"
	// TrueOrFalseProblemsColumn is the table column denoting the true_or_false_problems relation/edge.
	TrueOrFalseProblemsColumn = "workbook_id"
	// WorkbookCategoriesTable is the table that holds the workbook_categories relation/edge.
	WorkbookCategoriesTable = "workbook_categories"
	// WorkbookCategoriesInverseTable is the table name for the WorkbookCategory entity.
	// It exists in this package in order to avoid circular dependency with the "workbookcategory" package.
	WorkbookCategoriesInverseTable = "workbook_categories"
	// WorkbookCategoriesColumn is the table column denoting the workbook_categories relation/edge.
	WorkbookCategoriesColumn = "workbook_id"
	// WorkbookMembersTable is the table that holds the workbook_members relation/edge.
	WorkbookMembersTable = "workbook_members"
	// WorkbookMembersInverseTable is the table name for the WorkbookMember entity.
	// It exists in this package in order to avoid circular dependency with the "workbookmember" package.
	WorkbookMembersInverseTable = "workbook_members"
	// WorkbookMembersColumn is the table column denoting the workbook_members relation/edge.
	WorkbookMembersColumn = "workbook_id"
)

// Columns holds all SQL columns for workbook fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldUserID,
	FieldDescription,
	FieldIsPublic,
	FieldTitle,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultIsPublic holds the default value on creation for the "is_public" field.
	DefaultIsPublic bool
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
)

// OrderOption defines the ordering options for the Workbook queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsPublic orders the results by the is_public field.
func ByIsPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublic, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescriptionProblemsCount orders the results by description_problems count.
func ByDescriptionProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDescriptionProblemsStep(), opts...)
	}
}

// ByDescriptionProblems orders the results by description_problems terms.
func ByDescriptionProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDescriptionProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySelectionProblemsCount orders the results by selection_problems count.
func BySelectionProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSelectionProblemsStep(), opts...)
	}
}

// BySelectionProblems orders the results by selection_problems terms.
func BySelectionProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectionProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrueOrFalseProblemsCount orders the results by true_or_false_problems count.
func ByTrueOrFalseProblemsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrueOrFalseProblemsStep(), opts...)
	}
}

// ByTrueOrFalseProblems orders the results by true_or_false_problems terms.
func ByTrueOrFalseProblems(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrueOrFalseProblemsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkbookCategoriesCount orders the results by workbook_categories count.
func ByWorkbookCategoriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkbookCategoriesStep(), opts...)
	}
}

// ByWorkbookCategories orders the results by workbook_categories terms.
func ByWorkbookCategories(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookCategoriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkbookMembersCount orders the results by workbook_members count.
func ByWorkbookMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkbookMembersStep(), opts...)
	}
}

// ByWorkbookMembers orders the results by workbook_members terms.
func ByWorkbookMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkbookMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDescriptionProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DescriptionProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DescriptionProblemsTable, DescriptionProblemsColumn),
	)
}
func newSelectionProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectionProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SelectionProblemsTable, SelectionProblemsColumn),
	)
}
func newTrueOrFalseProblemsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrueOrFalseProblemsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrueOrFalseProblemsTable, TrueOrFalseProblemsColumn),
	)
}
func newWorkbookCategoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookCategoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkbookCategoriesTable, WorkbookCategoriesColumn),
	)
}
func newWorkbookMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkbookMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkbookMembersTable, WorkbookMembersColumn),
	)
}
