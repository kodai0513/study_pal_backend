// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"study-pal-backend/ent/predicate"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookmember"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkbookUpdate is the builder for updating Workbook entities.
type WorkbookUpdate struct {
	config
	hooks    []Hook
	mutation *WorkbookMutation
}

// Where appends a list predicates to the WorkbookUpdate builder.
func (wu *WorkbookUpdate) Where(ps ...predicate.Workbook) *WorkbookUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetCreatedAt sets the "created_at" field.
func (wu *WorkbookUpdate) SetCreatedAt(t time.Time) *WorkbookUpdate {
	wu.mutation.SetCreatedAt(t)
	return wu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wu *WorkbookUpdate) SetNillableCreatedAt(t *time.Time) *WorkbookUpdate {
	if t != nil {
		wu.SetCreatedAt(*t)
	}
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkbookUpdate) SetUpdatedAt(t time.Time) *WorkbookUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetCreatedID sets the "created_id" field.
func (wu *WorkbookUpdate) SetCreatedID(i int) *WorkbookUpdate {
	wu.mutation.ResetCreatedID()
	wu.mutation.SetCreatedID(i)
	return wu
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (wu *WorkbookUpdate) SetNillableCreatedID(i *int) *WorkbookUpdate {
	if i != nil {
		wu.SetCreatedID(*i)
	}
	return wu
}

// AddCreatedID adds i to the "created_id" field.
func (wu *WorkbookUpdate) AddCreatedID(i int) *WorkbookUpdate {
	wu.mutation.AddCreatedID(i)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WorkbookUpdate) SetDescription(s string) *WorkbookUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wu *WorkbookUpdate) SetNillableDescription(s *string) *WorkbookUpdate {
	if s != nil {
		wu.SetDescription(*s)
	}
	return wu
}

// SetTitle sets the "title" field.
func (wu *WorkbookUpdate) SetTitle(s string) *WorkbookUpdate {
	wu.mutation.SetTitle(s)
	return wu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (wu *WorkbookUpdate) SetNillableTitle(s *string) *WorkbookUpdate {
	if s != nil {
		wu.SetTitle(*s)
	}
	return wu
}

// AddWorkbookCategoryIDs adds the "workbook_categories" edge to the WorkbookCategory entity by IDs.
func (wu *WorkbookUpdate) AddWorkbookCategoryIDs(ids ...int) *WorkbookUpdate {
	wu.mutation.AddWorkbookCategoryIDs(ids...)
	return wu
}

// AddWorkbookCategories adds the "workbook_categories" edges to the WorkbookCategory entity.
func (wu *WorkbookUpdate) AddWorkbookCategories(w ...*WorkbookCategory) *WorkbookUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkbookCategoryIDs(ids...)
}

// AddWorkbookMemberIDs adds the "workbook_members" edge to the WorkbookMember entity by IDs.
func (wu *WorkbookUpdate) AddWorkbookMemberIDs(ids ...int) *WorkbookUpdate {
	wu.mutation.AddWorkbookMemberIDs(ids...)
	return wu
}

// AddWorkbookMembers adds the "workbook_members" edges to the WorkbookMember entity.
func (wu *WorkbookUpdate) AddWorkbookMembers(w ...*WorkbookMember) *WorkbookUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkbookMemberIDs(ids...)
}

// Mutation returns the WorkbookMutation object of the builder.
func (wu *WorkbookUpdate) Mutation() *WorkbookMutation {
	return wu.mutation
}

// ClearWorkbookCategories clears all "workbook_categories" edges to the WorkbookCategory entity.
func (wu *WorkbookUpdate) ClearWorkbookCategories() *WorkbookUpdate {
	wu.mutation.ClearWorkbookCategories()
	return wu
}

// RemoveWorkbookCategoryIDs removes the "workbook_categories" edge to WorkbookCategory entities by IDs.
func (wu *WorkbookUpdate) RemoveWorkbookCategoryIDs(ids ...int) *WorkbookUpdate {
	wu.mutation.RemoveWorkbookCategoryIDs(ids...)
	return wu
}

// RemoveWorkbookCategories removes "workbook_categories" edges to WorkbookCategory entities.
func (wu *WorkbookUpdate) RemoveWorkbookCategories(w ...*WorkbookCategory) *WorkbookUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkbookCategoryIDs(ids...)
}

// ClearWorkbookMembers clears all "workbook_members" edges to the WorkbookMember entity.
func (wu *WorkbookUpdate) ClearWorkbookMembers() *WorkbookUpdate {
	wu.mutation.ClearWorkbookMembers()
	return wu
}

// RemoveWorkbookMemberIDs removes the "workbook_members" edge to WorkbookMember entities by IDs.
func (wu *WorkbookUpdate) RemoveWorkbookMemberIDs(ids ...int) *WorkbookUpdate {
	wu.mutation.RemoveWorkbookMemberIDs(ids...)
	return wu
}

// RemoveWorkbookMembers removes "workbook_members" edges to WorkbookMember entities.
func (wu *WorkbookUpdate) RemoveWorkbookMembers(w ...*WorkbookMember) *WorkbookUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkbookMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkbookUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkbookUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkbookUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkbookUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkbookUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := workbook.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wu *WorkbookUpdate) check() error {
	if v, ok := wu.mutation.Description(); ok {
		if err := workbook.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Workbook.description": %w`, err)}
		}
	}
	if v, ok := wu.mutation.Title(); ok {
		if err := workbook.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Workbook.title": %w`, err)}
		}
	}
	return nil
}

func (wu *WorkbookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbook.Table, workbook.Columns, sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeInt))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.CreatedAt(); ok {
		_spec.SetField(workbook.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(workbook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wu.mutation.CreatedID(); ok {
		_spec.SetField(workbook.FieldCreatedID, field.TypeInt, value)
	}
	if value, ok := wu.mutation.AddedCreatedID(); ok {
		_spec.AddField(workbook.FieldCreatedID, field.TypeInt, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(workbook.FieldDescription, field.TypeString, value)
	}
	if value, ok := wu.mutation.Title(); ok {
		_spec.SetField(workbook.FieldTitle, field.TypeString, value)
	}
	if wu.mutation.WorkbookCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookCategoriesTable,
			Columns: []string{workbook.WorkbookCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkbookCategoriesIDs(); len(nodes) > 0 && !wu.mutation.WorkbookCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookCategoriesTable,
			Columns: []string{workbook.WorkbookCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkbookCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookCategoriesTable,
			Columns: []string{workbook.WorkbookCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkbookMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookMembersTable,
			Columns: []string{workbook.WorkbookMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkbookMembersIDs(); len(nodes) > 0 && !wu.mutation.WorkbookMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookMembersTable,
			Columns: []string{workbook.WorkbookMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkbookMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookMembersTable,
			Columns: []string{workbook.WorkbookMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkbookUpdateOne is the builder for updating a single Workbook entity.
type WorkbookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkbookMutation
}

// SetCreatedAt sets the "created_at" field.
func (wuo *WorkbookUpdateOne) SetCreatedAt(t time.Time) *WorkbookUpdateOne {
	wuo.mutation.SetCreatedAt(t)
	return wuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuo *WorkbookUpdateOne) SetNillableCreatedAt(t *time.Time) *WorkbookUpdateOne {
	if t != nil {
		wuo.SetCreatedAt(*t)
	}
	return wuo
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkbookUpdateOne) SetUpdatedAt(t time.Time) *WorkbookUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetCreatedID sets the "created_id" field.
func (wuo *WorkbookUpdateOne) SetCreatedID(i int) *WorkbookUpdateOne {
	wuo.mutation.ResetCreatedID()
	wuo.mutation.SetCreatedID(i)
	return wuo
}

// SetNillableCreatedID sets the "created_id" field if the given value is not nil.
func (wuo *WorkbookUpdateOne) SetNillableCreatedID(i *int) *WorkbookUpdateOne {
	if i != nil {
		wuo.SetCreatedID(*i)
	}
	return wuo
}

// AddCreatedID adds i to the "created_id" field.
func (wuo *WorkbookUpdateOne) AddCreatedID(i int) *WorkbookUpdateOne {
	wuo.mutation.AddCreatedID(i)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WorkbookUpdateOne) SetDescription(s string) *WorkbookUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (wuo *WorkbookUpdateOne) SetNillableDescription(s *string) *WorkbookUpdateOne {
	if s != nil {
		wuo.SetDescription(*s)
	}
	return wuo
}

// SetTitle sets the "title" field.
func (wuo *WorkbookUpdateOne) SetTitle(s string) *WorkbookUpdateOne {
	wuo.mutation.SetTitle(s)
	return wuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (wuo *WorkbookUpdateOne) SetNillableTitle(s *string) *WorkbookUpdateOne {
	if s != nil {
		wuo.SetTitle(*s)
	}
	return wuo
}

// AddWorkbookCategoryIDs adds the "workbook_categories" edge to the WorkbookCategory entity by IDs.
func (wuo *WorkbookUpdateOne) AddWorkbookCategoryIDs(ids ...int) *WorkbookUpdateOne {
	wuo.mutation.AddWorkbookCategoryIDs(ids...)
	return wuo
}

// AddWorkbookCategories adds the "workbook_categories" edges to the WorkbookCategory entity.
func (wuo *WorkbookUpdateOne) AddWorkbookCategories(w ...*WorkbookCategory) *WorkbookUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkbookCategoryIDs(ids...)
}

// AddWorkbookMemberIDs adds the "workbook_members" edge to the WorkbookMember entity by IDs.
func (wuo *WorkbookUpdateOne) AddWorkbookMemberIDs(ids ...int) *WorkbookUpdateOne {
	wuo.mutation.AddWorkbookMemberIDs(ids...)
	return wuo
}

// AddWorkbookMembers adds the "workbook_members" edges to the WorkbookMember entity.
func (wuo *WorkbookUpdateOne) AddWorkbookMembers(w ...*WorkbookMember) *WorkbookUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkbookMemberIDs(ids...)
}

// Mutation returns the WorkbookMutation object of the builder.
func (wuo *WorkbookUpdateOne) Mutation() *WorkbookMutation {
	return wuo.mutation
}

// ClearWorkbookCategories clears all "workbook_categories" edges to the WorkbookCategory entity.
func (wuo *WorkbookUpdateOne) ClearWorkbookCategories() *WorkbookUpdateOne {
	wuo.mutation.ClearWorkbookCategories()
	return wuo
}

// RemoveWorkbookCategoryIDs removes the "workbook_categories" edge to WorkbookCategory entities by IDs.
func (wuo *WorkbookUpdateOne) RemoveWorkbookCategoryIDs(ids ...int) *WorkbookUpdateOne {
	wuo.mutation.RemoveWorkbookCategoryIDs(ids...)
	return wuo
}

// RemoveWorkbookCategories removes "workbook_categories" edges to WorkbookCategory entities.
func (wuo *WorkbookUpdateOne) RemoveWorkbookCategories(w ...*WorkbookCategory) *WorkbookUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkbookCategoryIDs(ids...)
}

// ClearWorkbookMembers clears all "workbook_members" edges to the WorkbookMember entity.
func (wuo *WorkbookUpdateOne) ClearWorkbookMembers() *WorkbookUpdateOne {
	wuo.mutation.ClearWorkbookMembers()
	return wuo
}

// RemoveWorkbookMemberIDs removes the "workbook_members" edge to WorkbookMember entities by IDs.
func (wuo *WorkbookUpdateOne) RemoveWorkbookMemberIDs(ids ...int) *WorkbookUpdateOne {
	wuo.mutation.RemoveWorkbookMemberIDs(ids...)
	return wuo
}

// RemoveWorkbookMembers removes "workbook_members" edges to WorkbookMember entities.
func (wuo *WorkbookUpdateOne) RemoveWorkbookMembers(w ...*WorkbookMember) *WorkbookUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkbookMemberIDs(ids...)
}

// Where appends a list predicates to the WorkbookUpdate builder.
func (wuo *WorkbookUpdateOne) Where(ps ...predicate.Workbook) *WorkbookUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkbookUpdateOne) Select(field string, fields ...string) *WorkbookUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workbook entity.
func (wuo *WorkbookUpdateOne) Save(ctx context.Context) (*Workbook, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkbookUpdateOne) SaveX(ctx context.Context) *Workbook {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkbookUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkbookUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkbookUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := workbook.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WorkbookUpdateOne) check() error {
	if v, ok := wuo.mutation.Description(); ok {
		if err := workbook.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Workbook.description": %w`, err)}
		}
	}
	if v, ok := wuo.mutation.Title(); ok {
		if err := workbook.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Workbook.title": %w`, err)}
		}
	}
	return nil
}

func (wuo *WorkbookUpdateOne) sqlSave(ctx context.Context) (_node *Workbook, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workbook.Table, workbook.Columns, sqlgraph.NewFieldSpec(workbook.FieldID, field.TypeInt))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workbook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workbook.FieldID)
		for _, f := range fields {
			if !workbook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workbook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.CreatedAt(); ok {
		_spec.SetField(workbook.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workbook.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.CreatedID(); ok {
		_spec.SetField(workbook.FieldCreatedID, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.AddedCreatedID(); ok {
		_spec.AddField(workbook.FieldCreatedID, field.TypeInt, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(workbook.FieldDescription, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Title(); ok {
		_spec.SetField(workbook.FieldTitle, field.TypeString, value)
	}
	if wuo.mutation.WorkbookCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookCategoriesTable,
			Columns: []string{workbook.WorkbookCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkbookCategoriesIDs(); len(nodes) > 0 && !wuo.mutation.WorkbookCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookCategoriesTable,
			Columns: []string{workbook.WorkbookCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkbookCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookCategoriesTable,
			Columns: []string{workbook.WorkbookCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookcategory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkbookMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookMembersTable,
			Columns: []string{workbook.WorkbookMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkbookMembersIDs(); len(nodes) > 0 && !wuo.mutation.WorkbookMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookMembersTable,
			Columns: []string{workbook.WorkbookMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkbookMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workbook.WorkbookMembersTable,
			Columns: []string{workbook.WorkbookMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workbookmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Workbook{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workbook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
