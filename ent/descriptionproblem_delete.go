// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"study-pal-backend/ent/descriptionproblem"
	"study-pal-backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DescriptionProblemDelete is the builder for deleting a DescriptionProblem entity.
type DescriptionProblemDelete struct {
	config
	hooks    []Hook
	mutation *DescriptionProblemMutation
}

// Where appends a list predicates to the DescriptionProblemDelete builder.
func (dpd *DescriptionProblemDelete) Where(ps ...predicate.DescriptionProblem) *DescriptionProblemDelete {
	dpd.mutation.Where(ps...)
	return dpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dpd *DescriptionProblemDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dpd.sqlExec, dpd.mutation, dpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dpd *DescriptionProblemDelete) ExecX(ctx context.Context) int {
	n, err := dpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dpd *DescriptionProblemDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(descriptionproblem.Table, sqlgraph.NewFieldSpec(descriptionproblem.FieldID, field.TypeUUID))
	if ps := dpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dpd.mutation.done = true
	return affected, err
}

// DescriptionProblemDeleteOne is the builder for deleting a single DescriptionProblem entity.
type DescriptionProblemDeleteOne struct {
	dpd *DescriptionProblemDelete
}

// Where appends a list predicates to the DescriptionProblemDelete builder.
func (dpdo *DescriptionProblemDeleteOne) Where(ps ...predicate.DescriptionProblem) *DescriptionProblemDeleteOne {
	dpdo.dpd.mutation.Where(ps...)
	return dpdo
}

// Exec executes the deletion query.
func (dpdo *DescriptionProblemDeleteOne) Exec(ctx context.Context) error {
	n, err := dpdo.dpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{descriptionproblem.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dpdo *DescriptionProblemDeleteOne) ExecX(ctx context.Context) {
	if err := dpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
