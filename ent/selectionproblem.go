// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"study-pal-backend/ent/selectionproblem"
	"study-pal-backend/ent/workbook"
	"study-pal-backend/ent/workbookcategory"
	"study-pal-backend/ent/workbookcategorydetail"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// SelectionProblem is the model entity for the SelectionProblem schema.
type SelectionProblem struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Statement holds the value of the "statement" field.
	Statement string `json:"statement,omitempty"`
	// WorkbookID holds the value of the "workbook_id" field.
	WorkbookID uuid.UUID `json:"workbook_id,omitempty"`
	// WorkbookCategoryID holds the value of the "workbook_category_id" field.
	WorkbookCategoryID *uuid.UUID `json:"workbook_category_id,omitempty"`
	// WorkbookCategoryDetailID holds the value of the "workbook_category_detail_id" field.
	WorkbookCategoryDetailID *uuid.UUID `json:"workbook_category_detail_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SelectionProblemQuery when eager-loading is set.
	Edges        SelectionProblemEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SelectionProblemEdges holds the relations/edges for other nodes in the graph.
type SelectionProblemEdges struct {
	// SelectionProblemAnswers holds the value of the selection_problem_answers edge.
	SelectionProblemAnswers []*SelectionProblemAnswer `json:"selection_problem_answers,omitempty"`
	// Workbook holds the value of the workbook edge.
	Workbook *Workbook `json:"workbook,omitempty"`
	// WorkbookCategory holds the value of the workbook_category edge.
	WorkbookCategory *WorkbookCategory `json:"workbook_category,omitempty"`
	// WorkbookCategoryDetail holds the value of the workbook_category_detail edge.
	WorkbookCategoryDetail *WorkbookCategoryDetail `json:"workbook_category_detail,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SelectionProblemAnswersOrErr returns the SelectionProblemAnswers value or an error if the edge
// was not loaded in eager-loading.
func (e SelectionProblemEdges) SelectionProblemAnswersOrErr() ([]*SelectionProblemAnswer, error) {
	if e.loadedTypes[0] {
		return e.SelectionProblemAnswers, nil
	}
	return nil, &NotLoadedError{edge: "selection_problem_answers"}
}

// WorkbookOrErr returns the Workbook value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SelectionProblemEdges) WorkbookOrErr() (*Workbook, error) {
	if e.Workbook != nil {
		return e.Workbook, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workbook.Label}
	}
	return nil, &NotLoadedError{edge: "workbook"}
}

// WorkbookCategoryOrErr returns the WorkbookCategory value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SelectionProblemEdges) WorkbookCategoryOrErr() (*WorkbookCategory, error) {
	if e.WorkbookCategory != nil {
		return e.WorkbookCategory, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: workbookcategory.Label}
	}
	return nil, &NotLoadedError{edge: "workbook_category"}
}

// WorkbookCategoryDetailOrErr returns the WorkbookCategoryDetail value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SelectionProblemEdges) WorkbookCategoryDetailOrErr() (*WorkbookCategoryDetail, error) {
	if e.WorkbookCategoryDetail != nil {
		return e.WorkbookCategoryDetail, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: workbookcategorydetail.Label}
	}
	return nil, &NotLoadedError{edge: "workbook_category_detail"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SelectionProblem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case selectionproblem.FieldWorkbookCategoryID, selectionproblem.FieldWorkbookCategoryDetailID:
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case selectionproblem.FieldStatement:
			values[i] = new(sql.NullString)
		case selectionproblem.FieldCreatedAt, selectionproblem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case selectionproblem.FieldID, selectionproblem.FieldWorkbookID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SelectionProblem fields.
func (sp *SelectionProblem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case selectionproblem.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sp.ID = *value
			}
		case selectionproblem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sp.CreatedAt = value.Time
			}
		case selectionproblem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sp.UpdatedAt = value.Time
			}
		case selectionproblem.FieldStatement:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field statement", values[i])
			} else if value.Valid {
				sp.Statement = value.String
			}
		case selectionproblem.FieldWorkbookID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_id", values[i])
			} else if value != nil {
				sp.WorkbookID = *value
			}
		case selectionproblem.FieldWorkbookCategoryID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_category_id", values[i])
			} else if value.Valid {
				sp.WorkbookCategoryID = new(uuid.UUID)
				*sp.WorkbookCategoryID = *value.S.(*uuid.UUID)
			}
		case selectionproblem.FieldWorkbookCategoryDetailID:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field workbook_category_detail_id", values[i])
			} else if value.Valid {
				sp.WorkbookCategoryDetailID = new(uuid.UUID)
				*sp.WorkbookCategoryDetailID = *value.S.(*uuid.UUID)
			}
		default:
			sp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SelectionProblem.
// This includes values selected through modifiers, order, etc.
func (sp *SelectionProblem) Value(name string) (ent.Value, error) {
	return sp.selectValues.Get(name)
}

// QuerySelectionProblemAnswers queries the "selection_problem_answers" edge of the SelectionProblem entity.
func (sp *SelectionProblem) QuerySelectionProblemAnswers() *SelectionProblemAnswerQuery {
	return NewSelectionProblemClient(sp.config).QuerySelectionProblemAnswers(sp)
}

// QueryWorkbook queries the "workbook" edge of the SelectionProblem entity.
func (sp *SelectionProblem) QueryWorkbook() *WorkbookQuery {
	return NewSelectionProblemClient(sp.config).QueryWorkbook(sp)
}

// QueryWorkbookCategory queries the "workbook_category" edge of the SelectionProblem entity.
func (sp *SelectionProblem) QueryWorkbookCategory() *WorkbookCategoryQuery {
	return NewSelectionProblemClient(sp.config).QueryWorkbookCategory(sp)
}

// QueryWorkbookCategoryDetail queries the "workbook_category_detail" edge of the SelectionProblem entity.
func (sp *SelectionProblem) QueryWorkbookCategoryDetail() *WorkbookCategoryDetailQuery {
	return NewSelectionProblemClient(sp.config).QueryWorkbookCategoryDetail(sp)
}

// Update returns a builder for updating this SelectionProblem.
// Note that you need to call SelectionProblem.Unwrap() before calling this method if this SelectionProblem
// was returned from a transaction, and the transaction was committed or rolled back.
func (sp *SelectionProblem) Update() *SelectionProblemUpdateOne {
	return NewSelectionProblemClient(sp.config).UpdateOne(sp)
}

// Unwrap unwraps the SelectionProblem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sp *SelectionProblem) Unwrap() *SelectionProblem {
	_tx, ok := sp.config.driver.(*txDriver)
	if !ok {
		panic("ent: SelectionProblem is not a transactional entity")
	}
	sp.config.driver = _tx.drv
	return sp
}

// String implements the fmt.Stringer.
func (sp *SelectionProblem) String() string {
	var builder strings.Builder
	builder.WriteString("SelectionProblem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("statement=")
	builder.WriteString(sp.Statement)
	builder.WriteString(", ")
	builder.WriteString("workbook_id=")
	builder.WriteString(fmt.Sprintf("%v", sp.WorkbookID))
	builder.WriteString(", ")
	if v := sp.WorkbookCategoryID; v != nil {
		builder.WriteString("workbook_category_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := sp.WorkbookCategoryDetailID; v != nil {
		builder.WriteString("workbook_category_detail_id=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SelectionProblems is a parsable slice of SelectionProblem.
type SelectionProblems []*SelectionProblem
